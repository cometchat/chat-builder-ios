// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.2 effective-5.10 (swiftlang-6.0.2.1.2 clang-1600.0.26.4)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name CometChatUIKitSwift
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import AVFAudio
import AVFoundation
import AVKit
import Accelerate
import CometChatSDK
@_exported import CometChatUIKitSwift
import CoreMedia
import DeveloperToolsSupport
import Foundation
import ImageIO
import MessageUI
import QuartzCore
import QuickLook
import SafariServices
import Swift
import SwiftUI
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public class CometChatOption : Swift.Hashable {
  public var id: Swift.String?
  public var title: Swift.String?
  public var icon: UIKit.UIImage?
  public init()
  public static func == (lhs: CometChatUIKitSwift.CometChatOption, rhs: CometChatUIKitSwift.CometChatOption) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  @objc deinit
  public var hashValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class CheckboxElement : CometChatUIKitSwift.ElementEntity {
  @objc public var optional: Swift.Bool
  @objc public var label: Swift.String
  @objc public var defaultValues: [Swift.String]
  @objc public var options: [CometChatUIKitSwift.OptionElement]
  @objc override dynamic public init()
  @objc public static func checkboxElementFromJSON(_ data: [Swift.String : Any]) -> CometChatUIKitSwift.CheckboxElement?
  public func toJSON() -> [Swift.String : Any]
  @objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class AddtionalView : UIKit.UIView {
    @_Concurrency.MainActor @preconcurrency @objc override dynamic public func draw(_ rect: CoreFoundation.CGRect)
    @_Concurrency.MainActor @preconcurrency @objc override dynamic public func touchesEnded(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
    @objc deinit
  }
  @objc deinit
}
public struct ConversationsStyle : CometChatUIKitSwift.ListBaseStyle, CometChatUIKitSwift.ListItemStyle {
  public var listItemSelectedImage: UIKit.UIImage
  public var listItemDeSelectedImage: UIKit.UIImage
  public var backgroundColor: UIKit.UIColor
  public var borderWidth: CoreFoundation.CGFloat
  public var borderColor: UIKit.UIColor
  public var cornerRadius: CometChatUIKitSwift.CometChatCornerStyle
  public var titleFont: UIKit.UIFont?
  public var largeTitleFont: UIKit.UIFont?
  public var titleColor: UIKit.UIColor?
  public var largeTitleColor: UIKit.UIColor?
  public var navigationBarTintColor: UIKit.UIColor?
  public var navigationBarItemsTintColor: UIKit.UIColor?
  public var errorTitleTextFont: UIKit.UIFont
  public var errorTitleTextColor: UIKit.UIColor
  public var errorSubTitleFont: UIKit.UIFont
  public var errorSubTitleTextColor: UIKit.UIColor
  public var retryButtonTextColor: UIKit.UIColor
  public var retryButtonTextFont: UIKit.UIFont
  public var retryButtonBackgroundColor: UIKit.UIColor
  public var retryButtonBorderColor: UIKit.UIColor
  public var retryButtonBorderWidth: CoreFoundation.CGFloat
  public var retryButtonCornerRadius: CometChatUIKitSwift.CometChatCornerStyle
  public var emptyTitleTextFont: UIKit.UIFont
  public var emptyTitleTextColor: UIKit.UIColor
  public var emptySubTitleFont: UIKit.UIFont
  public var emptySubTitleTextColor: UIKit.UIColor
  public var tableViewSeparator: UIKit.UIColor
  public var listItemTitleTextColor: UIKit.UIColor
  public var listItemTitleFont: UIKit.UIFont
  public var listItemSubTitleTextColor: UIKit.UIColor
  public var listItemSubTitleFont: UIKit.UIFont
  public var listItemBackground: UIKit.UIColor
  public var listItemSelectedBackground: UIKit.UIColor
  public var listItemBorderWidth: CoreFoundation.CGFloat
  public var listItemBorderColor: UIKit.UIColor
  public var listItemDeSelectedImageTint: UIKit.UIColor
  public var listItemCornerRadius: CometChatUIKitSwift.CometChatCornerStyle
  public var messageTypeImageTint: UIKit.UIColor
  public var passwordGroupImageTintColor: UIKit.UIColor
  public var passwordGroupImageBackgroundColor: UIKit.UIColor
  public var privateGroupImageTintColor: UIKit.UIColor
  public var privateGroupImageBackgroundColor: UIKit.UIColor
  public var shimmerColor1: UIKit.UIColor?
  public var shimmerColor2: UIKit.UIColor?
  public var listItemSelectionImageTint: UIKit.UIColor
  public init()
}
@_hasMissingDesignatedInitializers public class CometChatCallEvents {
  public static func addListener(_ id: Swift.String, _ observer: any CometChatUIKitSwift.CometChatCallEventListener)
  public static func removeListener(_ id: Swift.String)
  public static func ccOutgoingCall(call: CometChatSDK.Call)
  public static func ccCallAccepted(call: CometChatSDK.Call)
  public static func ccCallRejected(call: CometChatSDK.Call)
  public static func ccCallEnded(call: CometChatSDK.Call)
  @objc deinit
}
public class Palette {
  public var background: UIKit.UIColor {
    get
  }
  public var primary: UIKit.UIColor {
    get
  }
  public var secondary: UIKit.UIColor {
    get
  }
  public var error: UIKit.UIColor {
    get
  }
  public var success: UIKit.UIColor {
    get
  }
  public var accent: UIKit.UIColor {
    get
  }
  public var accent50: UIKit.UIColor {
    get
    set
  }
  public var accent100: UIKit.UIColor {
    get
    set
  }
  public var accent200: UIKit.UIColor {
    get
    set
  }
  public var accent300: UIKit.UIColor {
    get
    set
  }
  public var accent400: UIKit.UIColor {
    get
    set
  }
  public var accent500: UIKit.UIColor {
    get
    set
  }
  public var accent600: UIKit.UIColor {
    get
    set
  }
  public var accent700: UIKit.UIColor {
    get
    set
  }
  public var accent800: UIKit.UIColor {
    get
    set
  }
  public var accent900: UIKit.UIColor {
    get
    set
  }
  public init()
  @discardableResult
  public func set(primary: UIKit.UIColor) -> CometChatUIKitSwift.Palette
  @discardableResult
  public func set(secondary: UIKit.UIColor) -> CometChatUIKitSwift.Palette
  @discardableResult
  public func set(background: UIKit.UIColor) -> CometChatUIKitSwift.Palette
  @discardableResult
  public func set(error: UIKit.UIColor) -> CometChatUIKitSwift.Palette
  @discardableResult
  public func set(success: UIKit.UIColor) -> CometChatUIKitSwift.Palette
  @discardableResult
  public func set(accent: UIKit.UIColor) -> CometChatUIKitSwift.Palette
  @discardableResult
  public func set(accent50: UIKit.UIColor) -> CometChatUIKitSwift.Palette
  @discardableResult
  public func set(accent100: UIKit.UIColor) -> CometChatUIKitSwift.Palette
  @discardableResult
  public func set(accent200: UIKit.UIColor) -> CometChatUIKitSwift.Palette
  @discardableResult
  public func set(accent300: UIKit.UIColor) -> CometChatUIKitSwift.Palette
  @discardableResult
  public func set(accent400: UIKit.UIColor) -> CometChatUIKitSwift.Palette
  @discardableResult
  public func set(accent500: UIKit.UIColor) -> CometChatUIKitSwift.Palette
  @discardableResult
  public func set(accent600: UIKit.UIColor) -> CometChatUIKitSwift.Palette
  @discardableResult
  public func set(accent700: UIKit.UIColor) -> CometChatUIKitSwift.Palette
  @discardableResult
  public func set(accent800: UIKit.UIColor) -> CometChatUIKitSwift.Palette
  @discardableResult
  public func set(accent900: UIKit.UIColor) -> CometChatUIKitSwift.Palette
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class CometChatUIKitHelper {
  public static func onMessageSent(message: CometChatSDK.BaseMessage, status: CometChatUIKitSwift.MessageStatus)
  public static func onMessageEdited(message: CometChatSDK.BaseMessage, status: CometChatUIKitSwift.MessageStatus)
  public static func onMessageDeleted(message: CometChatSDK.BaseMessage)
  public static func onMessageRead(message: CometChatSDK.BaseMessage)
  public static func onLiveReaction(message: CometChatSDK.TransientMessage)
  public static func onUserBlocked(user: CometChatSDK.User)
  public static func onUserUnblocked(user: CometChatSDK.User)
  public static func onConversationDeleted(conversation: CometChatSDK.Conversation)
  public static func onGroupCreated(group: CometChatSDK.Group)
  public static func onGroupDeleted(group: CometChatSDK.Group)
  public static func onGroupLeft(action: CometChatSDK.ActionMessage, leftUser: CometChatSDK.User, leftGroup: CometChatSDK.Group)
  public static func onGroupMemberScopeChanged(action: CometChatSDK.ActionMessage, updatedUser: CometChatSDK.User, scopeChangedTo: Swift.String, scopeChangedFrom: Swift.String, group: CometChatSDK.Group)
  public static func onGroupMemberBanned(action: CometChatSDK.ActionMessage, bannedUser: CometChatSDK.User, bannedBy: CometChatSDK.User, bannedFrom: CometChatSDK.Group)
  public static func onGroupMemberKicked(action: CometChatSDK.ActionMessage, kickedUser: CometChatSDK.User, kickedBy: CometChatSDK.User, kickedFrom: CometChatSDK.Group)
  public static func onGroupMemberUnbanned(action: CometChatSDK.ActionMessage, unbannedUser: CometChatSDK.User, unbannedBy: CometChatSDK.User, unbannedFrom: CometChatSDK.Group)
  public static func onGroupMemberJoined(joinedUser: CometChatSDK.User, joinedGroup: CometChatSDK.Group)
  public static func onGroupMemberAdded(messages: [CometChatSDK.ActionMessage], usersAdded: [CometChatSDK.User], groupAddedIn: CometChatSDK.Group, addedBy: CometChatSDK.User)
  public static func onOwnershipChanged(group: CometChatSDK.Group, newOwner: CometChatSDK.GroupMember)
  public static func showPanel(id: [Swift.String : Any]?, alignment: CometChatUIKitSwift.UIAlignment, view: UIKit.UIView?)
  public static func hidePanel(id: [Swift.String : Any]?, alignment: CometChatUIKitSwift.UIAlignment)
  public static func onActiveChatChanged(id: [Swift.String : Any]?, lastMessage: CometChatSDK.BaseMessage?, user: CometChatSDK.User?, group: CometChatSDK.Group?)
  @objc deinit
}
extension CometChatUIKitSwift.CometChatUIKitHelper {
  @available(*, deprecated, message: "Use onGroupLeft(action: ActionMessage, leftUser: User, leftGroup: Group) instead")
  public static func onGroupLeft(user: CometChatSDK.User, group: CometChatSDK.Group)
  @available(*, deprecated, message: "Use onGroupMemberAdded(group: Group, newOwner: GroupMember) instead")
  public static func onOwnershipChanged(group: CometChatSDK.Group?, member: CometChatSDK.GroupMember?)
  @available(*, deprecated, message: "Use onGroupMemberAdded(group: Group, members: [GroupMember], addedBy: User) instead")
  public static func onGroupMemberAdded(group: CometChatSDK.Group, members: [CometChatSDK.GroupMember], addedBy: CometChatSDK.User)
  @available(*, deprecated, message: "Use onGroupMemberUnbanned(action: ActionMessage, unbannedUser: User, unbannedBy: User, unbannedFrom: Group) instead")
  public static func onGroupMemberUnbanned(unbannedUserUser: CometChatSDK.User, unbannedUserGroup: CometChatSDK.Group, unbannedBy: CometChatSDK.User)
  @available(*, deprecated, message: "Use onGroupMemberKicked(action: ActionMessage, kickedUser: User, kickedBy: User, kickedFrom: Group) instead")
  public static func onGroupMemberKicked(kickedUser: CometChatSDK.User, kickedGroup: CometChatSDK.Group, kickedBy: CometChatSDK.User)
  @available(*, deprecated, message: "Use onGroupMemberBanned(action: ActionMessage, bannedUser: User, bannedBy: User, bannedFrom: Group) instead")
  public static func onGroupMemberBanned(bannedUser: CometChatSDK.User, bannedGroup: CometChatSDK.Group, bannedBy: CometChatSDK.User)
  @available(*, deprecated, message: "Use onGroupMemberScopeChanged(action: ActionMessage, updatedUser: User, scopeChangedTo: String, scopeChangedFrom: String, group: Group) instead")
  public static func onGroupMemberScopeChanged(updatedBy: CometChatSDK.User, updatedUser: CometChatSDK.User, scopeChangedTo: CometChatSDK.CometChat.MemberScope, scopeChangedFrom: CometChatSDK.CometChat.MemberScope, group: CometChatSDK.Group)
}
public enum Corner : Swift.Int {
  case leftTop, rightTop, leftBottom, rightBottom, none
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct CometChatCornerStyle {
  public init()
  public init(topLeft: Swift.Bool = false, topRight: Swift.Bool = false, bottomLeft: Swift.Bool = false, bottomRight: Swift.Bool = false, cornerRadius: CoreFoundation.CGFloat)
}
public struct CometChatCorner {
  public init()
  public init(topLeft: CoreFoundation.CGFloat, topRight: CoreFoundation.CGFloat, bottomLeft: CoreFoundation.CGFloat, bottomRight: CoreFoundation.CGFloat)
  public init(cornerRadius: CoreFoundation.CGFloat)
}
public struct ExtensionConstants {
}
public struct AIConstants {
}
public struct ActionSheetStyle {
  public var backgroundColor: UIKit.UIColor
  public var borderWidth: CoreFoundation.CGFloat
  public var borderColor: UIKit.UIColor
  public var cornerRadius: CometChatUIKitSwift.CometChatCornerStyle?
  public var imageTintColor: UIKit.UIColor
  public var textFont: UIKit.UIFont
  public var textColor: UIKit.UIColor
  public init()
}
extension CometChatUIKitSwift.CometChatMessageComposer {
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(user: CometChatSDK.User) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(group: CometChatSDK.Group) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(parentMessageId: Swift.Int) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(attachmentOptions: @escaping ((_ user: CometChatSDK.User?, _ group: CometChatSDK.Group?, _ controller: UIKit.UIViewController?) -> [CometChatUIKitSwift.CometChatMessageComposerAction])) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(maxLines: Swift.Int) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(onTextChangedListener: @escaping ((Swift.String) -> ())) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(textFormatter: [CometChatUIKitSwift.CometChatTextFormatter]) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func disable(soundForMessages: Swift.Bool) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(customSoundForMessages: Foundation.URL) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(onSendButtonClick: @escaping ((CometChatSDK.BaseMessage) -> Swift.Void)) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(onError: ((_ error: Any) -> ())?) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(headerView: UIKit.UIView) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func remove(footerView: Swift.Bool) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(footerView: UIKit.UIView) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func remove(headerView: Swift.Bool) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(sendButtonView: ((_ user: CometChatSDK.User?, _ group: CometChatSDK.Group?) -> UIKit.UIView)?) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(auxillaryButtonView: ((_ user: CometChatSDK.User?, _ group: CometChatSDK.Group?) -> UIKit.UIView)?) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(controller: UIKit.UIViewController) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func reply(message: CometChatSDK.BaseMessage) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func preview(message: CometChatSDK.BaseMessage, mode: CometChatUIKitSwift.MessageComposerMode) -> Self
}
public protocol CometChatCallEventListener {
  func ccOutgoingCall(call: CometChatSDK.Call)
  func ccCallAccepted(call: CometChatSDK.Call)
  func ccCallRejected(call: CometChatSDK.Call)
  func ccCallEnded(call: CometChatSDK.Call)
  @available(*, deprecated, message: "Use `ccCallAccepted(call: Call)` instead")
  func onIncomingCallAccepted(call: CometChatSDK.Call)
  @available(*, deprecated, message: "Use `ccCallRejected(call: Call)` instead")
  func onIncomingCallRejected(call: CometChatSDK.Call)
  @available(*, deprecated, message: "Use `ccCallEnded(call: Call)` instead")
  func onCallEnded(call: CometChatSDK.Call)
  @available(*, deprecated, message: "Use `ccOutgoingCall(call: Call)` instead")
  func onCallInitiated(call: CometChatSDK.Call)
  @available(*, deprecated, message: "Use `ccCallAccepted(call: Call)` instead")
  func onOutgoingCallAccepted(call: CometChatSDK.Call)
  @available(*, deprecated, message: "Use `ccCallRejected(call: Call)` instead")
  func onOutgoingCallRejected(call: CometChatSDK.Call)
}
extension CometChatUIKitSwift.CometChatCallEventListener {
  public func ccOutgoingCall(call: CometChatSDK.Call)
  public func ccCallAccepted(call: CometChatSDK.Call)
  public func ccCallRejected(call: CometChatSDK.Call)
  public func ccCallEnded(call: CometChatSDK.Call)
  public func onIncomingCallAccepted(call: CometChatSDK.Call)
  public func onIncomingCallRejected(call: CometChatSDK.Call)
  public func onCallEnded(call: CometChatSDK.Call)
  public func onCallInitiated(call: CometChatSDK.Call)
  public func onOutgoingCallAccepted(call: CometChatSDK.Call)
  public func onOutgoingCallRejected(call: CometChatSDK.Call)
}
@_hasMissingDesignatedInitializers public class GroupsBuilder {
  public static func getDefaultRequestBuilder() -> CometChatSDK.GroupsRequest.GroupsRequestBuilder
  @objc deinit
}
@objc public protocol GrowingTextViewDelegate : UIKit.UITextViewDelegate {
  @objc optional func textViewDidChangeHeight(_ textView: CometChatUIKitSwift.GrowingTextView, height: CoreFoundation.CGFloat)
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor @preconcurrency open class GrowingTextView : UIKit.UITextView {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var text: Swift.String! {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var attributedText: Foundation.NSAttributedString! {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency open var maxLength: Swift.Int
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency open var trimWhiteSpaceWhenEndEditing: Swift.Bool
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency open var minHeight: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency open var maxLine: Swift.Int {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency open var maxHeight: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency open var placeholder: Swift.String? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency open var placeholderColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency open var placeholderFont: UIKit.UIFont {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency open var attributedPlaceholder: Foundation.NSAttributedString? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect, textContainer: UIKit.NSTextContainer?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func draw(_ rect: CoreFoundation.CGRect)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc @IBDesignable @_Concurrency.MainActor @preconcurrency public class CometChatStatusIndicator : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public static var style: CometChatUIKitSwift.StatusIndicatorStyle
  @_Concurrency.MainActor @preconcurrency public var style: CometChatUIKitSwift.StatusIndicatorStyle {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func layoutSubviews()
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(status: CometChatSDK.UserStatus, backgroundColor: UIKit.UIColor? = nil) -> Self
  @discardableResult
  @objc @_Concurrency.MainActor @preconcurrency public func set(icon: UIKit.UIImage?, with tintColor: UIKit.UIColor) -> CometChatUIKitSwift.CometChatStatusIndicator
  @objc deinit
}
@_hasMissingDesignatedInitializers public class StickerBubbleConfiguration {
  @discardableResult
  public func set(style: CometChatUIKitSwift.StickerBubbleStyle) -> CometChatUIKitSwift.StickerBubbleConfiguration
  @objc deinit
}
public struct AIOptionsStyle : CometChatUIKitSwift.AIParentStyle {
  public var errorViewTextFont: UIKit.UIFont?
  public var errorViewTextColor: UIKit.UIColor?
  public var emptyViewTextFont: UIKit.UIFont?
  public var emptyViewTextColor: UIKit.UIColor?
  public var aiImageTintColor: UIKit.UIColor
  public var textColor: UIKit.UIColor
  public var textFont: UIKit.UIFont
  public var backgroundColor: UIKit.UIColor
  public var borderWidth: CoreFoundation.CGFloat
  public var borderColor: UIKit.UIColor
  public var cornerRadius: CometChatUIKitSwift.CometChatCornerStyle?
  public init()
}
public struct MessageOptionStyle {
  public var imageTintColor: UIKit.UIColor
  public var backgroundColor: UIKit.UIColor
  public var titleColor: UIKit.UIColor
  public var titleFont: UIKit.UIFont
}
public struct CometChatMessageOption : Swift.Hashable {
  public let id: Swift.String
  public let title: Swift.String
  public let icon: UIKit.UIImage?
  public let packageName: Swift.String?
  public let overrideDefaultAction: Swift.Bool?
  public var onItemClick: ((_ message: CometChatSDK.BaseMessage?) -> Swift.Void)?
  public var style: CometChatUIKitSwift.MessageOptionStyle
  public init(id: Swift.String, title: Swift.String, icon: UIKit.UIImage?, style: CometChatUIKitSwift.MessageOptionStyle? = nil, onItemClick: ((CometChatSDK.BaseMessage?) -> Swift.Void)? = nil)
  public static func == (lhs: CometChatUIKitSwift.CometChatMessageOption, rhs: CometChatUIKitSwift.CometChatMessageOption) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers final public class SchedulerBubbleStyle : CometChatUIKitSwift.BaseStyle {
  override public init()
  @discardableResult
  final public func set(timeSlotSelectorStyle: CometChatUIKitSwift.TimeSlotSelectorStyle) -> Self
  @discardableResult
  final public func set(avatarStyle: CometChatUIKitSwift.AvatarStyle) -> Self
  @discardableResult
  final public func set(messageTintColor: UIKit.UIColor) -> Self
  @discardableResult
  final public func set(titleFont: UIKit.UIFont) -> Self
  @discardableResult
  final public func set(lisItemStyle: any CometChatUIKitSwift.ListItemStyle) -> Self
  @discardableResult
  final public func set(dividerTint: UIKit.UIColor) -> Self
  @discardableResult
  final public func set(titleTint: UIKit.UIColor) -> Self
  @discardableResult
  final public func set(deactivatedTint: UIKit.UIColor) -> Self
  @objc deinit
}
final public class CallButtonConfiguration {
  public init()
  @discardableResult
  final public func hide(voiceCall: Swift.Bool?) -> Self
  @discardableResult
  final public func hide(videoCall: Swift.Bool?) -> Self
  @discardableResult
  final public func set(callButtonsStyle: CometChatUIKitSwift.ButtonStyle?) -> Self
  @discardableResult
  final public func setOnVoiceCallClick(onVoiceCallClick: @escaping ((_ user: CometChatSDK.User?, _ group: CometChatSDK.Group?) -> Swift.Void)) -> Self
  @discardableResult
  final public func setOnVideoCallClick(onVideoCallClick: @escaping ((_ user: CometChatSDK.User?, _ group: CometChatSDK.Group?) -> Swift.Void)) -> Self
  @discardableResult
  final public func setOnError(onError: @escaping ((_ error: CometChatSDK.CometChatException?) -> Swift.Void)) -> Self
  @discardableResult
  final public func set(outgoingCallConfiguration: CometChatUIKitSwift.OutgoingCallConfiguration?) -> Self
  @discardableResult
  final public func set(callSettingsBuilder: @escaping ((_ user: CometChatSDK.User?, _ group: CometChatSDK.Group?, _ isAudioOnly: Swift.Bool) -> Any)) -> Self
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class CometChatMessageList : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency open var tableView: UIKit.UITableView {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var errorStateView: UIKit.UIView {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var emptyStateView: UIKit.UIView {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var loadingStateView: UIKit.UIView {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var hideHeaderView: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public var hideBubbleHeader: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public var hideFooterView: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public var hideDateSeparator: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public var scrollToBottomOnNewMessages: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public var hideReceipts: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public var disableSoundForMessages: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public var hideEmptyView: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public var hideErrorView: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public var hideLoadingView: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public var hideNewMessageIndicator: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var reactionsConfiguration: CometChatUIKitSwift.ReactionsConfiguration?
  @_Concurrency.MainActor @preconcurrency public var reactionListConfiguration: CometChatUIKitSwift.ReactionListConfiguration?
  @_Concurrency.MainActor @preconcurrency public var quickReactionsConfiguration: CometChatUIKitSwift.QuickReactionsConfiguration?
  @_Concurrency.MainActor @preconcurrency public var messageInformationConfiguration: CometChatUIKitSwift.MessageInformationConfiguration?
  @_Concurrency.MainActor @preconcurrency public static var style: CometChatUIKitSwift.MessageListStyle
  @_Concurrency.MainActor @preconcurrency public static var emojiKeyboardStyle: CometChatUIKitSwift.EmojiKeyboardStyle
  @_Concurrency.MainActor @preconcurrency public static var dateSeparatorStyle: CometChatUIKitSwift.DateStyle
  @_Concurrency.MainActor @preconcurrency public static var newMessageIndicatorStyle: CometChatUIKitSwift.NewMessageIndicatorStyle
  @_Concurrency.MainActor @preconcurrency public static var messageBubbleStyle: (incoming: CometChatUIKitSwift.MessageBubbleStyle, outgoing: CometChatUIKitSwift.MessageBubbleStyle)
  @_Concurrency.MainActor @preconcurrency public static var actionBubbleStyle: CometChatUIKitSwift.GroupActionBubbleStyle
  @_Concurrency.MainActor @preconcurrency public var style: CometChatUIKitSwift.MessageListStyle
  @_Concurrency.MainActor @preconcurrency public var emojiKeyboardStyle: CometChatUIKitSwift.EmojiKeyboardStyle
  @_Concurrency.MainActor @preconcurrency public var dateSeparatorStyle: CometChatUIKitSwift.DateStyle {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var newMessageIndicatorStyle: CometChatUIKitSwift.NewMessageIndicatorStyle {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var messageBubbleStyle: (incoming: CometChatUIKitSwift.MessageBubbleStyle, outgoing: CometChatUIKitSwift.MessageBubbleStyle) {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var actionBubbleStyle: CometChatUIKitSwift.GroupActionBubbleStyle {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var callActionBubbleStyle: CometChatUIKitSwift.CallActionBubbleStyle {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public static var dateTimeFormatter: CometChatUIKitSwift.CometChatDateTimeFormatter
  @_Concurrency.MainActor @preconcurrency public var dateTimeFormatter: CometChatUIKitSwift.CometChatDateTimeFormatter {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var hideAvatar: Swift.Bool?
  @_Concurrency.MainActor @preconcurrency public var hideGroupActionMessages: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public var hideReplyInThreadOption: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var hideTranslateMessageOption: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var hideEditMessageOption: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var hideDeleteMessageOption: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var hideReactionOption: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var hideMessagePrivatelyOption: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var hideCopyMessageOption: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var hideMessageInfoOption: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var hideShareMessageOption: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var enableConversationStarters: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public var enableSmartReplies: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public var datePattern: ((_ timestamp: Swift.Int?) -> Swift.String)? {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var timePattern: ((_ timestamp: Swift.Int?) -> Swift.String)? {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var dateSeparatorPattern: ((_ timestamp: Swift.Int?) -> Swift.String)? {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var messageAlignment: CometChatUIKitSwift.MessageListAlignment
  @_Concurrency.MainActor @preconcurrency public var customSoundForMessages: Foundation.URL?
  @_Concurrency.MainActor @preconcurrency public var emptyTitleText: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var emptySubtitleText: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var errorTitleText: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var errorSubtitleText: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func willMove(toWindow newWindow: UIKit.UIWindow?)
  @objc deinit
  @_Concurrency.MainActor @preconcurrency open func buildUI()
  @_Concurrency.MainActor @preconcurrency open func setupStyle()
  @_Concurrency.MainActor @preconcurrency open func reload()
  @_Concurrency.MainActor @preconcurrency open func showNewMessageIndicator()
  @_Concurrency.MainActor @preconcurrency open func showErrorView()
  @_Concurrency.MainActor @preconcurrency open func removeErrorView()
  @_Concurrency.MainActor @preconcurrency open func showEmptyView()
  @_Concurrency.MainActor @preconcurrency open func removeEmptyView()
  @_Concurrency.MainActor @preconcurrency open func showLoadingView()
  @_Concurrency.MainActor @preconcurrency open func removeLoadingView()
  @_Concurrency.MainActor @preconcurrency open func showTopSpinner()
  @_Concurrency.MainActor @preconcurrency open func hideTopSpinner()
  @_Concurrency.MainActor @preconcurrency open func setupViewModel()
  @_Concurrency.MainActor @preconcurrency open func handleThemeModeChange()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @_Concurrency.MainActor @preconcurrency open func buildMessageFooterView(on cell: CometChatUIKitSwift.CometChatMessageBubble, for message: CometChatSDK.BaseMessage, messageTypeStyle: (any CometChatUIKitSwift.BaseMessageBubbleStyle)?, bubbleStyle: CometChatUIKitSwift.MessageBubbleStyle)
  @_Concurrency.MainActor @preconcurrency open func addThreadedRepliesView(forMessage: CometChatSDK.BaseMessage, toCell: CometChatUIKitSwift.CometChatMessageBubble, isLoggedInUser: Swift.Bool, specificMessageTypeStyle: (any CometChatUIKitSwift.BaseMessageBubbleStyle)?, bubbleStyle: CometChatUIKitSwift.MessageBubbleStyle)
}
extension CometChatUIKitSwift.CometChatMessageList : UIKit.UITableViewDelegate, UIKit.UITableViewDataSource {
  @_Concurrency.MainActor @preconcurrency @objc dynamic open func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc dynamic open func tableView(_ tableView: UIKit.UITableView, viewForFooterInSection section: Swift.Int) -> UIKit.UIView?
  @_Concurrency.MainActor @preconcurrency @objc dynamic open func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc dynamic open func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func tableView(_ tableView: UIKit.UITableView, heightForRowAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency @objc dynamic open func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor @preconcurrency @objc dynamic open func tableView(_ tableView: UIKit.UITableView, willDisplay cell: UIKit.UITableViewCell, forRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor @preconcurrency @objc dynamic open func tableView(_ tableView: UIKit.UITableView, heightForFooterInSection section: Swift.Int) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func tableView(_ tableView: UIKit.UITableView, estimatedHeightForRowAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency @objc dynamic open func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor @preconcurrency @objc dynamic open func tableView(_ tableView: UIKit.UITableView, didDeselectRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor @preconcurrency @objc dynamic open func tableView(_ tableView: UIKit.UITableView, trailingSwipeActionsConfigurationForRowAt indexPath: Foundation.IndexPath) -> UIKit.UISwipeActionsConfiguration?
  @_Concurrency.MainActor @preconcurrency @objc dynamic open func scrollViewWillBeginDecelerating(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor @preconcurrency public func shouldLoadMoreData(scrollView: UIKit.UIScrollView) -> Swift.Bool
}
extension CometChatUIKitSwift.CometChatMessageList {
  @_Concurrency.MainActor @preconcurrency @objc dynamic open func scrollViewDidZoom(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor @preconcurrency @objc dynamic open func scrollViewWillBeginDragging(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor @preconcurrency @objc dynamic open func scrollViewWillEndDragging(_ scrollView: UIKit.UIScrollView, withVelocity velocity: CoreFoundation.CGPoint, targetContentOffset: Swift.UnsafeMutablePointer<CoreFoundation.CGPoint>)
  @_Concurrency.MainActor @preconcurrency @objc dynamic open func scrollViewDidEndDragging(_ scrollView: UIKit.UIScrollView, willDecelerate decelerate: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc dynamic open func scrollViewDidEndDecelerating(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor @preconcurrency @objc dynamic open func scrollViewDidEndScrollingAnimation(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor @preconcurrency @objc dynamic open func viewForZooming(in scrollView: UIKit.UIScrollView) -> UIKit.UIView?
  @_Concurrency.MainActor @preconcurrency @objc dynamic open func scrollViewWillBeginZooming(_ scrollView: UIKit.UIScrollView, with view: UIKit.UIView?)
  @_Concurrency.MainActor @preconcurrency @objc dynamic open func scrollViewDidEndZooming(_ scrollView: UIKit.UIScrollView, with view: UIKit.UIView?, atScale scale: CoreFoundation.CGFloat)
  @_Concurrency.MainActor @preconcurrency @objc dynamic open func scrollViewShouldScrollToTop(_ scrollView: UIKit.UIScrollView) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc dynamic open func scrollViewDidScrollToTop(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor @preconcurrency @objc dynamic open func scrollViewDidChangeAdjustedContentInset(_ scrollView: UIKit.UIScrollView)
}
public protocol AIParentStyle {
  var errorViewTextFont: UIKit.UIFont? { get set }
  var errorViewTextColor: UIKit.UIColor? { get set }
  var emptyViewTextFont: UIKit.UIFont? { get set }
  var emptyViewTextColor: UIKit.UIColor? { get set }
}
@_hasMissingDesignatedInitializers public class ExtensionDataSource {
  public func enable()
  public func addExtension()
  public func getExtensionId() -> Swift.String
  @objc deinit
}
@_inheritsConvenienceInitializers public class MessageTranslationExtension : CometChatUIKitSwift.ExtensionDataSource {
  public init()
  override public func addExtension()
  override public func getExtensionId() -> Swift.String
  @objc deinit
}
open class ReactionListConfiguration {
  public init()
  @discardableResult
  public func set(reactionRequestBuilder: CometChatSDK.ReactionsRequestBuilder?) -> Self
  @discardableResult
  public func set(avatarStyle: CometChatUIKitSwift.AvatarStyle?) -> Self
  @discardableResult
  public func set(listItemStyle: (any CometChatUIKitSwift.ListItemStyle)?) -> Self
  @discardableResult
  public func set(onTappedToRemoveClicked: ((_ messageReaction: CometChatSDK.Reaction, _ messageObject: CometChatSDK.BaseMessage) -> ())?) -> Self
  @discardableResult
  public func set(errorStateView: UIKit.UIView?) -> Self
  @discardableResult
  public func set(loadingStateView: UIKit.UIView?) -> Self
  @discardableResult
  public func set(style: CometChatUIKitSwift.ReactionListStyle?) -> Self
  @objc deinit
}
public class CallingConfiguration {
  public init()
  @discardableResult
  public func set(incomingCallConfiguration: CometChatUIKitSwift.IncomingCallConfiguration) -> Self
  @discardableResult
  public func set(outgoingCallConfiguration: CometChatUIKitSwift.OutgoingCallConfiguration) -> Self
  @discardableResult
  public func set(groupCallSettingsBuilder: @escaping ((_ user: CometChatSDK.User?, _ group: CometChatSDK.Group?, _ isAudioOnly: Swift.Bool) -> Any)) -> Self
  @discardableResult
  public func set(callBubbleConfiguration: CometChatUIKitSwift.CallBubbleConfiguration) -> Self
  @discardableResult
  public func set(callButtonConfiguration: CometChatUIKitSwift.CallButtonConfiguration) -> Self
  @objc deinit
}
extension CometChatUIKitSwift.CometChatIncomingCall {
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(call: CometChatSDK.Call) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(callSettingsBuilder: Any) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(onError: @escaping ((_ error: CometChatSDK.CometChatException) -> Swift.Void)) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(onCancelClick: @escaping (_ call: CometChatSDK.Call?, _ controller: UIKit.UIViewController?) -> Swift.Void) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(onAcceptClick: @escaping (_ call: CometChatSDK.Call?, _ controller: UIKit.UIViewController?) -> Swift.Void) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func disable(soundForCalls: Swift.Bool) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(customSoundForCalls: Foundation.URL?) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(subtitleView: ((_ call: CometChatSDK.Call) -> UIKit.UIView)?) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(trailView: ((_ call: CometChatSDK.Call) -> UIKit.UIView)?) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(titleView: ((_ call: CometChatSDK.Call) -> UIKit.UIView)?) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(listItemView: ((_ call: CometChatSDK.Call) -> UIKit.UIView)?) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(leadingView: ((_ call: CometChatSDK.Call) -> UIKit.UIView)?) -> Self
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc @IBDesignable @_Concurrency.MainActor @preconcurrency public class CometChatDate : UIKit.UILabel {
  @_Concurrency.MainActor @preconcurrency public static var style: CometChatUIKitSwift.DateStyle
  @_Concurrency.MainActor @preconcurrency public var style: CometChatUIKitSwift.DateStyle {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var dateTimeFormatter: CometChatUIKitSwift.CometChatDateTimeFormatter?
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func drawText(in rect: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func willMove(toSuperview newSuperview: UIKit.UIView?)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func textRect(forBounds bounds: CoreFoundation.CGRect, limitedToNumberOfLines numberOfLines: Swift.Int) -> CoreFoundation.CGRect
  @_Concurrency.MainActor @preconcurrency open func buildUI()
  @_Concurrency.MainActor @preconcurrency open func setupStyle()
  @discardableResult
  @objc @_Concurrency.MainActor @preconcurrency public func set(timestamp: Swift.Int) -> CometChatUIKitSwift.CometChatDate
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(pattern: CometChatUIKitSwift.CometChatDatePattern) -> CometChatUIKitSwift.CometChatDate
  @discardableResult
  @objc @_Concurrency.MainActor @preconcurrency public func setCustomPattern(customPattern: @escaping (_ timestamp: Swift.Int) -> (Swift.String?)) -> CometChatUIKitSwift.CometChatDate
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class CometChatAIConversationStarter : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency final public let errorView: UIKit.UIView
  @_Concurrency.MainActor @preconcurrency final public let errorLabel: UIKit.UILabel
  @_Concurrency.MainActor @preconcurrency public var tableView: CometChatUIKitSwift.SelfSizingTableView
  @_Concurrency.MainActor @preconcurrency public var aiMessagesList: [Swift.String]
  @_Concurrency.MainActor @preconcurrency public var onAiMessageClicked: ((_ selectedReply: Swift.String) -> ())?
  @_Concurrency.MainActor @preconcurrency public var id: [Swift.String : Any]?
  @_Concurrency.MainActor @preconcurrency public var loadingView: UIKit.UIView!
  @_Concurrency.MainActor @preconcurrency public var disableLoadingState: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public var isLoadingViewVisible: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public static var style: CometChatUIKitSwift.AIConversationStarterStyle
  @_Concurrency.MainActor @preconcurrency public var style: CometChatUIKitSwift.AIConversationStarterStyle {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func willMove(toWindow newWindow: UIKit.UIWindow?)
  @_Concurrency.MainActor @preconcurrency public func setupDelegate()
  @_Concurrency.MainActor @preconcurrency open func buildUI()
  @_Concurrency.MainActor @preconcurrency open func setupStyle()
  @_Concurrency.MainActor @preconcurrency public func showLoadingView()
  @_Concurrency.MainActor @preconcurrency public func hideLoadingView()
  @discardableResult
  @objc @_Concurrency.MainActor @preconcurrency public func set(aiMessageOptions: [Swift.String]) -> Self
  @discardableResult
  @objc @_Concurrency.MainActor @preconcurrency public func onMessageClicked(onAiMessageClicked: @escaping ((_ selectedReply: Swift.String) -> ())) -> Self
  @discardableResult
  @objc @_Concurrency.MainActor @preconcurrency public func show(error: Swift.Bool) -> Self
  @objc deinit
}
extension CometChatUIKitSwift.CometChatAIConversationStarter : UIKit.UITableViewDelegate, UIKit.UITableViewDataSource {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func tableView(_ tableView: UIKit.UITableView, heightForRowAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGFloat
}
@_inheritsConvenienceInitializers @objc public class TextInputElement : CometChatUIKitSwift.ElementEntity {
  public var optional: Swift.Bool?
  @objc public var label: Swift.String
  public var maximum: Swift.Int?
  @objc public var placeHolder: Swift.String
  @objc public var defaultValue: Swift.String
  @objc public var text: Swift.String
  @objc override dynamic public init()
  @objc public static func textInputElementFromJSON(_ data: [Swift.String : Any]) -> CometChatUIKitSwift.TextInputElement?
  public func toJSON() -> [Swift.String : Any]
  @objc deinit
}
@_hasMissingDesignatedInitializers public class CometChatMessageEvents {
  public static func addListener(_ id: Swift.String, _ observer: any CometChatUIKitSwift.CometChatMessageEventListener)
  public static func removeListener(_ id: Swift.String)
  public static func onMessagesReadByAll(receipt: CometChatSDK.MessageReceipt)
  public static func onMessagesDeliveredToAll(receipt: CometChatSDK.MessageReceipt)
  public static func onTextMessageReceived(textMessage: CometChatSDK.TextMessage)
  public static func onMediaMessageReceived(message: CometChatSDK.MediaMessage)
  public static func onCustomMessageReceived(message: CometChatSDK.CustomMessage)
  public static func onTypingStarted(_ typingIndicator: CometChatSDK.TypingIndicator)
  public static func onTypingEnded(_ typingIndicator: CometChatSDK.TypingIndicator)
  public static func onMessagesDelivered(receipt: CometChatSDK.MessageReceipt)
  public static func onMessagesRead(receipt: CometChatSDK.MessageReceipt)
  public static func onTransientMessageReceived(_ message: CometChatSDK.TransientMessage)
  public static func onFormMessageReceived(message: CometChatUIKitSwift.FormMessage)
  public static func onCardMessageReceived(message: CometChatUIKitSwift.CardMessage)
  public static func onSchedulerMessageReceived(message: CometChatUIKitSwift.SchedulerMessage)
  public static func onCustomInteractiveMessageReceived(message: CometChatUIKitSwift.CustomInteractiveMessage)
  public static func ccMessageSent(message: CometChatSDK.BaseMessage, status: CometChatUIKitSwift.MessageStatus)
  public static func ccMessageEdited(message: CometChatSDK.BaseMessage, status: CometChatUIKitSwift.MessageStatus)
  public static func onMessageEdited(message: CometChatSDK.BaseMessage)
  public static func ccMessageDeleted(message: CometChatSDK.BaseMessage)
  public static func onMessageDeleted(message: CometChatSDK.BaseMessage)
  public static func ccMessageRead(message: CometChatSDK.BaseMessage)
  public static func onMessageRead(receipt: CometChatSDK.MessageReceipt)
  public static func ccLiveReaction(reaction: CometChatSDK.TransientMessage)
  public static func onMessageReactionAdded(reactionEvent: CometChatSDK.ReactionEvent)
  public static func onMessageReactionRemoved(reactionEvent: CometChatSDK.ReactionEvent)
  @objc deinit
}
extension CometChatUIKitSwift.CometChatMessageEvents {
  @available(*, deprecated, message: "Use `onTransientMessageReceived(_ message: TransientMessage)` instead")
  public static func onTransisentMessageReceived(_ message: CometChatSDK.TransientMessage)
  @available(*, deprecated, message: "Use `ccMessageSent(message: BaseMessage, status: MessageStatus)` instead")
  public static func emitOnMessageSent(message: CometChatSDK.BaseMessage, status: CometChatUIKitSwift.MessageStatus)
  @available(*, deprecated, message: "Use `ccMessageEdited(message: BaseMessage)` instead")
  public static func emitOnMessageEdit(message: CometChatSDK.BaseMessage, status: CometChatUIKitSwift.MessageStatus)
  @available(*, deprecated, message: "Use `ccMessageDeleted(message: BaseMessage)` instead")
  public static func emitOnMessageDelete(message: CometChatSDK.BaseMessage)
  @available(*, deprecated, message: "Use `ccMessageEdited(message: BaseMessage, status: MessageStatus)` instead")
  public static func emitOnMessageReply(message: CometChatSDK.BaseMessage, status: CometChatUIKitSwift.MessageStatus)
  @available(*, deprecated, message: "Use `ccMessageRead(message: BaseMessage)` instead")
  public static func emitOnMessageRead(message: CometChatSDK.BaseMessage)
  @available(*, deprecated, message: "Use `ccLiveReaction(reaction: TransientMessage)` instead")
  public static func emitOnLiveReaction(reaction: CometChatSDK.TransientMessage)
  @available(*, deprecated, message: "This function is now deprecated")
  public static func emitOnVoiceCall(user: CometChatSDK.User)
  @available(*, deprecated, message: "This function is now deprecated")
  public static func emitOnVoiceCall(group: CometChatSDK.Group)
  @available(*, deprecated, message: "This function is now deprecated")
  public static func emitOnVideoCall(user: CometChatSDK.User)
  @available(*, deprecated, message: "This function is now deprecated")
  public static func emitOnVideoCall(group: CometChatSDK.Group)
  @available(*, deprecated, message: "This function is now deprecated")
  public static func emitOnViewInformation(user: CometChatSDK.User)
  @available(*, deprecated, message: "This function is now deprecated")
  public static func emitOnViewInformation(group: CometChatSDK.Group)
  @available(*, deprecated, message: "This function is now deprecated")
  public static func emitOnError(message: CometChatSDK.BaseMessage?, error: CometChatSDK.CometChatException)
  @available(*, deprecated, message: "This function is now deprecated")
  public static func emitOnParentMessageUpdate(message: CometChatSDK.BaseMessage)
  @available(*, deprecated, message: "Use `onMessageReactionAdded(reactionEvent: ReactionEvent)` instead")
  public static func emitOnMessageReactionAdded(reactionEvent: CometChatSDK.ReactionEvent)
  @available(*, deprecated, message: "Use `onMessageReactionRemoved(reactionEvent: ReactionEvent)` instead")
  public static func emitOnMessageReactionRemoved(reactionEvent: CometChatSDK.ReactionEvent)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class CometChatAudioBubble : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public var playView: UIKit.UIView {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var playImageView: UIKit.UIImageView {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var audioWaveView: CometChatUIKitSwift.GIFImageView {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var audioTimeLineLabel: UIKit.UILabel {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var timeObserverToken: Any?
  @_Concurrency.MainActor @preconcurrency public var playImage: UIKit.UIImage?
  @_Concurrency.MainActor @preconcurrency public var pauseImage: UIKit.UIImage?
  @_Concurrency.MainActor @preconcurrency public var style: CometChatUIKitSwift.AudioBubbleStyle
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func removeFromSuperview()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func willMove(toWindow newWindow: UIKit.UIWindow?)
  @_Concurrency.MainActor @preconcurrency public func buildUI()
  @_Concurrency.MainActor @preconcurrency public func setUpStyle()
  @_Concurrency.MainActor @preconcurrency public func set(fileURL: Swift.String)
  @_Concurrency.MainActor @preconcurrency public func set(fileSize: Swift.Double)
  @objc @_Concurrency.MainActor @preconcurrency public func playerDidFinishPlaying()
  @objc deinit
  @_Concurrency.MainActor @preconcurrency public func set(controller: UIKit.UIViewController)
}
public class CallUtils {
  public init()
  public func setupCallDetail(call: CometChatSDK.Call) -> Swift.String
  @objc deinit
}
extension CometChatUIKitSwift.CallUtils {
  public func configureCallLogSubtitleView(callData: Any, style: CometChatUIKitSwift.CallLogStyle, incomingCallIcon: UIKit.UIImage? = nil, outgoingCallIcon: UIKit.UIImage? = nil, missedCallIcon: UIKit.UIImage? = nil, callDate: Swift.String?, dateTimeFormatter: CometChatUIKitSwift.CometChatDateTimeFormatter?) -> UIKit.UIView
  public func setupCallLogStatus(call: Any, style: CometChatUIKitSwift.CallLogStyle? = nil, incomingCallIcon: UIKit.UIImage? = nil, outgoingCallIcon: UIKit.UIImage? = nil, missedCallIcon: UIKit.UIImage? = nil) -> (statusWithType: Swift.String, status: Swift.String, icon: UIKit.UIImage?)
  public func convertTimeStampToCallDate(timestamp: Swift.Int, dateTimeFormatter: CometChatUIKitSwift.CometChatDateTimeFormatter?) -> Swift.String
}
extension CometChatUIKitSwift.GroupMembersViewModel : CometChatUIKitSwift.CometChatGroupEventListener {
  @objc dynamic public func ccOwnershipChanged(group: CometChatSDK.Group, newOwner: CometChatSDK.GroupMember)
  @objc dynamic public func ccGroupMemberAdded(messages: [CometChatSDK.ActionMessage], usersAdded: [CometChatSDK.User], groupAddedIn: CometChatSDK.Group, addedBy: CometChatSDK.User)
  @objc dynamic public func ccGroupMemberJoined(joinedUser: CometChatSDK.User, joinedGroup: CometChatSDK.Group)
  @objc dynamic public func ccGroupMemberScopeChanged(action: CometChatSDK.ActionMessage, updatedUser: CometChatSDK.User, scopeChangedTo: Swift.String, scopeChangedFrom: Swift.String, group: CometChatSDK.Group)
}
extension CometChatUIKitSwift.GroupMembersViewModel : CometChatSDK.CometChatGroupDelegate {
  @objc dynamic public func onGroupMemberJoined(action: CometChatSDK.ActionMessage, joinedUser: CometChatSDK.User, joinedGroup: CometChatSDK.Group)
  @objc dynamic public func onGroupMemberLeft(action: CometChatSDK.ActionMessage, leftUser: CometChatSDK.User, leftGroup: CometChatSDK.Group)
  @objc dynamic public func onGroupMemberKicked(action: CometChatSDK.ActionMessage, kickedUser: CometChatSDK.User, kickedBy: CometChatSDK.User, kickedFrom: CometChatSDK.Group)
  @objc dynamic public func onGroupMemberBanned(action: CometChatSDK.ActionMessage, bannedUser: CometChatSDK.User, bannedBy: CometChatSDK.User, bannedFrom: CometChatSDK.Group)
  @objc dynamic public func onGroupMemberScopeChanged(action: CometChatSDK.ActionMessage, scopeChangeduser: CometChatSDK.User, scopeChangedBy: CometChatSDK.User, scopeChangedTo: Swift.String, scopeChangedFrom: Swift.String, group: CometChatSDK.Group)
  @objc dynamic public func onMemberAddedToGroup(action: CometChatSDK.ActionMessage, addedBy: CometChatSDK.User, addedUser: CometChatSDK.User, addedTo: CometChatSDK.Group)
}
@objc @_inheritsConvenienceInitializers open class GroupMembersViewModel : ObjectiveC.NSObject {
  public var row: Swift.Int {
    get
    set
  }
  public var groupMembers: [CometChatSDK.GroupMember] {
    get
    set
  }
  public var filteredGroupMembers: [CometChatSDK.GroupMember] {
    get
    set
  }
  public var group: CometChatSDK.Group!
  public var isSearching: Swift.Bool
  public var selectedGroupMembers: [CometChatSDK.GroupMember]
  public var groupMembersRequestBuilder: CometChatSDK.GroupMembersRequest.GroupMembersRequestBuilder!
  public var isFetchedAll: Swift.Bool
  public var listenerRandomID: Foundation.TimeInterval
  public var reload: (() -> Swift.Void)?
  public var reloadAt: ((Swift.Int) -> Swift.Void)?
  public var failure: ((CometChatSDK.CometChatException) -> Swift.Void)?
  @objc override dynamic public init()
  public func set(group: CometChatSDK.Group)
  public func set(groupMembersRequestBuilder: CometChatSDK.GroupMembersRequest.GroupMembersRequestBuilder)
  public func set(searchGroupMembersRequestBuilder: CometChatSDK.GroupMembersRequest.GroupMembersRequestBuilder)
  public func fetchGroupsMembers()
  public func filterGroupMembers(text: Swift.String)
  @discardableResult
  public func add(groupMember: CometChatSDK.GroupMember) -> Self
  @discardableResult
  public func update(groupMember: CometChatSDK.GroupMember) -> Self
  @discardableResult
  public func insert(groupMember: CometChatSDK.GroupMember, at: Swift.Int) -> Self
  @discardableResult
  public func remove(groupMember: CometChatSDK.GroupMember) -> Self
  @discardableResult
  public func clearList() -> Self
  public func size() -> Swift.Int
  @objc deinit
}
@objc @_Concurrency.MainActor open class CometChatGroups : CometChatUIKitSwift.CometChatListBase {
  @_Concurrency.MainActor public var viewModel: CometChatUIKitSwift.GroupsViewModel
  @_Concurrency.MainActor public var menus: [UIKit.UIBarButtonItem]?
  @_Concurrency.MainActor public var onSelectedItemProceed: ((_ group: [CometChatSDK.Group]) -> Swift.Void)?
  @_Concurrency.MainActor public var onDidSelect: ((_ group: CometChatSDK.Group, _ indexPath: Foundation.IndexPath) -> Swift.Void)?
  @_Concurrency.MainActor public var joinPasswordProtectedGroup: ((_ group: CometChatSDK.Group) -> Swift.Void)?
  @_Concurrency.MainActor public var selectionLimit: Swift.Int? {
    get
  }
  @_Concurrency.MainActor public static var style: CometChatUIKitSwift.GroupsStyle
  @_Concurrency.MainActor public static var avatarStyle: CometChatUIKitSwift.AvatarStyle
  @_Concurrency.MainActor public static var statusIndicatorStyle: CometChatUIKitSwift.StatusIndicatorStyle
  @_Concurrency.MainActor public var style: CometChatUIKitSwift.GroupsStyle {
    get
    set
  }
  @_Concurrency.MainActor public var avatar: CometChatUIKitSwift.AvatarStyle {
    get
    set
  }
  @_Concurrency.MainActor public var statusIndicatorStyle: CometChatUIKitSwift.StatusIndicatorStyle {
    get
    set
  }
  @_Concurrency.MainActor final public let groupsRequestBuilder: CometChatSDK.GroupsRequest.GroupsRequestBuilder
  @_Concurrency.MainActor public var tickButton: [UIKit.UIBarButtonItem]?
  @_Concurrency.MainActor public var joiningGroupAlert: UIKit.UIAlertController?
  @_Concurrency.MainActor public var hideGroupType: Swift.Bool
  @_Concurrency.MainActor public var selectedCellCount: Swift.Int {
    get
    set
  }
  @_Concurrency.MainActor @objc dynamic public init()
  @_Concurrency.MainActor @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @objc deinit
  @_Concurrency.MainActor override open func setupStyle()
  @_Concurrency.MainActor override open func styleSearchBar()
  @_Concurrency.MainActor open func updateNavigationBarTitleWithCount()
  @objc @_Concurrency.MainActor open func tickButtonTapped()
  @objc @_Concurrency.MainActor open func crossButtonTapped()
  @_Concurrency.MainActor open func updateSelectedCellCount(isSelected: Swift.Bool)
  @_Concurrency.MainActor public func fetchData()
  @_Concurrency.MainActor public func setupViewModel()
  @_Concurrency.MainActor public func registerCells()
  @_Concurrency.MainActor override open func onSearch(state: CometChatUIKitSwift.SearchState, text: Swift.String)
  @_Concurrency.MainActor open func defaultSetup()
  @_Concurrency.MainActor open func showJoiningGroupAlert(for group: CometChatSDK.Group)
  @_Concurrency.MainActor open func hideJoiningGroupAlert(completion: @escaping (() -> Swift.Void))
}
extension CometChatUIKitSwift.CometChatGroups {
  @_Concurrency.MainActor @objc override dynamic open func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor @objc override dynamic open func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor @objc override dynamic open func tableView(_ tableView: UIKit.UITableView, heightForRowAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor @objc override dynamic open func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor @objc override dynamic open func tableView(_ tableView: UIKit.UITableView, didDeselectRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor @objc override dynamic open func tableView(_ tableView: UIKit.UITableView, trailingSwipeActionsConfigurationForRowAt indexPath: Foundation.IndexPath) -> UIKit.UISwipeActionsConfiguration?
  @_Concurrency.MainActor @objc dynamic open func tableView(_ tableView: UIKit.UITableView, willDisplay cell: UIKit.UITableViewCell, forRowAt indexPath: Foundation.IndexPath)
}
extension CometChatUIKitSwift.CometChatGroups : CometChatSDK.CometChatConnectionDelegate {
  @_Concurrency.MainActor @objc dynamic public func connected()
  @_Concurrency.MainActor @objc dynamic public func connecting()
  @_Concurrency.MainActor @objc dynamic public func disconnected()
}
final public class OutgoingCallConfiguration {
  public init()
  @discardableResult
  final public func set(callSettingsBuilder: Any) -> Self
  @discardableResult
  final public func set(call: CometChatSDK.Call?) -> Self
  @discardableResult
  final public func setOnDeclineButtonClicked(onDeclineButtonClicked: @escaping (() -> Swift.Void)) -> Self
  @discardableResult
  final public func setOnError(onError: @escaping (() -> Swift.Void)) -> Self
  @discardableResult
  final public func set(declineButtonIcon: UIKit.UIImage?) -> Self
  @discardableResult
  final public func disable(soundForCalls: Swift.Bool?) -> Self
  @discardableResult
  final public func set(customSoundForCalls: Foundation.URL?) -> Self
  @discardableResult
  final public func set(avatarStyle: CometChatUIKitSwift.AvatarStyle?) -> Self
  @discardableResult
  final public func set(buttonStyle: CometChatUIKitSwift.ButtonStyle?) -> Self
  @discardableResult
  final public func set(outgoingCallStyle: CometChatUIKitSwift.OutgoingCallStyle?) -> Self
  @objc deinit
}
@_hasMissingDesignatedInitializers public class PollsData {
  public var id: Swift.String
  public var total: Swift.Int
  public var question: Swift.String
  public var options: [CometChatUIKitSwift.PollOptions]
  @objc deinit
}
@_hasMissingDesignatedInitializers public class PollOptions {
  public var text: Swift.String
  public var count: Swift.Int
  public var index: Swift.String
  public var user: [(uid: Swift.String, avatar: Swift.String, name: Swift.String)]
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class SchedulerMessage : CometChatSDK.InteractiveMessage {
  public var title: Swift.String?
  public var avatarURL: Swift.String?
  public var goalCompletionText: Swift.String
  public var timezoneCode: Swift.String
  public var bufferTime: Swift.Int
  public var duration: Swift.Int
  public var dateRangeStart: Swift.Int
  public var dateRangeEnd: Swift.Int
  public var icsFileUrl: Swift.String
  public var scheduleElement: CometChatUIKitSwift.ButtonElement?
  public var availability: [Swift.String : [CometChatUIKitSwift.TimeRange]]
  @objc override dynamic public init()
  public static func toSchedulerMessage(_ interactiveMessage: CometChatSDK.InteractiveMessage) -> CometChatUIKitSwift.SchedulerMessage
  public static func interactiveMessage(from schedulerMessage: CometChatUIKitSwift.SchedulerMessage) -> CometChatSDK.InteractiveMessage
  @objc deinit
}
@_hasMissingDesignatedInitializers public class TimeRange {
  public var startTime: Swift.String
  public var endTime: Swift.String
  public init(startTime: Swift.String = "", endTime: Swift.String = "")
  public static func from(json: [Swift.String : Any]) -> [Swift.String : [CometChatUIKitSwift.TimeRange]]
  public static func to(json timeRangeByDay: [Swift.String : [CometChatUIKitSwift.TimeRange]]) -> [Swift.String : Any]
  @objc deinit
}
public protocol ThreadedMessageHeaderViewModelProtocol {
  var parentMessage: CometChatSDK.BaseMessage? { get set }
  var incrementCount: (() -> Swift.Void)? { get set }
  var templates: [Swift.String : CometChatUIKitSwift.CometChatMessageTemplate]? { get set }
  func connect()
  func disconnect()
}
@_hasMissingDesignatedInitializers public class ThreadedMessageHeaderViewModel : CometChatUIKitSwift.ThreadedMessageHeaderViewModelProtocol {
  public var user: CometChatSDK.User?
  public var group: CometChatSDK.Group?
  public var parentMessage: CometChatSDK.BaseMessage? {
    get
    set
  }
  public var incrementCount: (() -> Swift.Void)?
  public var templates: [Swift.String : CometChatUIKitSwift.CometChatMessageTemplate]?
  open func connect()
  open func disconnect()
  @objc deinit
}
extension CometChatUIKitSwift.ThreadedMessageHeaderViewModel : CometChatUIKitSwift.CometChatMessageEventListener {
  public func onFormMessageReceived(message: CometChatUIKitSwift.FormMessage)
  public func onSchedulerMessageReceived(message: CometChatUIKitSwift.SchedulerMessage)
  public func onCardMessageReceived(message: CometChatUIKitSwift.CardMessage)
  public func onCustomInteractiveMessageReceived(message: CometChatUIKitSwift.CustomInteractiveMessage)
  public func ccMessageSent(message: CometChatSDK.BaseMessage, status: CometChatUIKitSwift.MessageStatus)
  public func onTextMessageReceived(textMessage: CometChatSDK.TextMessage)
  public func onMediaMessageReceived(mediaMessage: CometChatSDK.MediaMessage)
  public func onCustomMessageReceived(customMessage: CometChatSDK.CustomMessage)
  public func onMessageEdited(message: CometChatSDK.BaseMessage)
  public func onMessageDeleted(message: CometChatSDK.BaseMessage)
  public func ccMessageDeleted(message: CometChatSDK.BaseMessage)
  public func ccMessageEdited(message: CometChatSDK.BaseMessage, status: CometChatUIKitSwift.MessageStatus)
}
public struct MentionTextStyle {
  public var textColor: UIKit.UIColor
  public var textFont: UIKit.UIFont
  public var textBackgroundColor: UIKit.UIColor
  public var loggedInUserTextColor: UIKit.UIColor
  public var loggedInUserTextFont: UIKit.UIFont
  public var loggedInUserTextBackgroundColor: UIKit.UIColor
  public init()
  public func getTextAttributes() -> [Foundation.NSAttributedString.Key : Any]
  public func getLoggedInUserTextAttributes() -> [Foundation.NSAttributedString.Key : Any]
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class CometChatCallLogShimmer : CometChatUIKitSwift.CometChatShimmerView {
  @_Concurrency.MainActor @preconcurrency public var cellCount: Swift.Int
  @_Concurrency.MainActor @preconcurrency override open func buildUI()
  @_Concurrency.MainActor @preconcurrency override open func startShimmer()
  @_Concurrency.MainActor @preconcurrency override open func stopShimmer()
  @_Concurrency.MainActor @preconcurrency @objc override open func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc override open func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init()
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public struct MessageHeaderStyle {
  public var titleTextColor: UIKit.UIColor
  public var titleTextFont: UIKit.UIFont
  public var subtitleTextColor: UIKit.UIColor
  public var subtitleTextFont: UIKit.UIFont
  public var backButtonImageTintColor: UIKit.UIColor
  public var privateGroupBadgeImageTintColor: UIKit.UIColor
  public var passwordProtectedGroupBadgeImageTintColor: UIKit.UIColor
  public var passwordGroupImageBackgroundColor: UIKit.UIColor
  public var privateGroupImageBackgroundColor: UIKit.UIColor
  public var groupImageBackgroundColor: UIKit.UIColor
  public var avatarStyle: CometChatUIKitSwift.AvatarStyle
  public var backgroundColor: UIKit.UIColor
  public var cornerRadius: CometChatUIKitSwift.CometChatCornerStyle?
  public var borderWidth: CoreFoundation.CGFloat
  public var borderColor: UIKit.UIColor
  public var backButtonIcon: UIKit.UIImage?
  public var privateGroupIcon: UIKit.UIImage?
  public var protectedGroupIcon: UIKit.UIImage?
  public var backgroundImage: UIKit.UIImage?
  public init()
}
public struct ReceiptStyle {
  public var waitImage: UIKit.UIImage
  public var sentImage: UIKit.UIImage
  public var deliveredImage: UIKit.UIImage
  public var readImage: UIKit.UIImage
  public var errorImage: UIKit.UIImage
  public var waitImageTintColor: UIKit.UIColor
  public var sentImageTintColor: UIKit.UIColor
  public var deliveredImageTintColor: UIKit.UIColor
  public var readImageTintColor: UIKit.UIColor
  public var errorImageTintColor: UIKit.UIColor
  public init()
}
public enum ActivityIndicatorStyle {
  case medium
  case gray
  case large
  public static func == (a: CometChatUIKitSwift.ActivityIndicatorStyle, b: CometChatUIKitSwift.ActivityIndicatorStyle) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct PollBubbleStyle : CometChatUIKitSwift.BaseMessageBubbleStyle {
  public var threadedIndicatorTextFont: UIKit.UIFont?
  public var threadedIndicatorTextColor: UIKit.UIColor?
  public var threadedIndicatorImageTint: UIKit.UIColor?
  public var backgroundColor: UIKit.UIColor?
  public var backgroundDrawable: UIKit.UIImage?
  public var borderWidth: CoreFoundation.CGFloat?
  public var borderColor: UIKit.UIColor?
  public var cornerRadius: CometChatUIKitSwift.CometChatCornerStyle?
  public var avatarStyle: CometChatUIKitSwift.AvatarStyle?
  public var dateStyle: CometChatUIKitSwift.DateStyle?
  public var receiptStyle: CometChatUIKitSwift.ReceiptStyle?
  public var headerTextColor: UIKit.UIColor?
  public var headerTextFont: UIKit.UIFont?
  public var pollTextFont: UIKit.UIFont
  public var pollTextColor: UIKit.UIColor
  public var nonSelectedPollImageTint: UIKit.UIColor
  public var selectedPollImageTint: UIKit.UIColor
  public var optionTextFont: UIKit.UIFont
  public var optionTextColor: UIKit.UIColor
  public var optionProgressBackgroundColor: UIKit.UIColor
  public var optionProgressTintColor: UIKit.UIColor
  public var optionProgressCornerRadius: CometChatUIKitSwift.CometChatCornerStyle
  public var optionCountTextColor: UIKit.UIColor
  public var optionCountTextFont: UIKit.UIFont
  public var reactionsStyle: CometChatUIKitSwift.ReactionsStyle?
  public init()
}
public protocol CometChatMessageEventListener {
  func ccMessageSent(message: CometChatSDK.BaseMessage, status: CometChatUIKitSwift.MessageStatus)
  func ccMessageEdited(message: CometChatSDK.BaseMessage, status: CometChatUIKitSwift.MessageStatus)
  func ccMessageDeleted(message: CometChatSDK.BaseMessage)
  func ccMessageRead(message: CometChatSDK.BaseMessage)
  func ccLiveReaction(reaction: CometChatSDK.TransientMessage)
  func onTextMessageReceived(textMessage: CometChatSDK.TextMessage)
  func onMediaMessageReceived(mediaMessage: CometChatSDK.MediaMessage)
  func onCustomMessageReceived(customMessage: CometChatSDK.CustomMessage)
  func onTypingStarted(_ typingIndicator: CometChatSDK.TypingIndicator)
  func onTypingEnded(_ typingIndicator: CometChatSDK.TypingIndicator)
  func onMessagesDelivered(receipt: CometChatSDK.MessageReceipt)
  func onMessagesRead(receipt: CometChatSDK.MessageReceipt)
  func onMessageEdited(message: CometChatSDK.BaseMessage)
  func onMessageDeleted(message: CometChatSDK.BaseMessage)
  func onTransientMessageReceived(_ message: CometChatSDK.TransientMessage)
  func onFormMessageReceived(message: CometChatUIKitSwift.FormMessage)
  func onCardMessageReceived(message: CometChatUIKitSwift.CardMessage)
  func onSchedulerMessageReceived(message: CometChatUIKitSwift.SchedulerMessage)
  func onCustomInteractiveMessageReceived(message: CometChatUIKitSwift.CustomInteractiveMessage)
  func onMessageReactionAdded(reactionEvent: CometChatSDK.ReactionEvent)
  func onMessageReactionRemoved(reactionEvent: CometChatSDK.ReactionEvent)
  func onMessagesReadByAll(receipt: CometChatSDK.MessageReceipt)
  func onMessagesDeliveredToAll(receipt: CometChatSDK.MessageReceipt)
  @available(*, deprecated, message: "This method is now deprecated")
  func onMessageReply(message: CometChatSDK.BaseMessage, status: CometChatUIKitSwift.MessageStatus)
  @available(*, deprecated, message: "This method is now deprecated")
  func onParentMessageUpdate(message: CometChatSDK.BaseMessage)
  @available(*, deprecated, message: "This method is now deprecated")
  func onMessageError(error: CometChatSDK.CometChatException)
  @available(*, deprecated, message: "This method is now deprecated")
  func onVoiceCall(user: CometChatSDK.User)
  @available(*, deprecated, message: "This method is now deprecated")
  func onVoiceCall(group: CometChatSDK.Group)
  @available(*, deprecated, message: "This method is now deprecated")
  func onVideoCall(user: CometChatSDK.User)
  @available(*, deprecated, message: "This method is now deprecated")
  func onVideoCall(group: CometChatSDK.Group)
  @available(*, deprecated, message: "This method is now deprecated")
  func onViewInformation(user: CometChatSDK.User)
  @available(*, deprecated, message: "This method is now deprecated")
  func onViewInformation(group: CometChatSDK.Group)
  @available(*, deprecated, message: "This method is now deprecated")
  func onError(message: CometChatSDK.BaseMessage?, error: CometChatSDK.CometChatException)
  @available(*, deprecated, message: "Use `onTransientMessageReceived(_ message: TransientMessage)` instead")
  func onTransisentMessageReceived(_ message: CometChatSDK.TransientMessage)
  @available(*, deprecated, message: "Use `ccMessageSent(message: BaseMessage, status: MessageStatus)` instead")
  func onMessageSent(message: CometChatSDK.BaseMessage, status: CometChatUIKitSwift.MessageStatus)
  @available(*, deprecated, message: "Use `ccMessageEdit(message: BaseMessage, status: MessageStatus)` instead")
  func onMessageEdit(message: CometChatSDK.BaseMessage, status: CometChatUIKitSwift.MessageStatus)
  @available(*, deprecated, message: "Use `ccMessageDelete(message: BaseMessage)` instead")
  func onMessageDelete(message: CometChatSDK.BaseMessage)
  @available(*, deprecated, message: "Use `ccMessageRead(message: BaseMessage)` instead")
  func onMessageRead(message: CometChatSDK.BaseMessage)
  @available(*, deprecated, message: "Use `ccLiveReaction(reaction: TransientMessage)` instead")
  func onLiveReaction(reaction: CometChatSDK.TransientMessage)
  @available(*, deprecated)
  func onMessageReact(message: CometChatSDK.BaseMessage, reaction: CometChatUIKitSwift.CometChatMessageReaction)
}
extension CometChatUIKitSwift.CometChatMessageEventListener {
  public func onTextMessageReceived(textMessage: CometChatSDK.TextMessage)
  public func onMediaMessageReceived(mediaMessage: CometChatSDK.MediaMessage)
  public func onCustomMessageReceived(customMessage: CometChatSDK.CustomMessage)
  public func onTypingStarted(_ typingIndicator: CometChatSDK.TypingIndicator)
  public func onTypingEnded(_ typingIndicator: CometChatSDK.TypingIndicator)
  public func onMessagesDelivered(receipt: CometChatSDK.MessageReceipt)
  public func onMessagesRead(receipt: CometChatSDK.MessageReceipt)
  public func onMessageEdited(message: CometChatSDK.BaseMessage)
  public func onMessageDeleted(message: CometChatSDK.BaseMessage)
  public func onFormMessageReceived(message: CometChatUIKitSwift.FormMessage)
  public func onCardMessageReceived(message: CometChatUIKitSwift.CardMessage)
  public func onSchedulerMessageReceived(message: CometChatUIKitSwift.SchedulerMessage)
  public func onCustomInteractiveMessageReceived(message: CometChatUIKitSwift.CustomInteractiveMessage)
  public func onMessageReactionAdded(reactionEvent: CometChatSDK.ReactionEvent)
  public func onMessageReactionRemoved(reactionEvent: CometChatSDK.ReactionEvent)
  public func ccMessageSent(message: CometChatSDK.BaseMessage, status: CometChatUIKitSwift.MessageStatus)
  public func ccMessageEdited(message: CometChatSDK.BaseMessage, status: CometChatUIKitSwift.MessageStatus)
  public func ccMessageDeleted(message: CometChatSDK.BaseMessage)
  public func ccMessageRead(message: CometChatSDK.BaseMessage)
  public func ccLiveReaction(reaction: CometChatSDK.TransientMessage)
  public func onTransientMessageReceived(_ message: CometChatSDK.TransientMessage)
  public func onMessagesReadByAll(receipt: CometChatSDK.MessageReceipt)
  public func onMessagesDeliveredToAll(receipt: CometChatSDK.MessageReceipt)
}
extension CometChatUIKitSwift.CometChatMessageEventListener {
  @available(*, deprecated, message: "This method is now deprecated")
  public func onMessageReply(message: CometChatSDK.BaseMessage, status: CometChatUIKitSwift.MessageStatus)
  @available(*, deprecated, message: "This method is now deprecated")
  public func onParentMessageUpdate(message: CometChatSDK.BaseMessage)
  @available(*, deprecated, message: "This method is now deprecated")
  public func onMessageError(error: CometChatSDK.CometChatException)
  @available(*, deprecated, message: "This method is now deprecated")
  public func onVoiceCall(user: CometChatSDK.User)
  @available(*, deprecated, message: "This method is now deprecated")
  public func onVoiceCall(group: CometChatSDK.Group)
  @available(*, deprecated, message: "This method is now deprecated")
  public func onVideoCall(user: CometChatSDK.User)
  @available(*, deprecated, message: "This method is now deprecated")
  public func onVideoCall(group: CometChatSDK.Group)
  @available(*, deprecated, message: "This method is now deprecated")
  public func onViewInformation(user: CometChatSDK.User)
  @available(*, deprecated, message: "This method is now deprecated")
  public func onViewInformation(group: CometChatSDK.Group)
  @available(*, deprecated, message: "This method is now deprecated")
  public func onError(message: CometChatSDK.BaseMessage?, error: CometChatSDK.CometChatException)
  @available(*, deprecated, message: "Use `onTransientMessageReceived(_ message: TransientMessage)` instead")
  public func onTransisentMessageReceived(_ message: CometChatSDK.TransientMessage)
  @available(*, deprecated, message: "Use `ccMessageSent(message: BaseMessage, status: MessageStatus)` instead")
  public func onMessageSent(message: CometChatSDK.BaseMessage, status: CometChatUIKitSwift.MessageStatus)
  @available(*, deprecated, message: "Use `ccMessageEdit(message: BaseMessage, status: MessageStatus)` instead")
  public func onMessageEdit(message: CometChatSDK.BaseMessage, status: CometChatUIKitSwift.MessageStatus)
  @available(*, deprecated, message: "Use `ccMessageDelete(message: BaseMessage)` instead")
  public func onMessageDelete(message: CometChatSDK.BaseMessage)
  @available(*, deprecated, message: "Use `ccMessageRead(message: BaseMessage)` instead")
  public func onMessageRead(message: CometChatSDK.BaseMessage)
  @available(*, deprecated, message: "Use `ccLiveReaction(reaction: TransientMessage)` instead")
  public func onLiveReaction(reaction: CometChatSDK.TransientMessage)
  @available(*, deprecated)
  public func onMessageReact(message: CometChatSDK.BaseMessage, reaction: CometChatUIKitSwift.CometChatMessageReaction)
}
@objc public protocol CometChatUserEventListener {
  @objc optional func ccUserBlocked(user: CometChatSDK.User)
  @objc optional func ccUserUnblocked(user: CometChatSDK.User)
  @available(*, deprecated, message: "Use `ccUserBlocked(user: User)` instead")
  @objc optional func onUserBlock(user: CometChatSDK.User)
  @available(*, deprecated, message: "Use `ccUserUnblocked(user: User)` instead")
  @objc optional func onUserUnblock(user: CometChatSDK.User)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor open class CometChatListItem : UIKit.UITableViewCell {
  @_Concurrency.MainActor public var statusIndicator: CometChatUIKitSwift.CometChatStatusIndicator {
    get
    set
  }
  @_Concurrency.MainActor public var check: UIKit.UIImageView {
    get
    set
  }
  @_Concurrency.MainActor public var containerView: UIKit.UIStackView {
    get
    set
  }
  @_Concurrency.MainActor public var titleLabel: UIKit.UILabel {
    get
    set
  }
  @_Concurrency.MainActor public var tailView: UIKit.UIStackView {
    get
    set
  }
  @_Concurrency.MainActor public var subTitleView: UIKit.UIStackView {
    get
    set
  }
  @_Concurrency.MainActor public var titleView: UIKit.UIStackView {
    get
    set
  }
  @_Concurrency.MainActor public var avatar: CometChatUIKitSwift.CometChatAvatar {
    get
    set
  }
  @_Concurrency.MainActor public var style: any CometChatUIKitSwift.ListItemStyle {
    get
    set
  }
  @_Concurrency.MainActor public var onItemLongClick: (() -> Swift.Void)?
  @_Concurrency.MainActor public static let identifier: Swift.String
  @_Concurrency.MainActor public var avatarHeightConstraint: UIKit.NSLayoutConstraint!
  @_Concurrency.MainActor public var avatarWidthConstraint: UIKit.NSLayoutConstraint!
  @_Concurrency.MainActor public var layoutMargin: UIKit.NSDirectionalEdgeInsets {
    get
    set
  }
  @_Concurrency.MainActor @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor @objc override dynamic open func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor open func setupStyle()
  @_Concurrency.MainActor @objc override dynamic open func prepareForReuse()
  @objc deinit
}
extension CometChatUIKitSwift.CometChatListItem {
  @discardableResult
  @_Concurrency.MainActor public func set(avatarURL: Swift.String, with title: Swift.String? = nil) -> Self
  @discardableResult
  @_Concurrency.MainActor public func hide(statusIndicator: Swift.Bool) -> Self
  @discardableResult
  @_Concurrency.MainActor public func set(statusIndicatorIcon: UIKit.UIImage?) -> Self
  @discardableResult
  @_Concurrency.MainActor public func set(statusIndicatorIconTint: UIKit.UIColor) -> Self
  @discardableResult
  @_Concurrency.MainActor public func set(leadingView: UIKit.UIView) -> Self
  @discardableResult
  @_Concurrency.MainActor public func set(title: Swift.String) -> Self
  @discardableResult
  @_Concurrency.MainActor public func set(titleView: UIKit.UIView) -> Self
  @discardableResult
  @_Concurrency.MainActor public func set(titleColor: UIKit.UIColor) -> Self
  @discardableResult
  @_Concurrency.MainActor public func set(titleFont: UIKit.UIFont) -> Self
  @discardableResult
  @_Concurrency.MainActor public func set(subtitle: UIKit.UIView) -> Self
  @discardableResult
  @_Concurrency.MainActor public func set(tail: UIKit.UIView) -> Self
  @discardableResult
  @_Concurrency.MainActor public func set(customView: UIKit.UIView) -> Self
  @discardableResult
  @_Concurrency.MainActor public func hide(avatar: Swift.Bool) -> Self
  @discardableResult
  @_Concurrency.MainActor public func hide(titleLabel: Swift.Bool) -> Self
  @discardableResult
  @_Concurrency.MainActor public func allow(selection: Swift.Bool) -> Self
}
@objc @_hasMissingDesignatedInitializers open class GroupsViewModel : ObjectiveC.NSObject {
  public func set(searchRequestBuilder: CometChatSDK.GroupsRequest.GroupsRequestBuilder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency open class CometChatAIConversationSummary : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency final public let titleLabel: UIKit.UILabel
  @_Concurrency.MainActor @preconcurrency final public let descriptionLabel: UIKit.UILabel
  @_Concurrency.MainActor @preconcurrency final public let closeButton: UIKit.UIButton
  @_Concurrency.MainActor @preconcurrency final public let errorView: UIKit.UIView
  @_Concurrency.MainActor @preconcurrency final public let errorLabel: UIKit.UILabel
  @_Concurrency.MainActor @preconcurrency public var id: [Swift.String : Any]?
  @_Concurrency.MainActor @preconcurrency public static var style: CometChatUIKitSwift.AIConversationSummaryStyle
  @_Concurrency.MainActor @preconcurrency public var style: CometChatUIKitSwift.AIConversationSummaryStyle {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var loadingView: UIKit.UIView!
  @_Concurrency.MainActor @preconcurrency public var disableLoadingState: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public var isLoadingViewVisible: Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func willMove(toWindow newWindow: UIKit.UIWindow?)
  @_Concurrency.MainActor @preconcurrency open func buildUI()
  @_Concurrency.MainActor @preconcurrency open func setupStyle()
  @_Concurrency.MainActor @preconcurrency public func showLoadingView()
  @_Concurrency.MainActor @preconcurrency public func hideLoadingView()
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(summary: Swift.String) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(id: [Swift.String : Any]?) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(title: Swift.String) -> Self
  @discardableResult
  @objc @_Concurrency.MainActor @preconcurrency public func show(error: Swift.Bool) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(configuration: CometChatUIKitSwift.AIConversationSummaryConfiguration?) -> Self
  @objc deinit
}
public enum CometChatPollsSection {
  case question
  case answers
  public static func == (a: CometChatUIKitSwift.CometChatPollsSection, b: CometChatUIKitSwift.CometChatPollsSection) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class CometChatCreatePoll : UIKit.UIViewController, UIKit.UIGestureRecognizerDelegate, UIKit.UITableViewDragDelegate {
  @_Concurrency.MainActor @preconcurrency public var items: [Swift.String]
  @_Concurrency.MainActor @preconcurrency public var user: CometChatSDK.User?
  @_Concurrency.MainActor @preconcurrency public var group: CometChatSDK.Group?
  @_Concurrency.MainActor @preconcurrency public var onDismiss: (() -> ())?
  @_Concurrency.MainActor @preconcurrency public var questionString: Swift.String
  @_Concurrency.MainActor @preconcurrency public var firstOptionString: Swift.String
  @_Concurrency.MainActor @preconcurrency public var secondOptionString: Swift.String
  @_Concurrency.MainActor @preconcurrency public var initialOptionsFilled: (Swift.Bool, Swift.Bool)
  @_Concurrency.MainActor @preconcurrency public static var style: CometChatUIKitSwift.CreatePollStyle
  @_Concurrency.MainActor @preconcurrency public var style: CometChatUIKitSwift.CreatePollStyle {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var cometChatPollSection: [CometChatUIKitSwift.CometChatPollsSection]
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewDidLoad()
  @objc deinit
  @_Concurrency.MainActor @preconcurrency open func registerCells()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency open func buildUI()
  @_Concurrency.MainActor @preconcurrency open func setupStyle()
  @_Concurrency.MainActor @preconcurrency open func setupNavigation()
  @objc @_Concurrency.MainActor @preconcurrency open func dismissView()
  @objc @_Concurrency.MainActor @preconcurrency open func handleTap(_ sender: UIKit.UITapGestureRecognizer? = nil)
  @objc @_Concurrency.MainActor @preconcurrency open func didSendPressed()
  @_Concurrency.MainActor @preconcurrency open func validateSendButtonState()
  @_Concurrency.MainActor @preconcurrency open func enableSendButton()
  @_Concurrency.MainActor @preconcurrency open func disableSendButton()
  @objc @_Concurrency.MainActor @preconcurrency open func textFieldDidChange(_ textField: UIKit.UITextField)
  @_Concurrency.MainActor @preconcurrency open func didStartEditingOption(at index: Swift.Int, with string: Swift.String)
  @_Concurrency.MainActor @preconcurrency open func showExitConfirmation()
  @_Concurrency.MainActor @preconcurrency open func showErrorView(errorText: Swift.String)
  @discardableResult
  @objc @_Concurrency.MainActor @preconcurrency public func set(user: CometChatSDK.User) -> CometChatUIKitSwift.CometChatCreatePoll
  @discardableResult
  @objc @_Concurrency.MainActor @preconcurrency public func set(group: CometChatSDK.Group) -> CometChatUIKitSwift.CometChatCreatePoll
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(onDismiss: @escaping (() -> ())) -> Self
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
}
extension CometChatUIKitSwift.CometChatCreatePoll : UIKit.UITableViewDelegate, UIKit.UITableViewDataSource {
  @_Concurrency.MainActor @preconcurrency @objc dynamic open func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc dynamic open func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc dynamic open func tableView(_ tableView: UIKit.UITableView, viewForHeaderInSection section: Swift.Int) -> UIKit.UIView?
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func tableView(_ tableView: UIKit.UITableView, heightForHeaderInSection section: Swift.Int) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency @objc dynamic open func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func tableView(_ tableView: UIKit.UITableView, moveRowAt sourceIndexPath: Foundation.IndexPath, to destinationIndexPath: Foundation.IndexPath)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func tableView(_ tableView: UIKit.UITableView, canMoveRowAt indexPath: Foundation.IndexPath) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func tableView(_ tableView: UIKit.UITableView, targetIndexPathForMoveFromRowAt sourceIndexPath: Foundation.IndexPath, toProposedIndexPath proposedDestinationIndexPath: Foundation.IndexPath) -> Foundation.IndexPath
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func tableView(_ tableView: UIKit.UITableView, itemsForBeginning session: any UIKit.UIDragSession, at indexPath: Foundation.IndexPath) -> [UIKit.UIDragItem]
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func tableView(_ tableView: UIKit.UITableView, willBeginEditingRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func tableView(_ tableView: UIKit.UITableView, editingStyleForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell.EditingStyle
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func tableView(_ tableView: UIKit.UITableView, shouldIndentWhileEditingRowAt indexPath: Foundation.IndexPath) -> Swift.Bool
}
public struct MessageTranslationBubbleStyle : CometChatUIKitSwift.BaseMessageBubbleStyle {
  public var threadedIndicatorTextFont: UIKit.UIFont?
  public var threadedIndicatorTextColor: UIKit.UIColor?
  public var threadedIndicatorImageTint: UIKit.UIColor?
  public var avatarStyle: CometChatUIKitSwift.AvatarStyle?
  public var dateStyle: CometChatUIKitSwift.DateStyle?
  public var receiptStyle: CometChatUIKitSwift.ReceiptStyle?
  public var backgroundColor: UIKit.UIColor?
  public var backgroundDrawable: UIKit.UIImage?
  public var cornerRadius: CometChatUIKitSwift.CometChatCornerStyle?
  public var borderWidth: CoreFoundation.CGFloat?
  public var borderColor: UIKit.UIColor?
  public var headerTextColor: UIKit.UIColor?
  public var headerTextFont: UIKit.UIFont?
  public var textFont: UIKit.UIFont
  public var textColor: UIKit.UIColor
  public var urlColor: UIKit.UIColor
  public var emailTextColor: UIKit.UIColor
  public var phoneTextColor: UIKit.UIColor
  public var separatorBackgroundColor: UIKit.UIColor
  public var subtitleTextColor: UIKit.UIColor
  public var subtitleTextFont: UIKit.UIFont
  public var reactionsStyle: CometChatUIKitSwift.ReactionsStyle?
}
@_inheritsConvenienceInitializers @objc public class LabelElement : CometChatUIKitSwift.ElementEntity {
  @objc public var text: Swift.String
  @objc override dynamic public init()
  @objc public static func labelElementFromJSON(_ data: [Swift.String : Any]) -> CometChatUIKitSwift.LabelElement?
  public func toJSON() -> [Swift.String : Any]
  @objc deinit
}
extension CometChatUIKitSwift.CometChatOutgoingCall {
  @discardableResult
  @_Concurrency.MainActor public func set(call: CometChatSDK.Call) -> Self
  @discardableResult
  @_Concurrency.MainActor public func set(callSettingsBuilder: Any) -> Self
  @discardableResult
  @_Concurrency.MainActor public func set(onCancelClick: @escaping (_ call: CometChatSDK.Call?, _ controller: UIKit.UIViewController?) -> Swift.Void) -> Self
  @discardableResult
  @_Concurrency.MainActor public func set(onError: @escaping ((_ error: CometChatSDK.CometChatException) -> Swift.Void)) -> Self
  @discardableResult
  @_Concurrency.MainActor public func set(user: CometChatSDK.User) -> Self
  @discardableResult
  @_Concurrency.MainActor public func disable(soundForCalls: Swift.Bool) -> Self
  @discardableResult
  @_Concurrency.MainActor public func set(customSoundForCalls: Foundation.URL?) -> Self
  @discardableResult
  @_Concurrency.MainActor public func set(subtitleView: ((_ call: CometChatSDK.Call) -> UIKit.UIView)?) -> Self
  @discardableResult
  @_Concurrency.MainActor public func set(titleView: ((_ call: CometChatSDK.Call) -> UIKit.UIView)?) -> Self
  @discardableResult
  @_Concurrency.MainActor public func set(avatarView: ((_ call: CometChatSDK.Call) -> UIKit.UIView)?) -> Self
  @discardableResult
  @_Concurrency.MainActor public func set(cancelView: ((_ call: CometChatSDK.Call) -> UIKit.UIView)?) -> Self
}
public struct DateStyle {
  public var textColor: UIKit.UIColor
  public var textFont: UIKit.UIFont
  public var backgroundColor: UIKit.UIColor
  public var cornerRadius: CometChatUIKitSwift.CometChatCornerStyle?
  public var borderWidth: CoreFoundation.CGFloat
  public var borderColor: UIKit.UIColor
  public init()
}
@_inheritsConvenienceInitializers public class CometChatPollsViewModel : CometChatUIKitSwift.DataSourceDecorator {
  override public init(dataSource: any CometChatUIKitSwift.DataSource)
  override public func getId() -> Swift.String
  override public func getAllMessageTypes() -> [Swift.String]?
  override public func getAllMessageCategories() -> [Swift.String]?
  override public func getLastConversationMessage(conversation: CometChatSDK.Conversation, additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration?) -> Foundation.NSAttributedString?
  override public func getAllMessageTemplates(additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration?) -> [CometChatUIKitSwift.CometChatMessageTemplate]
  override public func getAttachmentOptions(controller: UIKit.UIViewController, user: CometChatSDK.User?, group: CometChatSDK.Group?, id: [Swift.String : Any]?, additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration = AdditionalConfiguration()) -> [CometChatUIKitSwift.CometChatMessageComposerAction]?
  override public func getMessageTemplate(messageType: Swift.String, messageCategory: Swift.String, additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration?) -> CometChatUIKitSwift.CometChatMessageTemplate?
  public func getTemplate(additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration?) -> CometChatUIKitSwift.CometChatMessageTemplate
  public func getContentView(_customMessage: CometChatSDK.CustomMessage, controller: UIKit.UIViewController?, additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration?) -> UIKit.UIView?
  public func getAttachmentOption(controller: UIKit.UIViewController?, user: CometChatSDK.User?, group: CometChatSDK.Group?) -> CometChatUIKitSwift.CometChatMessageComposerAction?
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class CometChatCallButtons : UIKit.UIStackView {
  @_Concurrency.MainActor @preconcurrency public var user: CometChatSDK.User?
  @_Concurrency.MainActor @preconcurrency public var group: CometChatSDK.Group?
  @_Concurrency.MainActor @preconcurrency public var voiceCallIconText: Swift.String?
  @_Concurrency.MainActor @preconcurrency public var videoCallIconText: Swift.String?
  @_Concurrency.MainActor @preconcurrency public var conferenceCallIconText: Swift.String?
  @_Concurrency.MainActor @preconcurrency weak public var controller: UIKit.UIViewController?
  @_Concurrency.MainActor @preconcurrency public var hideVoiceCallButton: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public var hideVideoCallButton: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public var callButtonsStyle: CometChatUIKitSwift.ButtonStyle?
  @_Concurrency.MainActor @preconcurrency public var voiceCallButton: CometChatUIKitSwift.CometChatButton?
  @_Concurrency.MainActor @preconcurrency public var videoCallButton: CometChatUIKitSwift.CometChatButton?
  @_Concurrency.MainActor @preconcurrency public var conferenceCallButton: CometChatUIKitSwift.CometChatButton?
  @_Concurrency.MainActor @preconcurrency public var outgoingCallConfiguration: CometChatUIKitSwift.OutgoingCallConfiguration?
  @_Concurrency.MainActor @preconcurrency public var onVoiceCallClick: ((_ user: CometChatSDK.User?, _ group: CometChatSDK.Group?) -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency public var onVideoCallClick: ((_ user: CometChatSDK.User?, _ group: CometChatSDK.Group?) -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency public var callSettingsBuilderCallBack: ((_ user: CometChatSDK.User?, _ group: CometChatSDK.Group?, _ isAudioOnly: Swift.Bool) -> Any)?
  @_Concurrency.MainActor @preconcurrency public static var style: CometChatUIKitSwift.CallButtonStyle
  @_Concurrency.MainActor @preconcurrency public var style: CometChatUIKitSwift.CallButtonStyle
  @_Concurrency.MainActor @preconcurrency public init(width: CoreFoundation.CGFloat, height: CoreFoundation.CGFloat)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func willMove(toSuperview newSuperview: UIKit.UIView?)
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func connect() -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func disconnect() -> Self
  @objc deinit
  @_Concurrency.MainActor @preconcurrency open func setupStyle()
  @_Concurrency.MainActor @preconcurrency open func buildButton(forUser: CometChatSDK.User)
  @_Concurrency.MainActor @preconcurrency open func buildButton(forGroup: CometChatSDK.Group)
  @_Concurrency.MainActor @preconcurrency open func startGroupCall(sessionID: Swift.String, group: CometChatSDK.Group, isVideoCall: Swift.Bool)
}
extension CometChatUIKitSwift.CometChatCallButtons : CometChatUIKitSwift.CometChatMessageEventListener {
  @_Concurrency.MainActor @preconcurrency public func ccMessageSent(message: CometChatSDK.BaseMessage, status: CometChatUIKitSwift.MessageStatus)
}
extension CometChatUIKitSwift.CometChatCallButtons : CometChatSDK.CometChatCallDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func onIncomingCallReceived(incomingCall: CometChatSDK.Call?, error: CometChatSDK.CometChatException?)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func onOutgoingCallAccepted(acceptedCall: CometChatSDK.Call?, error: CometChatSDK.CometChatException?)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func onOutgoingCallRejected(rejectedCall: CometChatSDK.Call?, error: CometChatSDK.CometChatException?)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func onIncomingCallCancelled(canceledCall: CometChatSDK.Call?, error: CometChatSDK.CometChatException?)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func onCallEndedMessageReceived(endedCall: CometChatSDK.Call?, error: CometChatSDK.CometChatException?)
}
extension CometChatUIKitSwift.CometChatCallButtons : CometChatUIKitSwift.CometChatCallEventListener {
  @_Concurrency.MainActor @preconcurrency public func ccCallEnded(call: CometChatSDK.Call)
  @_Concurrency.MainActor @preconcurrency public func ccCallRejected(call: CometChatSDK.Call)
  @_Concurrency.MainActor @preconcurrency public func ccOutgoingCall(call: CometChatSDK.Call)
}
public protocol NibLoadable {
  func loadFromNib()
}
extension CometChatUIKitSwift.NibLoadable where Self : UIKit.UIView {
  public func loadFromNib()
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class UIViewNibLoadable : UIKit.UIView, CometChatUIKitSwift.NibLoadable {
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc convenience dynamic public init()
  @objc deinit
}
@objc @_Concurrency.MainActor @preconcurrency final public class CustomVisualEffectView : UIKit.UIVisualEffectView {
  @_Concurrency.MainActor @preconcurrency public init(effect: UIKit.UIVisualEffect, intensity: CoreFoundation.CGFloat)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
  @_Concurrency.MainActor @preconcurrency @objc override final public func draw(_ rect: CoreFoundation.CGRect)
}
extension UIKit.UIViewController {
  @_Concurrency.MainActor @preconcurrency public func blurView(view: UIKit.UIView) -> UIKit.UIView
}
public struct ReactionsStyle {
  public var borderWidth: CoreFoundation.CGFloat
  public var borderColor: UIKit.UIColor
  public var cornerRadius: CometChatUIKitSwift.CometChatCornerStyle?
  public var backgroundColor: UIKit.UIColor
  public var emojiTextFont: UIKit.UIFont
  public var emojiTextColor: UIKit.UIColor
  public var countTextFont: UIKit.UIFont
  public var countTextColor: UIKit.UIColor
  public var activeReactionBackgroundColor: UIKit.UIColor
  public var activeReactionBorderWidth: CoreFoundation.CGFloat
  public var activeReactionBorderColor: UIKit.UIColor
  public var reactionSpacing: Swift.Double
  public init()
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class CometChatMessageShimmerView : CometChatUIKitSwift.CometChatShimmerView {
  @_Concurrency.MainActor @preconcurrency public var dataSource: [(alignment: CometChatUIKitSwift.MessageBubbleAlignment, size: CoreFoundation.CGSize)]
  @_Concurrency.MainActor @preconcurrency public var isGroupMode: Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init()
  @_Concurrency.MainActor @preconcurrency override open func startShimmer()
  @_Concurrency.MainActor @preconcurrency override open func stopShimmer()
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override open func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc override open func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc override open func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @objc deinit
}
public class StickerKeyboardConfiguration {
  public init()
  @discardableResult
  public func set(stickerKeyboardStyle: CometChatUIKitSwift.StickerKeyboardStyle?) -> Self
  @discardableResult
  public func set(stickerIcon: UIKit.UIImage?) -> Self
  @discardableResult
  public func set(emptyText: Swift.String) -> Self
  @discardableResult
  public func set(loadingText: Swift.String) -> Self
  @discardableResult
  public func set(errorText: Swift.String) -> Self
  @discardableResult
  public func set(emptyStateView: UIKit.UIView?) -> Self
  @discardableResult
  public func set(errorStateView: UIKit.UIView?) -> Self
  @discardableResult
  public func setOnClick(onClick: @escaping () -> Swift.Void) -> Self
  @objc deinit
}
@_inheritsConvenienceInitializers final public class FormBubbleStyle : CometChatUIKitSwift.BaseStyle {
  override final public func set(background: UIKit.UIColor) -> Self
  override final public func set(borderWidth: CoreFoundation.CGFloat) -> Self
  override final public func set(cornerRadius: CometChatUIKitSwift.CometChatCornerStyle) -> Self
  override final public func set(borderColor: UIKit.UIColor) -> Self
  final public func set(titleColor: UIKit.UIColor) -> Self
  final public func set(labelColor: UIKit.UIColor) -> Self
  final public func set(inputTextColor: UIKit.UIColor) -> Self
  final public func set(inputHintColor: UIKit.UIColor) -> Self
  final public func set(inputErrorColor: UIKit.UIColor) -> Self
  final public func set(inputStrokeColor: UIKit.UIColor) -> Self
  final public func set(inputStrokeWidth: CoreFoundation.CGFloat) -> Self
  final public func set(checkboxButtonTint: UIKit.UIColor) -> Self
  final public func set(checkboxTextColor: UIKit.UIColor) -> Self
  final public func set(buttonBackgroundColor: UIKit.UIColor) -> Self
  final public func set(buttonTextColor: UIKit.UIColor) -> Self
  final public func set(radioButtonTint: UIKit.UIColor) -> Self
  final public func set(radioButtonTextColor: UIKit.UIColor) -> Self
  final public func set(spinnerTextColor: UIKit.UIColor) -> Self
  final public func set(spinnerBackgroundColor: UIKit.UIColor) -> Self
  final public func set(selectedOptionTextColor: UIKit.UIColor) -> Self
  final public func set(optionTextColor: UIKit.UIColor) -> Self
  final public func set(selectedBackgroundColor: UIKit.UIColor) -> Self
  final public func getSelectedOptionTextColor() -> UIKit.UIColor
  final public func getOptionTextColor() -> UIKit.UIColor
  final public func getSelectedBackgroundColor() -> UIKit.UIColor
  final public func getSpinnerBackgroundColor() -> UIKit.UIColor
  final public func getTitleColor() -> UIKit.UIColor
  final public func getLabelColor() -> UIKit.UIColor
  final public func getInputTextColor() -> UIKit.UIColor
  final public func getInputHintColor() -> UIKit.UIColor
  final public func getInputErrorColor() -> UIKit.UIColor
  final public func getInputStrokeColor() -> UIKit.UIColor
  final public func getInputStrokeWidth() -> CoreFoundation.CGFloat
  final public func getCheckboxButtonTint() -> UIKit.UIColor
  final public func getCheckboxTextColor() -> UIKit.UIColor
  final public func getButtonBackgroundColor() -> UIKit.UIColor
  final public func getButtonTextColor() -> UIKit.UIColor
  final public func getRadioButtonTint() -> UIKit.UIColor
  final public func getRadioButtonTextColor() -> UIKit.UIColor
  final public func getSpinnerTextColor() -> UIKit.UIColor
  override public init()
  @objc deinit
}
public class CometChatTheme_v4 {
  public static var typography: CometChatUIKitSwift.Typography
  public static var palatte: CometChatUIKitSwift.Palette
  public init()
  @discardableResult
  public init(typography: CometChatUIKitSwift.Typography, palatte: CometChatUIKitSwift.Palette)
  public static func defaultAppearance()
  public static func set(mode: UIKit.UIUserInterfaceStyle, for window: UIKit.UIWindow?)
  @objc deinit
}
public protocol MessageInformationViewModelProtocol {
  var receipts: [CometChatSDK.MessageReceipt] { get set }
  var message: CometChatSDK.BaseMessage? { get set }
  var onError: ((_ error: CometChatSDK.CometChatException?) -> Swift.Void)? { get set }
  var reload: (() -> Swift.Void)? { get set }
  func connect()
  func disconnect()
  func update(receipt: CometChatSDK.MessageReceipt)
  func getMessageReceipt(information forMessage: CometChatSDK.BaseMessage)
}
@objc @_inheritsConvenienceInitializers open class MessageInformationViewModel : ObjectiveC.NSObject, CometChatUIKitSwift.MessageInformationViewModelProtocol {
  public var receipts: [CometChatSDK.MessageReceipt]
  public var message: CometChatSDK.BaseMessage?
  public var onError: ((_ error: CometChatSDK.CometChatException?) -> Swift.Void)?
  public var reload: (() -> Swift.Void)?
  @objc override dynamic public init()
  open func getMessageReceipt(information forMessage: CometChatSDK.BaseMessage)
  open func connect()
  open func disconnect()
  open func update(receipt: CometChatSDK.MessageReceipt)
  @objc deinit
}
extension CometChatUIKitSwift.MessageInformationViewModel : CometChatUIKitSwift.CometChatMessageEventListener {
  public func onMessagesRead(receipt: CometChatSDK.MessageReceipt)
  public func onMessagesDelivered(receipt: CometChatSDK.MessageReceipt)
}
@_hasMissingDesignatedInitializers public class CallBubbleConfiguration {
  @discardableResult
  public func set(style: CometChatUIKitSwift.CallBubbleStyle) -> Self
  @discardableResult
  public func set(icon: UIKit.UIImage) -> Self
  @discardableResult
  public func setOnClick(onClick: @escaping (() -> Swift.Void)) -> Self
  @objc deinit
}
public protocol CometChatUIEventListener {
  func showPanel(id: [Swift.String : Any]?, alignment: CometChatUIKitSwift.UIAlignment, view: UIKit.UIView?)
  func hidePanel(id: [Swift.String : Any]?, alignment: CometChatUIKitSwift.UIAlignment)
  func ccComposeMessage(id: [Swift.String : Any]?, message: CometChatSDK.BaseMessage)
  func openChat(user: CometChatSDK.User?, group: CometChatSDK.Group?)
  func onAiFeatureTapped(user: CometChatSDK.User?, group: CometChatSDK.Group?)
  func ccActiveChatChanged(id: [Swift.String : Any]?, lastMessage: CometChatSDK.BaseMessage?, user: CometChatSDK.User?, group: CometChatSDK.Group?)
  @available(*, deprecated, message: "Use `ccActiveChatChanged(_ message: TransientMessage)` instead")
  func onActiveChatChanged(id: [Swift.String : Any]?, lastMessage: CometChatSDK.BaseMessage?, user: CometChatSDK.User?, group: CometChatSDK.Group?)
}
extension CometChatUIKitSwift.CometChatUIEventListener {
  public func showPanel(id: [Swift.String : Any]?, alignment: CometChatUIKitSwift.UIAlignment, view: UIKit.UIView?)
  public func hidePanel(id: [Swift.String : Any]?, alignment: CometChatUIKitSwift.UIAlignment)
  public func ccComposeMessage(id: [Swift.String : Any]?, message: CometChatSDK.BaseMessage)
  public func openChat(user: CometChatSDK.User?, group: CometChatSDK.Group?)
  public func onAiFeatureTapped(user: CometChatSDK.User?, group: CometChatSDK.Group?)
  public func ccActiveChatChanged(id: [Swift.String : Any]?, lastMessage: CometChatSDK.BaseMessage?, user: CometChatSDK.User?, group: CometChatSDK.Group?)
  @available(*, deprecated, message: "Use `ccActiveChatChanged(_ message: TransientMessage)` instead")
  public func onActiveChatChanged(id: [Swift.String : Any]?, lastMessage: CometChatSDK.BaseMessage?, user: CometChatSDK.User?, group: CometChatSDK.Group?)
}
public enum UIAlignment {
  case composerTop
  case composerBottom
  case messageListTop
  case messageListBottom
  public static func == (a: CometChatUIKitSwift.UIAlignment, b: CometChatUIKitSwift.UIAlignment) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class MessageComposerBuilder {
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class CollaborativeWhiteboardBubbleConfiguration {
  @discardableResult
  final public func set(style: CometChatUIKitSwift.CollaborativeBubbleStyle) -> Self
  @discardableResult
  final public func set(iconURL: Swift.String) -> Self
  @objc deinit
}
@objc public protocol CometChatConversationEventListener {
  @objc optional func ccConversationDeleted(conversation: CometChatSDK.Conversation)
  @available(*, deprecated, message: "Use `onTransientMessageReceived(_ message: TransientMessage)` instead")
  @objc optional func onConversationDelete(conversation: CometChatSDK.Conversation)
  @available(*, deprecated, message: "This method is now deprecated")
  @objc optional func onStartConversationClick()
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency open class CometChatPollsBubble : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public var headingLabel: UIKit.UILabel {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var optionsContainerStackView: UIKit.UIStackView {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var message: CometChatSDK.BaseMessage?
  @_Concurrency.MainActor @preconcurrency public var pollsData: CometChatUIKitSwift.PollsData
  @_Concurrency.MainActor @preconcurrency public var style: CometChatUIKitSwift.PollBubbleStyle
  @_Concurrency.MainActor @preconcurrency public var optionCheckIcon: UIKit.UIImage?
  @_Concurrency.MainActor @preconcurrency public var optionUncheckIcon: UIKit.UIImage?
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public init()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func willMove(toSuperview newSuperview: UIKit.UIView?)
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(pollMessage: CometChatSDK.CustomMessage) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(controller: UIKit.UIViewController) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(configuration: CometChatUIKitSwift.PollBubbleConfiguration) -> Self
  @_Concurrency.MainActor @preconcurrency open func buildUI()
  @_Concurrency.MainActor @preconcurrency open func buildPollOptions()
  @_Concurrency.MainActor @preconcurrency open func onSelected(pollOptions: CometChatUIKitSwift.PollOptions)
  @objc deinit
}
public struct UIConstants {
}
public struct MessagesConstants {
  public static var parentMessageId: Swift.String
}
public struct MessageCategoryConstants {
  public static var message: Swift.String
  public static var custom: Swift.String
  public static var action: Swift.String
  public static var call: Swift.String
  public static var interactive: Swift.String
}
public struct MessageTypeConstants {
  public static var text: Swift.String
  public static var file: Swift.String
  public static var image: Swift.String
  public static var audio: Swift.String
  public static var video: Swift.String
  public static var poll: Swift.String
  public static var sticker: Swift.String
  public static var document: Swift.String
  public static var whiteboard: Swift.String
  public static var meeting: Swift.String
  public static var location: Swift.String
  public static var groupMember: Swift.String
  public static var message: Swift.String
  public static var form: Swift.String
  public static var card: Swift.String
  public static var scheduler: Swift.String
}
public struct ComposerAttachmentConstants {
  public static let camera: Swift.String
  public static let gallery: Swift.String
  public static let audio: Swift.String
  public static let file: Swift.String
}
public struct SchedulerMessageConstants {
}
public struct ReceiverTypeConstants {
}
public struct MessageOptionConstants {
  public static var editMessage: Swift.String
  public static var deleteMessage: Swift.String
  public static var translateMessage: Swift.String
  public static var reactToMessage: Swift.String
  public static var sendMessagePrivately: Swift.String
  public static var replyMessagePrivately: Swift.String
  public static var replyMessage: Swift.String
  public static var replyInThread: Swift.String
  public static var messageInformation: Swift.String
  public static var copyMessage: Swift.String
  public static var shareMessage: Swift.String
  public static var messagePrivately: Swift.String
  public static var forwardMessage: Swift.String
}
@objc public enum MessageBubbleAlignment : Swift.Int {
  case left
  case right
  case center
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum MessageBubbleTimeAlignment {
  case top
  case bottom
  public static func == (a: CometChatUIKitSwift.MessageBubbleTimeAlignment, b: CometChatUIKitSwift.MessageBubbleTimeAlignment) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum MessageStatus : Swift.Int {
  case inProgress
  case success
  case error
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum MessageListAlignment {
  case standard
  case leftAligned
  public static func == (a: CometChatUIKitSwift.MessageListAlignment, b: CometChatUIKitSwift.MessageListAlignment) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct MetadataConstants {
  public static var replyMessage: Swift.String
  public static var sticker_url: Swift.String
  public static var sticker_name: Swift.String
  public static var liveReaction: Swift.String
}
public struct GroupOptionConstants {
  public static var leave: Swift.String
  public static var delete: Swift.String
  public static var viewMembers: Swift.String
  public static var addMembers: Swift.String
  public static var bannedMembers: Swift.String
  public static var voiceCall: Swift.String
  public static var videoCall: Swift.String
  public static var viewInformation: Swift.String
}
public struct GroupMemberOptionConstants {
  public static var kick: Swift.String
  public static var ban: Swift.String
  public static var unban: Swift.String
  public static var changeScope: Swift.String
}
public struct UserOptionConstants {
  public static var unblock: Swift.String
  public static var block: Swift.String
  public static var blockUnblock: Swift.String
  public static var viewProfile: Swift.String
  public static var voiceCall: Swift.String
  public static var videoCall: Swift.String
  public static var viewInformation: Swift.String
}
public struct CallLogsDetailsConstants {
  public static var avatarID: Swift.String
  public static var participantID: Swift.String
  public static var recordingID: Swift.String
  public static var historyID: Swift.String
  public static var primaryDetailsTemplateID: Swift.String
  public static var secondaryDetailsTemplateID: Swift.String
}
public struct ConversationOptionConstants {
  public static var delete: Swift.String
}
public struct ConversationTypeConstants {
  public static var users: Swift.String
  public static var groups: Swift.String
  public static var both: Swift.String
}
public struct GroupTypeConstants {
  public static var privateGroup: Swift.String
  public static var passwordProtectedGroup: Swift.String
  public static var publicGroup: Swift.String
}
public struct GroupMemberScope {
  public static var users: Swift.String
  public static var groups: Swift.String
  public static var both: Swift.String
}
public enum CometChatDatePattern {
  case time
  case dayDate
  case dayDateTime
  case custom(Swift.String)
}
public struct DetailTemplateConstants {
}
public enum SelectionMode {
  case single
  case multiple
  case none
  public static func == (a: CometChatUIKitSwift.SelectionMode, b: CometChatUIKitSwift.SelectionMode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum UsersListenerConstants {
}
public enum GroupsListenerConstants {
}
public enum ConversationsListenerConstants {
}
public enum MessagesListenerConstants {
}
public enum GroupMembersListenerConstants {
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class CometChatReactions : UIKit.UIStackView {
  @_Concurrency.MainActor @preconcurrency public static var style: CometChatUIKitSwift.ReactionsStyle
  @_Concurrency.MainActor @preconcurrency public var style: CometChatUIKitSwift.ReactionsStyle {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func willMove(toWindow newWindow: UIKit.UIWindow?)
  @discardableResult
  @_Concurrency.MainActor @preconcurrency open func buildUI() -> Self
  @objc deinit
}
extension CometChatUIKitSwift.CometChatReactions {
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(width: CoreFoundation.CGFloat) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(reactionAlignment: CometChatUIKitSwift.MessageBubbleAlignment) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(message: CometChatSDK.BaseMessage) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(onReactionsLongPressed: @escaping ((_ reaction: CometChatSDK.ReactionCount, _ baseMessage: CometChatSDK.BaseMessage?) -> ())) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(onReactionsPressed: @escaping ((_ reaction: CometChatSDK.ReactionCount, _ baseMessage: CometChatSDK.BaseMessage?) -> ())) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(configuration: CometChatUIKitSwift.ReactionsConfiguration?) -> Self
}
@objc @_Concurrency.MainActor @preconcurrency open class CometChatCallLogs : CometChatUIKitSwift.CometChatListBase {
  @_Concurrency.MainActor @preconcurrency final public let viewModel: CometChatUIKitSwift.CallLogsViewModel
  @_Concurrency.MainActor @preconcurrency public static var style: CometChatUIKitSwift.CallLogStyle
  @_Concurrency.MainActor @preconcurrency public var style: CometChatUIKitSwift.CallLogStyle {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public static var dateTimeFormatter: CometChatUIKitSwift.CometChatDateTimeFormatter
  @_Concurrency.MainActor @preconcurrency public var dateTimeFormatter: CometChatUIKitSwift.CometChatDateTimeFormatter {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public static var avatarStyle: CometChatUIKitSwift.AvatarStyle
  @_Concurrency.MainActor @preconcurrency public var avatarStyle: CometChatUIKitSwift.AvatarStyle {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public static var dateStyle: CometChatUIKitSwift.DateStyle
  @_Concurrency.MainActor @preconcurrency public var dateStyle: CometChatUIKitSwift.DateStyle {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency @objc dynamic public init()
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency open func defaultSetup()
  @_Concurrency.MainActor @preconcurrency override open func setupStyle()
  @_Concurrency.MainActor @preconcurrency open func registerCells()
  @_Concurrency.MainActor @preconcurrency open func reloadData()
  @objc deinit
}
extension CometChatUIKitSwift.CometChatCallLogs {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func tableView(_ tableView: UIKit.UITableView, willDisplay cell: UIKit.UITableViewCell, forRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func tableView(_ tableView: UIKit.UITableView, trailingSwipeActionsConfigurationForRowAt indexPath: Foundation.IndexPath) -> UIKit.UISwipeActionsConfiguration?
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func tableView(_ tableView: UIKit.UITableView, heightForRowAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func tableView(_ tableView: UIKit.UITableView, canEditRowAt indexPath: Foundation.IndexPath) -> Swift.Bool
}
public struct ThreadedMessageHeaderStyle {
  public var backgroundColor: UIKit.UIColor
  public var borderColor: UIKit.UIColor
  public var borderWith: CoreFoundation.CGFloat
  public var cornerRadius: CometChatUIKitSwift.CometChatCornerStyle?
  public var bubbleContainerBackgroundColor: UIKit.UIColor
  public var bubbleContainerBorderColor: UIKit.UIColor
  public var bubbleContainerBorderWidth: CoreFoundation.CGFloat
  public var bubbleContainerCornerRadius: CometChatUIKitSwift.CometChatCornerStyle?
  public var dividerTintColor: UIKit.UIColor
  public var countTextColor: UIKit.UIColor
  public var countTextFont: UIKit.UIFont
  public init()
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class CometChatReactionListShimmer : CometChatUIKitSwift.CometChatShimmerView {
  @_Concurrency.MainActor @preconcurrency public var cellCount: Swift.Int
  @_Concurrency.MainActor @preconcurrency override open func buildUI()
  @_Concurrency.MainActor @preconcurrency override open func startShimmer()
  @_Concurrency.MainActor @preconcurrency override open func stopShimmer()
  @_Concurrency.MainActor @preconcurrency @objc override open func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc override open func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init()
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class CometChatMediaRecorder : UIKit.UIViewController {
  @_Concurrency.MainActor @preconcurrency public var mediaRecorderBackView: CometChatUIKitSwift.GIFImageView {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public static var style: CometChatUIKitSwift.MediaRecorderStyle
  @_Concurrency.MainActor @preconcurrency public var style: CometChatUIKitSwift.MediaRecorderStyle {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func loadView()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency open func buildUI()
  @_Concurrency.MainActor @preconcurrency open func setupStyle()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidDisappear(_ animated: Swift.Bool)
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func setSubmit(onSubmit: @escaping ((Swift.String) -> Swift.Void)) -> Self
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class CometChatButton : CometChatUIKitSwift.VerticalButton {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public init()
  @objc @_Concurrency.MainActor @preconcurrency open func onClicked()
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(text: Swift.String) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(icon: UIKit.UIImage) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func setOnClick(onClick: @escaping (() -> Swift.Void)) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(backgroundColor: UIKit.UIColor) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(cornerRadius: CometChatUIKitSwift.CometChatCornerStyle) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(controller: UIKit.UIViewController?) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func disable(button: Swift.Bool) -> Self
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class VerticalButton : UIKit.UIButton {
  @_Concurrency.MainActor @preconcurrency public var makeTextVerticallyAligned: Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers open class MediaRecorderViewModel : ObjectiveC.NSObject {
  @objc deinit
}
extension CometChatUIKitSwift.MediaRecorderViewModel {
  public func setupBaseMessage(url: Swift.String) -> CometChatSDK.BaseMessage
  public func sendMediaMessageToUser(url: Swift.String, type: CometChatSDK.CometChat.MessageType)
  public func sendMediaMessageToGroup(url: Swift.String, type: CometChatSDK.CometChat.MessageType)
}
public struct GroupsStyle : CometChatUIKitSwift.ListBaseStyle, CometChatUIKitSwift.ListItemStyle, CometChatUIKitSwift.SearchBarStyle {
  public var listItemSelectedImage: UIKit.UIImage
  public var listItemDeSelectedImage: UIKit.UIImage
  public var searchIconTintColor: UIKit.UIColor?
  public var searchBarStyle: UIKit.UISearchBar.Style
  public var searchTintColor: UIKit.UIColor?
  public var searchBarTintColor: UIKit.UIColor?
  public var searchBarPlaceholderTextColor: UIKit.UIColor?
  public var searchBarPlaceholderTextFont: UIKit.UIFont?
  public var searchBarTextColor: UIKit.UIColor?
  public var searchBarTextFont: UIKit.UIFont?
  public var searchBarBackgroundColor: UIKit.UIColor?
  public var searchBarCancelIconTintColor: UIKit.UIColor?
  public var searchBarCrossIconTintColor: UIKit.UIColor?
  public var backgroundColor: UIKit.UIColor
  public var borderWidth: CoreFoundation.CGFloat
  public var borderColor: UIKit.UIColor
  public var cornerRadius: CometChatUIKitSwift.CometChatCornerStyle
  public var titleColor: UIKit.UIColor?
  public var titleFont: UIKit.UIFont?
  public var largeTitleColor: UIKit.UIColor?
  public var largeTitleFont: UIKit.UIFont?
  public var navigationBarTintColor: UIKit.UIColor?
  public var navigationBarItemsTintColor: UIKit.UIColor?
  public var errorTitleTextFont: UIKit.UIFont
  public var errorTitleTextColor: UIKit.UIColor
  public var errorSubTitleFont: UIKit.UIFont
  public var errorSubTitleTextColor: UIKit.UIColor
  public var retryButtonTextColor: UIKit.UIColor
  public var retryButtonTextFont: UIKit.UIFont
  public var retryButtonBackgroundColor: UIKit.UIColor
  public var retryButtonBorderColor: UIKit.UIColor
  public var retryButtonBorderWidth: CoreFoundation.CGFloat
  public var retryButtonCornerRadius: CometChatUIKitSwift.CometChatCornerStyle
  public var emptyTitleTextFont: UIKit.UIFont
  public var emptyTitleTextColor: UIKit.UIColor
  public var emptySubTitleFont: UIKit.UIFont
  public var emptySubTitleTextColor: UIKit.UIColor
  public var tableViewSeparator: UIKit.UIColor
  public var listItemTitleTextColor: UIKit.UIColor
  public var listItemTitleFont: UIKit.UIFont
  public var listItemSubTitleTextColor: UIKit.UIColor
  public var listItemSubTitleFont: UIKit.UIFont
  public var listItemBackground: UIKit.UIColor
  public var listItemSelectedBackground: UIKit.UIColor
  public var listItemBorderWidth: CoreFoundation.CGFloat
  public var listItemBorderColor: UIKit.UIColor
  public var listItemCornerRadius: CometChatUIKitSwift.CometChatCornerStyle
  public var listItemSelectionImageTint: UIKit.UIColor
  public var listItemDeSelectedImageTint: UIKit.UIColor
  public var passwordGroupImageTintColor: UIKit.UIColor
  public var passwordGroupImageBackgroundColor: UIKit.UIColor
  public var privateGroupImageTintColor: UIKit.UIColor
  public var privateGroupImageBackgroundColor: UIKit.UIColor
  public var privateGroupIcon: UIKit.UIImage
  public var protectedGroupIcon: UIKit.UIImage
  public init()
}
public struct FileBubbleStyle : CometChatUIKitSwift.BaseMessageBubbleStyle {
  public var threadedIndicatorTextFont: UIKit.UIFont?
  public var threadedIndicatorTextColor: UIKit.UIColor?
  public var threadedIndicatorImageTint: UIKit.UIColor?
  public var headerTextColor: UIKit.UIColor?
  public var headerTextFont: UIKit.UIFont?
  public var backgroundColor: UIKit.UIColor?
  public var backgroundDrawable: UIKit.UIImage?
  public var borderWidth: CoreFoundation.CGFloat?
  public var borderColor: UIKit.UIColor?
  public var cornerRadius: CometChatUIKitSwift.CometChatCornerStyle?
  public var avatarStyle: CometChatUIKitSwift.AvatarStyle?
  public var dateStyle: CometChatUIKitSwift.DateStyle?
  public var receiptStyle: CometChatUIKitSwift.ReceiptStyle?
  public var titleColor: UIKit.UIColor
  public var titleFont: UIKit.UIFont
  public var subtitleColor: UIKit.UIColor
  public var subtitleFont: UIKit.UIFont
  public var downloadTintColor: UIKit.UIColor
  public var reactionsStyle: CometChatUIKitSwift.ReactionsStyle?
  public init()
}
@_hasMissingDesignatedInitializers public class ConversationsBuilder {
  public static func getDefaultRequestBuilder() -> CometChatSDK.ConversationRequest.ConversationRequestBuilder
  @objc deinit
}
public struct AIConversationSummaryStyle : CometChatUIKitSwift.AIParentStyle {
  public var errorViewTextFont: UIKit.UIFont?
  public var errorViewTextColor: UIKit.UIColor?
  public var emptyViewTextFont: UIKit.UIFont?
  public var emptyViewTextColor: UIKit.UIColor?
  public var cancelButtonImage: UIKit.UIImage
  public var cancelButtonImageTintColor: UIKit.UIColor
  public var titleTextFont: UIKit.UIFont
  public var titleTextColor: UIKit.UIColor
  public var summaryTextFont: UIKit.UIFont
  public var summaryTextColor: UIKit.UIColor
  public var backgroundColor: UIKit.UIColor
  public var borderWidth: CoreFoundation.CGFloat
  public var borderColor: UIKit.UIColor
  public var cornerRadius: CometChatUIKitSwift.CometChatCornerStyle?
}
public protocol DataSource {
  func getTextMessageOptions(loggedInUser: CometChatSDK.User, messageObject: CometChatSDK.BaseMessage, controller: UIKit.UIViewController?, group: CometChatSDK.Group?, additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration) -> [CometChatUIKitSwift.CometChatMessageOption]?
  func getImageMessageOptions(loggedInUser: CometChatSDK.User, messageObject: CometChatSDK.BaseMessage, controller: UIKit.UIViewController?, group: CometChatSDK.Group?, additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration) -> [CometChatUIKitSwift.CometChatMessageOption]?
  func getVideoMessageOptions(loggedInUser: CometChatSDK.User, messageObject: CometChatSDK.BaseMessage, controller: UIKit.UIViewController?, group: CometChatSDK.Group?, additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration) -> [CometChatUIKitSwift.CometChatMessageOption]?
  func getAudioMessageOptions(loggedInUser: CometChatSDK.User, messageObject: CometChatSDK.BaseMessage, controller: UIKit.UIViewController?, group: CometChatSDK.Group?, additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration) -> [CometChatUIKitSwift.CometChatMessageOption]?
  func getFileMessageOptions(loggedInUser: CometChatSDK.User, messageObject: CometChatSDK.BaseMessage, controller: UIKit.UIViewController?, group: CometChatSDK.Group?, additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration) -> [CometChatUIKitSwift.CometChatMessageOption]?
  func getBottomView(message: CometChatSDK.BaseMessage, controller: UIKit.UIViewController?, alignment: CometChatUIKitSwift.MessageBubbleAlignment, additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration?) -> UIKit.UIView?
  func getTextMessageContentView(message: CometChatSDK.TextMessage, controller: UIKit.UIViewController?, alignment: CometChatUIKitSwift.MessageBubbleAlignment, style: CometChatUIKitSwift.TextBubbleStyle?, additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration?) -> UIKit.UIView?
  func getImageMessageContentView(message: CometChatSDK.MediaMessage, controller: UIKit.UIViewController?, alignment: CometChatUIKitSwift.MessageBubbleAlignment, style: CometChatUIKitSwift.ImageBubbleStyle?, additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration?) -> UIKit.UIView?
  func getVideoMessageContentView(message: CometChatSDK.MediaMessage, controller: UIKit.UIViewController?, alignment: CometChatUIKitSwift.MessageBubbleAlignment, style: CometChatUIKitSwift.VideoBubbleStyle?, additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration?) -> UIKit.UIView?
  func getFileMessageContentView(message: CometChatSDK.MediaMessage, controller: UIKit.UIViewController?, alignment: CometChatUIKitSwift.MessageBubbleAlignment, style: CometChatUIKitSwift.FileBubbleStyle?, additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration?) -> UIKit.UIView?
  func getAudioMessageContentView(message: CometChatSDK.MediaMessage, controller: UIKit.UIViewController?, alignment: CometChatUIKitSwift.MessageBubbleAlignment, style: CometChatUIKitSwift.AudioBubbleStyle?, additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration?) -> UIKit.UIView?
  func getFormMessageContentView(message: CometChatUIKitSwift.FormMessage, controller: UIKit.UIViewController?, alignment: CometChatUIKitSwift.MessageBubbleAlignment, style: CometChatUIKitSwift.FormBubbleStyle?, additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration?) -> UIKit.UIView?
  func getSchedulerContentView(message: CometChatUIKitSwift.SchedulerMessage, controller: UIKit.UIViewController?, alignment: CometChatUIKitSwift.MessageBubbleAlignment, style: CometChatUIKitSwift.SchedulerBubbleStyle?, additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration?) -> UIKit.UIView?
  func getCardMessageContentView(message: CometChatUIKitSwift.CardMessage, controller: UIKit.UIViewController?, alignment: CometChatUIKitSwift.MessageBubbleAlignment, style: CometChatUIKitSwift.CardBubbleStyle?, additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration?) -> UIKit.UIView?
  func getTextMessageTemplate(additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration?) -> CometChatUIKitSwift.CometChatMessageTemplate
  func getAudioMessageTemplate(additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration?) -> CometChatUIKitSwift.CometChatMessageTemplate
  func getVideoMessageTemplate(additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration?) -> CometChatUIKitSwift.CometChatMessageTemplate
  func getImageMessageTemplate(additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration?) -> CometChatUIKitSwift.CometChatMessageTemplate
  func getGroupActionTemplate(additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration?) -> CometChatUIKitSwift.CometChatMessageTemplate
  func getFileMessageTemplate(additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration?) -> CometChatUIKitSwift.CometChatMessageTemplate
  func getFormMessageTemplate(additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration?) -> CometChatUIKitSwift.CometChatMessageTemplate
  func getSchedulerMessageTemplate(additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration?) -> CometChatUIKitSwift.CometChatMessageTemplate
  func getCardMessageTemplate(additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration?) -> CometChatUIKitSwift.CometChatMessageTemplate
  func getAllMessageTemplates(additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration?) -> [CometChatUIKitSwift.CometChatMessageTemplate]
  func getMessageTemplate(messageType: Swift.String, messageCategory: Swift.String, additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration?) -> CometChatUIKitSwift.CometChatMessageTemplate?
  func getMessageOptions(loggedInUser: CometChatSDK.User, messageObject: CometChatSDK.BaseMessage, controller: UIKit.UIViewController?, group: CometChatSDK.Group?, additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration) -> [CometChatUIKitSwift.CometChatMessageOption]?
  func getCommonOptions(loggedInUser: CometChatSDK.User, messageObject: CometChatSDK.BaseMessage, controller: UIKit.UIViewController?, group: CometChatSDK.Group?, additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration) -> [CometChatUIKitSwift.CometChatMessageOption]
  func getMessageTypeToSubtitle(messageType: Swift.String, controller: UIKit.UIViewController) -> Swift.String?
  func getAttachmentOptions(controller: UIKit.UIViewController, user: CometChatSDK.User?, group: CometChatSDK.Group?, id: [Swift.String : Any]?, additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration) -> [CometChatUIKitSwift.CometChatMessageComposerAction]?
  func getAllMessageTypes() -> [Swift.String]?
  func getAllMessageCategories() -> [Swift.String]?
  func getAuxiliaryOptions(user: CometChatSDK.User?, group: CometChatSDK.Group?, controller: UIKit.UIViewController?, id: [Swift.String : Any]?) -> UIKit.UIView?
  func getAIOptions(controller: UIKit.UIViewController, user: CometChatSDK.User?, group: CometChatSDK.Group?, id: [Swift.String : Any]?, aiOptionsStyle: CometChatUIKitSwift.AIOptionsStyle?) -> [CometChatUIKitSwift.CometChatMessageComposerAction]?
  func getId() -> Swift.String
  func getDeleteMessageBubble(messageObject: CometChatSDK.BaseMessage, additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration?) -> UIKit.UIView?
  func getVideoMessageBubble(videoUrl: Swift.String?, thumbnailUrl: Swift.String?, message: CometChatSDK.MediaMessage?, controller: UIKit.UIViewController?, style: CometChatUIKitSwift.VideoBubbleStyle?, additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration?) -> UIKit.UIView?
  func getTextMessageBubble(messageText: Swift.String?, message: CometChatSDK.TextMessage?, controller: UIKit.UIViewController?, alignment: CometChatUIKitSwift.MessageBubbleAlignment, style: CometChatUIKitSwift.TextBubbleStyle?, additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration?) -> UIKit.UIView?
  func getImageMessageBubble(imageUrl: Swift.String?, caption: Swift.String?, message: CometChatSDK.MediaMessage?, controller: UIKit.UIViewController?, style: CometChatUIKitSwift.ImageBubbleStyle?, additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration?) -> UIKit.UIView?
  func getAudioMessageBubble(audioUrl: Swift.String?, title: Swift.String?, message: CometChatSDK.MediaMessage?, controller: UIKit.UIViewController?, style: CometChatUIKitSwift.AudioBubbleStyle?, additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration?) -> UIKit.UIView?
  func getFormBubble(message: CometChatUIKitSwift.FormMessage?, controller: UIKit.UIViewController?, alignment: CometChatUIKitSwift.MessageBubbleAlignment, style: CometChatUIKitSwift.FormBubbleStyle?, additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration?) -> UIKit.UIView?
  func getCardBubble(message: CometChatUIKitSwift.CardMessage?, controller: UIKit.UIViewController?, alignment: CometChatUIKitSwift.MessageBubbleAlignment, style: CometChatUIKitSwift.CardBubbleStyle?, additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration?) -> UIKit.UIView?
  func getSchedulerBubble(message: CometChatUIKitSwift.SchedulerMessage?, controller: UIKit.UIViewController?, alignment: CometChatUIKitSwift.MessageBubbleAlignment, style: CometChatUIKitSwift.SchedulerBubbleStyle?, additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration?) -> UIKit.UIView?
  func getFileMessageBubble(fileUrl: Swift.String?, fileMimeType: Swift.String?, title: Swift.String?, id: Swift.Int?, message: CometChatSDK.MediaMessage?, controller: UIKit.UIViewController?, style: CometChatUIKitSwift.FileBubbleStyle?, additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration?) -> UIKit.UIView?
  func getLastConversationMessage(conversation: CometChatSDK.Conversation, additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration?) -> Foundation.NSAttributedString?
  func getAuxiliaryHeaderMenu(user: CometChatSDK.User?, group: CometChatSDK.Group?, controller: UIKit.UIViewController?, id: [Swift.String : Any]?, additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration) -> UIKit.UIStackView?
  func getTextFormatters() -> [CometChatUIKitSwift.CometChatTextFormatter]
}
public struct QuickReactionsStyle {
  public var plusIconBackgroundColor: UIKit.UIColor
  public var plusIconTintColor: UIKit.UIColor
  public var plusIconCornerRadius: CometChatUIKitSwift.CometChatCornerStyle?
  public var reactionsBackgroundColor: UIKit.UIColor
  public var reactionFont: UIKit.UIFont
  public var reactionCornerRadius: CometChatUIKitSwift.CometChatCornerStyle
  public var hideAddReactionsIcon: Swift.Bool
  public var backgroundColor: UIKit.UIColor
  public var borderWidth: CoreFoundation.CGFloat
  public var borderColor: UIKit.UIColor
  public var cornerRadius: CometChatUIKitSwift.CometChatCornerStyle?
  public init()
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class StickerAuxiliaryButton : UIKit.UIButton {
  @objc deinit
  @_Concurrency.MainActor @preconcurrency public func resetToDefaultStyle()
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func setOnStickerTap(onStickerTap: @escaping () -> Swift.Void) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func setOnKeyboardTap(onKeyboardTap: @escaping () -> Swift.Void) -> Self
}
public struct CallButtonStyle {
  public var videoCallIconTint: UIKit.UIColor
  public var videoCallTextFont: UIKit.UIFont
  public var videoCallTextColor: UIKit.UIColor
  public var videoCallButtonBackground: UIKit.UIColor
  public var videoCallButtonCornerRadius: CometChatUIKitSwift.CometChatCornerStyle?
  public var videoCallButtonBorder: CoreFoundation.CGFloat?
  public var videoCallButtonBorderColor: UIKit.UIColor?
  public var videoCallIcon: UIKit.UIImage
  public var audioCallIconTint: UIKit.UIColor
  public var audioCallTextFont: UIKit.UIFont
  public var audioCallTextColor: UIKit.UIColor
  public var audioCallButtonBackground: UIKit.UIColor
  public var audioCallButtonCornerRadius: CometChatUIKitSwift.CometChatCornerStyle?
  public var audioCallButtonBorder: CoreFoundation.CGFloat?
  public var audioCallButtonBorderColor: UIKit.UIColor?
  public var audioCallIcon: UIKit.UIImage
  public init()
}
@_inheritsConvenienceInitializers public class ThumbnailGenerationExtension : CometChatUIKitSwift.ExtensionDataSource {
  public init()
  override public func addExtension()
  override public func getExtensionId() -> Swift.String
  @objc deinit
}
public struct AudioBubbleStyle : CometChatUIKitSwift.BaseMessageBubbleStyle {
  public var threadedIndicatorTextFont: UIKit.UIFont?
  public var threadedIndicatorTextColor: UIKit.UIColor?
  public var threadedIndicatorImageTint: UIKit.UIColor?
  public var headerTextColor: UIKit.UIColor?
  public var headerTextFont: UIKit.UIFont?
  public var backgroundColor: UIKit.UIColor?
  public var backgroundDrawable: UIKit.UIImage?
  public var borderWidth: CoreFoundation.CGFloat?
  public var borderColor: UIKit.UIColor?
  public var cornerRadius: CometChatUIKitSwift.CometChatCornerStyle?
  public var avatarStyle: CometChatUIKitSwift.AvatarStyle?
  public var dateStyle: CometChatUIKitSwift.DateStyle?
  public var receiptStyle: CometChatUIKitSwift.ReceiptStyle?
  public var playImageTintColor: UIKit.UIColor
  public var playImageBackgroundColor: UIKit.UIColor
  public var audioWaveFormTintIcon: UIKit.UIColor
  public var audioTimeLineFont: UIKit.UIFont
  public var audioTimeLineTextColor: UIKit.UIColor
  public var reactionsStyle: CometChatUIKitSwift.ReactionsStyle?
  public init()
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class ProfanityDataMaskingExtensionDecorator : CometChatUIKitSwift.DataSourceDecorator {
  override public func getTextMessageBubble(messageText: Swift.String?, message: CometChatSDK.TextMessage?, controller: UIKit.UIViewController?, alignment: CometChatUIKitSwift.MessageBubbleAlignment, style: CometChatUIKitSwift.TextBubbleStyle?, additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration?) -> UIKit.UIView?
  override public func getLastConversationMessage(conversation: CometChatSDK.Conversation, additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration?) -> Foundation.NSAttributedString?
  public static func getContentText(message: CometChatSDK.TextMessage) -> Swift.String
  public static func checkProfanityMessage(message: CometChatSDK.TextMessage) -> Swift.String
  public static func checkDataMasking(message: CometChatSDK.TextMessage) -> Swift.String
  override public func getId() -> Swift.String
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class CometChatSuggestionView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public static var style: CometChatUIKitSwift.SuggestionViewStyle
  @_Concurrency.MainActor @preconcurrency public static var avatarStyle: CometChatUIKitSwift.AvatarStyle
  @_Concurrency.MainActor @preconcurrency public static var statusIndicatorStyle: CometChatUIKitSwift.StatusIndicatorStyle
  @_Concurrency.MainActor @preconcurrency public var style: CometChatUIKitSwift.SuggestionViewStyle {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var avatarStyle: CometChatUIKitSwift.AvatarStyle {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var statusIndicatorStyle: CometChatUIKitSwift.StatusIndicatorStyle {
    get
    set
  }
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func build() -> Self
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func willMove(toWindow newWindow: UIKit.UIWindow?)
  @_Concurrency.MainActor @preconcurrency open func buildUI()
  @_Concurrency.MainActor @preconcurrency open func setupStyle()
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(suggestionItems: [CometChatUIKitSwift.SuggestionItem]) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(style: CometChatUIKitSwift.SuggestionViewStyle?) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(onSelected: ((CometChatUIKitSwift.SuggestionItem) -> ())?) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(listScrolledToBottom: ((@escaping ([CometChatUIKitSwift.SuggestionItem]) -> Swift.Void) -> Swift.Void)?) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(controller: UIKit.UIViewController?) -> Self
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension CometChatUIKitSwift.CometChatSuggestionView : UIKit.UITableViewDataSource, UIKit.UITableViewDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func tableView(_ tableView: UIKit.UITableView, willDisplay cell: UIKit.UITableViewCell, forRowAt indexPath: Foundation.IndexPath)
}
public struct AISmartRepliesStyle : CometChatUIKitSwift.AIParentStyle {
  public var errorViewTextFont: UIKit.UIFont?
  public var errorViewTextColor: UIKit.UIColor?
  public var emptyViewTextFont: UIKit.UIFont?
  public var emptyViewTextColor: UIKit.UIColor?
  public var cancelButtonImage: UIKit.UIImage
  public var cancelButtonImageTintColor: UIKit.UIColor
  public var titleTextFont: UIKit.UIFont
  public var titleTextColor: UIKit.UIColor
  public var repliesTextFont: UIKit.UIFont
  public var repliesTextColor: UIKit.UIColor
  public var repliesViewBorderWidth: CoreFoundation.CGFloat
  public var repliesViewBorderColor: UIKit.UIColor
  public var repliesViewBackgroundColor: UIKit.UIColor
  public var repliesViewCornerRadius: CometChatUIKitSwift.CometChatCornerStyle?
  public var backgroundColor: UIKit.UIColor
  public var borderWidth: CoreFoundation.CGFloat
  public var borderColor: UIKit.UIColor
  public var cornerRadius: CometChatUIKitSwift.CometChatCornerStyle?
}
public class AIParentConfiguration {
  public init()
  @discardableResult
  public func set(loadingView: UIKit.UIView) -> Self
  @discardableResult
  public func set(errorView: UIKit.UIView) -> Self
  @discardableResult
  public func set(emptyRepliesView: UIKit.UIView) -> Self
  @discardableResult
  public func set(loadingIcon: UIKit.UIImage?) -> Self
  @discardableResult
  public func set(emptyIcon: UIKit.UIImage?) -> Self
  @discardableResult
  public func set(errorIcon: UIKit.UIImage?) -> Self
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class DividerEntity : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers public class ButtonStyle : CometChatUIKitSwift.BaseStyle {
  @discardableResult
  public func set(iconTint: UIKit.UIColor) -> Self
  @discardableResult
  public func set(textFont: UIKit.UIFont) -> Self
  @discardableResult
  public func set(textColor: UIKit.UIColor) -> Self
  @discardableResult
  public func set(iconBackground: UIKit.UIColor?) -> Self
  @discardableResult
  public func set(iconCornerRadius: CoreFoundation.CGFloat?) -> Self
  @discardableResult
  public func set(iconBorder: CoreFoundation.CGFloat?) -> Self
  override public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc @IBDesignable @_Concurrency.MainActor @preconcurrency public class CometChatLiveReaction : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public var image1: UIKit.UIImage?
  @_Concurrency.MainActor @preconcurrency public var isAnimating: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public var views: [UIKit.UIView]?
  @_Concurrency.MainActor @preconcurrency public var duration: Swift.Double
  @_Concurrency.MainActor @preconcurrency public var duration1: Swift.Double
  @_Concurrency.MainActor @preconcurrency public var duration2: Swift.Double
  @_Concurrency.MainActor @preconcurrency public var floatieSize: CoreFoundation.CGSize
  @_Concurrency.MainActor @preconcurrency public var floatieDelay: Swift.Double
  @_Concurrency.MainActor @preconcurrency public var delay: Swift.Double
  @_Concurrency.MainActor @preconcurrency public var startingAlpha: CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency public var endingAlpha: CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency public var upwards: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public var remove: Swift.Bool
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var removeAtEnd: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var FloatingUp: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var alphaAtStart: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var alphaAtEnd: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var rotationSpeed: Swift.Double {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var density: Swift.Double {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var delayedStart: Swift.Double {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var speedY: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var speedX: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var floatieWidth: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var floatieHeight: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var borderColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var borderWidth: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var cornerRadius: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var floaterImage1: UIKit.UIImage? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor @preconcurrency public func sendReaction()
  @_Concurrency.MainActor @preconcurrency public func stopReaction()
  @_Concurrency.MainActor @preconcurrency public func buildDefaultSetting()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public struct CometChatDateTimeFormatter {
  public var time: ((_ timestamp: Swift.Int) -> Swift.String)?
  public var today: ((_ timestamp: Swift.Int) -> Swift.String)?
  public var yesterday: ((_ timestamp: Swift.Int) -> Swift.String)?
  public var lastWeek: ((_ timestamp: Swift.Int) -> Swift.String)?
  public var otherDay: ((_ timestamp: Swift.Int) -> Swift.String)?
  public var minute: ((_ timestamp: Swift.Int) -> Swift.String)?
  public var minutes: ((_ timestamp: Swift.Int) -> Swift.String)?
  public var hour: ((_ timestamp: Swift.Int) -> Swift.String)?
  public var hours: ((_ timestamp: Swift.Int) -> Swift.String)?
  public init()
}
extension CometChatUIKitSwift.CometChatMessageList : UIKit.UIGestureRecognizerDelegate, UIKit.UIViewControllerTransitioningDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func animationController(forPresented presented: UIKit.UIViewController, presenting: UIKit.UIViewController, source: UIKit.UIViewController) -> (any UIKit.UIViewControllerAnimatedTransitioning)?
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func animationController(forDismissed dismissed: UIKit.UIViewController) -> (any UIKit.UIViewControllerAnimatedTransitioning)?
}
public enum FormattingType {
  case MESSAGE_BUBBLE
  case COMPOSER
  case CONVERSATION_LIST
  public static func == (a: CometChatUIKitSwift.FormattingType, b: CometChatUIKitSwift.FormattingType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
open class CometChatTextFormatter {
  public var trackingCharacter: Swift.Character
  public var suggestionItemList: [CometChatUIKitSwift.SuggestionItem]
  public var user: CometChatSDK.User?
  public var group: CometChatSDK.Group?
  public init(trackingCharacter: Swift.Character)
  open func set(user: CometChatSDK.User)
  open func set(group: CometChatSDK.Group)
  open func getRegex() -> Swift.String
  open func getTrackingCharacter() -> Swift.Character
  open func search(string: Swift.String, suggestedItems: (([CometChatUIKitSwift.SuggestionItem]) -> ())? = nil)
  open func onScrollToBottom(suggestionItemList: [CometChatUIKitSwift.SuggestionItem], listItem: (([CometChatUIKitSwift.SuggestionItem]) -> ())?)
  open func onItemClick(suggestedItem: CometChatUIKitSwift.SuggestionItem, user: CometChatSDK.User?, group: CometChatSDK.Group?)
  open func handlePreMessageSend(baseMessage: CometChatSDK.BaseMessage, suggestionItemList: [CometChatUIKitSwift.SuggestionItem])
  open func prepareMessageString(baseMessage: CometChatSDK.BaseMessage, regexString: Swift.String, alignment: CometChatUIKitSwift.MessageBubbleAlignment = .left, formattingType: CometChatUIKitSwift.FormattingType) -> Foundation.NSAttributedString
  open func onTextTapped(baseMessage: CometChatSDK.BaseMessage, tappedText: Swift.String, controller: UIKit.UIViewController?)
  @objc deinit
}
final public class IncomingCallConfiguration {
  public init()
  @discardableResult
  final public func set(callSettingsBuilder: Any) -> Self
  @discardableResult
  final public func setOnAccept(onAccept: @escaping ((CometChatSDK.BaseMessage) -> Swift.Void)) -> Self
  @discardableResult
  final public func setOnDecline(onDecline: @escaping ((CometChatSDK.BaseMessage) -> Swift.Void)) -> Self
  @discardableResult
  final public func setOnError(onError: @escaping ((_ error: CometChatSDK.CometChatException) -> Swift.Void)) -> Self
  @discardableResult
  final public func set(call: CometChatSDK.Call?) -> Self
  @discardableResult
  final public func set(acceptButtonIcon: UIKit.UIImage?) -> Self
  @discardableResult
  final public func set(declineButtonIcon: UIKit.UIImage?) -> Self
  @discardableResult
  final public func disable(soundForCalls: Swift.Bool?) -> Self
  @discardableResult
  final public func set(customSoundForCalls: Foundation.URL?) -> Self
  @discardableResult
  final public func set(avatarStyle: CometChatUIKitSwift.AvatarStyle?) -> Self
  @discardableResult
  final public func set(acceptButtonStyle: CometChatUIKitSwift.ButtonStyle?) -> Self
  @discardableResult
  final public func set(declineButtonStyle: CometChatUIKitSwift.ButtonStyle?) -> Self
  @discardableResult
  final public func set(incomingCallStyle: CometChatUIKitSwift.IncomingCallStyle?) -> Self
  @discardableResult
  final public func set(subtitleView: ((_ call: CometChatSDK.Call) -> UIKit.UIView)?) -> Self
  @discardableResult
  final public func set(trailView: ((_ call: CometChatSDK.Call) -> UIKit.UIView)?) -> Self
  @discardableResult
  final public func set(titleView: ((_ call: CometChatSDK.Call) -> UIKit.UIView)?) -> Self
  @discardableResult
  final public func set(listItemView: ((_ call: CometChatSDK.Call) -> UIKit.UIView)?) -> Self
  @discardableResult
  final public func set(leadingView: ((_ call: CometChatSDK.Call) -> UIKit.UIView)?) -> Self
  @discardableResult
  final public func set(onCancelClick: @escaping (_ call: CometChatSDK.Call?, _ controller: UIKit.UIViewController?) -> Swift.Void) -> Self
  @discardableResult
  final public func set(onAcceptClick: @escaping (_ call: CometChatSDK.Call?, _ controller: UIKit.UIViewController?) -> Swift.Void) -> Self
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class CometChatFormBubble : UIKit.UIView {
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(formMessage: CometChatUIKitSwift.FormMessage) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func setUIElements(_ elementEntities: [CometChatUIKitSwift.ElementEntity]) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(style: CometChatUIKitSwift.FormBubbleStyle) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(background: UIKit.UIColor) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(corner: CometChatUIKitSwift.CometChatCornerStyle) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(borderWidth: CoreFoundation.CGFloat) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(borderColor: UIKit.UIColor) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(textColor: UIKit.UIColor) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(textFont: UIKit.UIFont) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(controller: UIKit.UIViewController) -> Self
  @objc deinit
}
public protocol ListItemStyle {
  var listItemTitleTextColor: UIKit.UIColor { get set }
  var listItemTitleFont: UIKit.UIFont { get set }
  var listItemSubTitleTextColor: UIKit.UIColor { get set }
  var listItemSubTitleFont: UIKit.UIFont { get set }
  var listItemBackground: UIKit.UIColor { get set }
  var listItemSelectedBackground: UIKit.UIColor { get set }
  var listItemBorderWidth: CoreFoundation.CGFloat { get set }
  var listItemBorderColor: UIKit.UIColor { get set }
  var listItemCornerRadius: CometChatUIKitSwift.CometChatCornerStyle { get set }
  var listItemSelectionImageTint: UIKit.UIColor { get set }
  var listItemDeSelectedImageTint: UIKit.UIColor { get set }
  var listItemSelectedImage: UIKit.UIImage { get set }
  var listItemDeSelectedImage: UIKit.UIImage { get set }
}
public struct ListItemStyleDefault : CometChatUIKitSwift.ListItemStyle {
  public var listItemDeSelectedImageTint: UIKit.UIColor
  public var listItemSelectedImage: UIKit.UIImage
  public var listItemDeSelectedImage: UIKit.UIImage
  public var listItemTitleTextColor: UIKit.UIColor
  public var listItemTitleFont: UIKit.UIFont
  public var listItemSubTitleTextColor: UIKit.UIColor
  public var listItemSubTitleFont: UIKit.UIFont
  public var listItemBackground: UIKit.UIColor
  public var listItemSelectedBackground: UIKit.UIColor
  public var listItemBorderWidth: CoreFoundation.CGFloat
  public var listItemBorderColor: UIKit.UIColor
  public var listItemSelectionImageTint: UIKit.UIColor
  public var listItemCornerRadius: CometChatUIKitSwift.CometChatCornerStyle
  public init()
}
@_inheritsConvenienceInitializers public class CollaborativeDocumentViewModel : CometChatUIKitSwift.DataSourceDecorator {
  override public init(dataSource: any CometChatUIKitSwift.DataSource)
  override public func getId() -> Swift.String
  override public func getAllMessageTypes() -> [Swift.String]?
  override public func getAllMessageCategories() -> [Swift.String]?
  override public func getAllMessageTemplates(additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration?) -> [CometChatUIKitSwift.CometChatMessageTemplate]
  override public func getAttachmentOptions(controller: UIKit.UIViewController, user: CometChatSDK.User?, group: CometChatSDK.Group?, id: [Swift.String : Any]?, additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration = AdditionalConfiguration()) -> [CometChatUIKitSwift.CometChatMessageComposerAction]?
  override public func getLastConversationMessage(conversation: CometChatSDK.Conversation, additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration?) -> Foundation.NSAttributedString?
  override public func getMessageTemplate(messageType: Swift.String, messageCategory: Swift.String, additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration?) -> CometChatUIKitSwift.CometChatMessageTemplate?
  public func getTemplate(additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration?) -> CometChatUIKitSwift.CometChatMessageTemplate
  public func getContentView(_customMessage: CometChatSDK.CustomMessage, controller: UIKit.UIViewController?, additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration?) -> UIKit.UIView?
  public func getAttachmentOption(controller: UIKit.UIViewController?, user: CometChatSDK.User?, group: CometChatSDK.Group?) -> CometChatUIKitSwift.CometChatMessageComposerAction?
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class RadioButtonElement : CometChatUIKitSwift.ElementEntity {
  @objc public var optional: Swift.Bool
  @objc public var label: Swift.String
  @objc public var defaultValue: Swift.String
  @objc public var options: [CometChatUIKitSwift.OptionElement]
  @objc override dynamic public init()
  @objc public static func radioButtonElementFromJSON(_ data: [Swift.String : Any]) -> CometChatUIKitSwift.RadioButtonElement?
  public func toJSON() -> [Swift.String : Any]
  @objc deinit
}
@_hasMissingDesignatedInitializers public class CometChatStickerSet {
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class DownloadableCircularProgressBar : CometChatUIKitSwift.CircularProgressBar {
  @_Concurrency.MainActor @preconcurrency public var downloadImage: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var downloadImageView: UIKit.UIImageView {
    get
    set
  }
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func on(downloadClicked: @escaping (() -> ())) -> Self
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class CircularProgressBar : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public var cancelImage: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var cancelImageView: UIKit.UIImageView {
    get
    set
  }
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func on(cancelClicked: @escaping (() -> ())) -> Self
  @_Concurrency.MainActor @preconcurrency public func observeDownloadProgress(for task: Foundation.URLSessionDownloadTask)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func observeValue(forKeyPath keyPath: Swift.String?, of object: Any?, change: [Foundation.NSKeyValueChangeKey : Any]?, context: Swift.UnsafeMutableRawPointer?)
  @_Concurrency.MainActor @preconcurrency public func setTapCallback(callback: @escaping () -> Swift.Void)
  @objc deinit
}
extension CometChatUIKitSwift.CometChatConversations {
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(onItemClick: @escaping ((_ conversation: CometChatSDK.Conversation, _ indexPath: Foundation.IndexPath) -> Swift.Void)) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(onItemLongClick: @escaping ((_ conversation: CometChatSDK.Conversation, _ indexPath: Foundation.IndexPath) -> Swift.Void)) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(onSelection: @escaping ((_ conversation: [CometChatSDK.Conversation]) -> Swift.Void)) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(onError: @escaping ((_ error: CometChatSDK.CometChatException) -> Swift.Void)) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(onLoad: @escaping ((_ conversation: [CometChatSDK.Conversation]) -> Swift.Void)) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(onEmpty: @escaping (() -> Swift.Void)) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(textFormatters: [CometChatUIKitSwift.CometChatTextFormatter]) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(datePattern: @escaping ((_ conversation: CometChatSDK.Conversation) -> Swift.String)) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(options: ((_ conversation: CometChatSDK.Conversation?) -> [CometChatUIKitSwift.CometChatConversationOption])?) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func add(options: ((_ conversation: CometChatSDK.Conversation?) -> [CometChatUIKitSwift.CometChatConversationOption])?) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(customSoundForMessages: Foundation.URL) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(listItemView: @escaping ((_ conversation: CometChatSDK.Conversation) -> UIKit.UIView)) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(trailView: @escaping ((_ conversation: CometChatSDK.Conversation) -> UIKit.UIView)) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(subtitleView: @escaping ((_ conversation: CometChatSDK.Conversation) -> UIKit.UIView)) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(leadingView: @escaping ((_ conversation: CometChatSDK.Conversation) -> UIKit.UIView)) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(titleView: @escaping ((_ conversation: CometChatSDK.Conversation) -> UIKit.UIView)) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(conversationRequestBuilder: CometChatSDK.ConversationRequest.ConversationRequestBuilder) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func insert(conversation: CometChatSDK.Conversation, at: Swift.Int) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func getSelectedConversations() -> [CometChatSDK.Conversation]
  @_Concurrency.MainActor @preconcurrency public func getConversationList() -> [CometChatSDK.Conversation]
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class TimeSlotView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init(coder: Foundation.NSCoder)
  @objc deinit
}
extension CometChatUIKitSwift.TimeSlotView {
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(controller: UIKit.UIViewController?) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(style: CometChatUIKitSwift.SchedulerBubbleStyle?) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(message: CometChatUIKitSwift.SchedulerMessage?) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(onBackButtonClicked: (() -> ())?) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(onTimeSelected: ((CometChatUIKitSwift.TimeRange, Foundation.Date) -> ())?) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(date: Foundation.Date?) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(unavailableTimeRange: [Swift.String : [CometChatUIKitSwift.TimeRange]]?) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(isTableViewUpdating: ((Swift.Bool) -> ())?) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func build() -> Self
}
@_hasMissingDesignatedInitializers public class CometChatTypingIndicator {
  public static var style: CometChatUIKitSwift.TypingIndicatorStyle
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class CometChatAISmartRepliesShimmer : CometChatUIKitSwift.CometChatShimmerView {
  @_Concurrency.MainActor @preconcurrency public var cellCount: Swift.Int
  @_Concurrency.MainActor @preconcurrency override open func buildUI()
  @_Concurrency.MainActor @preconcurrency override open func startShimmer()
  @_Concurrency.MainActor @preconcurrency override open func stopShimmer()
  @_Concurrency.MainActor @preconcurrency @objc override open func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc override open func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init()
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class CometChatVideoBubble : UIKit.UIStackView {
  @_Concurrency.MainActor @preconcurrency public var placeHolderImageView: UIKit.UIImageView {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var activityIndicator: UIKit.UIActivityIndicatorView {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var playImageView: UIKit.UIImageView {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var playView: UIKit.UIView {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var playImage: UIKit.UIImage?
  @_Concurrency.MainActor @preconcurrency public var defaultThumbnailImage: UIKit.UIImage {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func willMove(toWindow newWindow: UIKit.UIWindow?)
  @_Concurrency.MainActor @preconcurrency public func buildUI()
  @_Concurrency.MainActor @preconcurrency public func setUpStyle()
  @_Concurrency.MainActor @preconcurrency public func set(thumnailImageUrl: Swift.String, sentAt: Swift.Double? = nil)
  @_Concurrency.MainActor @preconcurrency public func set(videoURL: Swift.String)
  @_Concurrency.MainActor @preconcurrency public func set(placeholderImage: UIKit.UIImage)
  @_Concurrency.MainActor @preconcurrency public func onClick(onClick: (() -> Swift.Void)?)
  @_Concurrency.MainActor @preconcurrency public func set(controller: UIKit.UIViewController)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class CustomInteractiveMessage : CometChatSDK.InteractiveMessage {
  @objc override dynamic public init()
  public static func toCustomInteractiveMessage(_ interactiveMessage: CometChatSDK.InteractiveMessage) -> CometChatUIKitSwift.CustomInteractiveMessage
  public static func interactiveMessage(from customInteractiveMessage: CometChatUIKitSwift.CustomInteractiveMessage) -> CometChatSDK.InteractiveMessage
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class ListModeCell : UIKit.UITableViewCell {
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(actionItem: CometChatUIKitSwift.ActionItem) -> CometChatUIKitSwift.ListModeCell
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @available(iOS 3.0, *)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public struct OutgoingCallStyle {
  public var backgroundColor: UIKit.UIColor
  public var borderColor: UIKit.UIColor
  public var borderWidth: CoreFoundation.CGFloat
  public var cornerRadius: CometChatUIKitSwift.CometChatCornerStyle
  public var nameTextColor: UIKit.UIColor
  public var nameTextFont: UIKit.UIFont
  public var callTextColor: UIKit.UIColor
  public var callTextFont: UIKit.UIFont
  public var declineButtonBackgroundColor: UIKit.UIColor
  public var declineButtonIconTint: UIKit.UIColor
  public var declineButtonIcon: UIKit.UIImage?
  public var declineButtonCornerRadius: CometChatUIKitSwift.CometChatCornerStyle?
  public var declineButtonBorderWidth: CoreFoundation.CGFloat
  public var declineButtonBorderColor: UIKit.UIColor
  public init()
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class CometChatMessageTranslationBubble : UIKit.UIView, MessageUI.MFMailComposeViewControllerDelegate {
  @_Concurrency.MainActor @preconcurrency weak public var controller: UIKit.UIViewController?
  @_Concurrency.MainActor @preconcurrency public var style: CometChatUIKitSwift.MessageTranslationBubbleStyle
  @_Concurrency.MainActor @preconcurrency final public let originalMessageLabel: CometChatUIKitSwift.HyperlinkLabel
  @_Concurrency.MainActor @preconcurrency final public let translatedMessageLabel: CometChatUIKitSwift.HyperlinkLabel
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func willMove(toWindow newWindow: UIKit.UIWindow?)
  @_Concurrency.MainActor @preconcurrency public func set(originalMessage: Foundation.NSAttributedString, translatedMessage: Foundation.NSAttributedString?)
  @objc deinit
}
public enum SearchState {
  case clear
  case filter
  public static func == (a: CometChatUIKitSwift.SearchState, b: CometChatUIKitSwift.SearchState) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class CometChatListBase : UIKit.UIViewController, CometChatUIKitSwift.StateManagement {
  @_Concurrency.MainActor @preconcurrency public var tableView: UIKit.UITableView!
  @_Concurrency.MainActor @preconcurrency public var searchController: UIKit.UISearchController {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var hideNavigationBar: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public var hideSearch: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var loadingView: UIKit.UIView!
  @_Concurrency.MainActor @preconcurrency public var emptyStateView: UIKit.UIView {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var emptyStateImage: UIKit.UIImage {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var emptyStateTitleText: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var emptyStateSubTitleText: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var disableEmptyState: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public var errorStateView: UIKit.UIView {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var errorStateImage: UIKit.UIImage {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var errorStateTitleText: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var errorStateSubTitleText: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var hideErrorView: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public var isErrorStateVisible: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public var selectionMode: CometChatUIKitSwift.SelectionMode {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var leftBarButtonItem: [UIKit.UIBarButtonItem]
  @_Concurrency.MainActor @preconcurrency public var rightBarButtonItem: [UIKit.UIBarButtonItem]
  @_Concurrency.MainActor @preconcurrency public var navigationTitleText: Swift.String
  @_Concurrency.MainActor @preconcurrency public var isNavigationTranslucent: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public var hideBackButton: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public var hideLoadingState: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public var prefersLargeTitles: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public var refreshControl: UIKit.UIRefreshControl {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency open func buildUI()
  @_Concurrency.MainActor @preconcurrency open func onSearch(state: CometChatUIKitSwift.SearchState, text: Swift.String)
  @_Concurrency.MainActor @preconcurrency open func reload()
  @_Concurrency.MainActor @preconcurrency open func registerCellWith(title: Swift.String)
  @_Concurrency.MainActor @preconcurrency open func setupTableView(style: UIKit.UITableView.Style = .plain, withRefreshControl: Swift.Bool = false)
  @_Concurrency.MainActor @preconcurrency open func setGradientBackground(withColors: [CoreGraphics.CGColor])
  @_Concurrency.MainActor @preconcurrency open func showFooterIndicator()
  @_Concurrency.MainActor @preconcurrency open func hideFooterIndicator()
  @_Concurrency.MainActor @preconcurrency open func showLoadingView()
  @_Concurrency.MainActor @preconcurrency open func removeLoadingView()
  @_Concurrency.MainActor @preconcurrency open func showEmptyView()
  @_Concurrency.MainActor @preconcurrency open func showErrorView()
  @_Concurrency.MainActor @preconcurrency open func removeErrorView()
  @_Concurrency.MainActor @preconcurrency open func removeEmptyView()
  @_Concurrency.MainActor @preconcurrency open func setupStyle()
  @_Concurrency.MainActor @preconcurrency open func styleSearchBar()
  @_Concurrency.MainActor @preconcurrency open func setupSearchBar()
  @_Concurrency.MainActor @preconcurrency open func setupNavigationBar()
  @_Concurrency.MainActor @preconcurrency open func styleNavigationBar()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension CometChatUIKitSwift.CometChatListBase : UIKit.UISearchBarDelegate, UIKit.UISearchResultsUpdating {
  @_Concurrency.MainActor @preconcurrency @objc dynamic open func updateSearchResults(for searchController: UIKit.UISearchController)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func searchBarTextDidBeginEditing(_ searchBar: UIKit.UISearchBar)
}
extension CometChatUIKitSwift.CometChatListBase : UIKit.UITableViewDelegate, UIKit.UITableViewDataSource {
  @_Concurrency.MainActor @preconcurrency @objc dynamic open func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc dynamic open func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc dynamic open func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor @preconcurrency @objc dynamic open func tableView(_ tableView: UIKit.UITableView, heightForRowAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency @objc dynamic open func tableView(_ tableView: UIKit.UITableView, willSelectRowAt indexPath: Foundation.IndexPath) -> Foundation.IndexPath?
  @_Concurrency.MainActor @preconcurrency @objc dynamic open func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor @preconcurrency @objc dynamic open func tableView(_ tableView: UIKit.UITableView, didDeselectRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor @preconcurrency @objc dynamic open func tableView(_ tableView: UIKit.UITableView, trailingSwipeActionsConfigurationForRowAt indexPath: Foundation.IndexPath) -> UIKit.UISwipeActionsConfiguration?
  @_Concurrency.MainActor @preconcurrency @objc dynamic open func scrollViewWillBeginDecelerating(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor @preconcurrency @objc dynamic open func tableView(_ tableView: UIKit.UITableView, commit editingStyle: UIKit.UITableViewCell.EditingStyle, forRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor @preconcurrency @objc dynamic open func tableView(_ tableView: UIKit.UITableView, canEditRowAt indexPath: Foundation.IndexPath) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc dynamic open func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor @preconcurrency @objc dynamic open func scrollViewDidZoom(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor @preconcurrency @objc dynamic open func scrollViewWillBeginDragging(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor @preconcurrency @objc dynamic open func scrollViewWillEndDragging(_ scrollView: UIKit.UIScrollView, withVelocity velocity: CoreFoundation.CGPoint, targetContentOffset: Swift.UnsafeMutablePointer<CoreFoundation.CGPoint>)
  @_Concurrency.MainActor @preconcurrency @objc dynamic open func scrollViewDidEndDragging(_ scrollView: UIKit.UIScrollView, willDecelerate decelerate: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc dynamic open func scrollViewDidEndDecelerating(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor @preconcurrency @objc dynamic open func scrollViewDidEndScrollingAnimation(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor @preconcurrency @objc dynamic open func viewForZooming(in scrollView: UIKit.UIScrollView) -> UIKit.UIView?
  @_Concurrency.MainActor @preconcurrency @objc dynamic open func scrollViewWillBeginZooming(_ scrollView: UIKit.UIScrollView, with view: UIKit.UIView?)
  @_Concurrency.MainActor @preconcurrency @objc dynamic open func scrollViewDidEndZooming(_ scrollView: UIKit.UIScrollView, with view: UIKit.UIView?, atScale scale: CoreFoundation.CGFloat)
  @_Concurrency.MainActor @preconcurrency @objc dynamic open func scrollViewShouldScrollToTop(_ scrollView: UIKit.UIScrollView) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc dynamic open func scrollViewDidScrollToTop(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor @preconcurrency @objc dynamic open func scrollViewDidChangeAdjustedContentInset(_ scrollView: UIKit.UIScrollView)
}
extension CometChatUIKitSwift.CometChatListBase {
  @_Concurrency.MainActor @preconcurrency public func searchIsEmpty() -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency public func isSearching() -> Swift.Bool
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(selectionMode: CometChatUIKitSwift.SelectionMode) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(loadingView: UIKit.UIView) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(errorView: UIKit.UIView) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(emptyView: UIKit.UIView) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(onBack: @escaping (() -> Swift.Void)) -> Self
}
public protocol StateManagement {
  func showLoadingView()
  func showErrorView()
  func showEmptyView()
  func removeLoadingView()
  func removeErrorView()
  func removeEmptyView()
}
extension CometChatUIKitSwift.StateManagement {
  public func showLoadingView()
  public func showErrorView()
  public func showEmptyView()
  public func removeLoadingView()
  public func removeErrorView()
  public func removeEmptyView()
}
public struct AIConversationStarterStyle : CometChatUIKitSwift.AIParentStyle {
  public var errorViewTextFont: UIKit.UIFont?
  public var errorViewTextColor: UIKit.UIColor?
  public var emptyViewTextFont: UIKit.UIFont?
  public var emptyViewTextColor: UIKit.UIColor?
  public var textFont: UIKit.UIFont
  public var textColor: UIKit.UIColor
  public var borderWidth: CoreFoundation.CGFloat
  public var borderColor: UIKit.UIColor
  public var cornerRadius: CometChatUIKitSwift.CometChatCornerStyle?
  public var backgroundColor: UIKit.UIColor
  public var repliesTableViewSeparatorStyle: UIKit.UITableViewCell.SeparatorStyle?
}
public enum titleAlignment {
  case left
  case center
  public static func == (a: CometChatUIKitSwift.titleAlignment, b: CometChatUIKitSwift.titleAlignment) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_Concurrency.MainActor open class CometChatUsers : CometChatUIKitSwift.CometChatListBase {
  @_Concurrency.MainActor public var viewModel: CometChatUIKitSwift.UsersViewModel
  @_Concurrency.MainActor public var hideSectionHeader: Swift.Bool
  @_Concurrency.MainActor public static var style: CometChatUIKitSwift.UsersStyle
  @_Concurrency.MainActor public static var avatarStyle: CometChatUIKitSwift.AvatarStyle
  @_Concurrency.MainActor public static var statusIndicatorStyle: CometChatUIKitSwift.StatusIndicatorStyle
  @_Concurrency.MainActor public var style: CometChatUIKitSwift.UsersStyle {
    get
    set
  }
  @_Concurrency.MainActor public var avatarStyle: CometChatUIKitSwift.AvatarStyle {
    get
    set
  }
  @_Concurrency.MainActor public var statusIndicatorStyle: CometChatUIKitSwift.StatusIndicatorStyle {
    get
    set
  }
  @_Concurrency.MainActor public var selectionLimit: Swift.Int? {
    get
  }
  @_Concurrency.MainActor public var selectedCellCount: Swift.Int {
    get
    set
  }
  @_Concurrency.MainActor public var onSelectedItemProceed: ((_ user: [CometChatSDK.User]) -> Swift.Void)?
  @_Concurrency.MainActor public var onSelection: ((_ user: [CometChatSDK.User]) -> Swift.Void)?
  @_Concurrency.MainActor public var hideUserStatus: Swift.Bool
  @_Concurrency.MainActor public init(usersRequestBuilder: CometChatSDK.UsersRequest.UsersRequestBuilder = UsersBuilder.getDefaultRequestBuilder())
  @_Concurrency.MainActor @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor open func updateNavigationBarTitleWithCount()
  @objc @_Concurrency.MainActor open func tickButtonTapped()
  @objc @_Concurrency.MainActor open func crossButtonTapped()
  @_Concurrency.MainActor open func updateSelectedCellCount(isSelected: Swift.Bool)
  @_Concurrency.MainActor open func defaultSetup()
  @_Concurrency.MainActor override open func setupStyle()
  @_Concurrency.MainActor override open func styleSearchBar()
  @_Concurrency.MainActor open func fetchData()
  @_Concurrency.MainActor open func reloadData()
  @_Concurrency.MainActor open func setupViewModel()
  @_Concurrency.MainActor open func registerCells()
  @_Concurrency.MainActor override open func onSearch(state: CometChatUIKitSwift.SearchState, text: Swift.String)
  @discardableResult
  @_Concurrency.MainActor public func add(user: CometChatSDK.User) -> Self
  @discardableResult
  @_Concurrency.MainActor public func remove(user: CometChatSDK.User) -> Self
  @discardableResult
  @_Concurrency.MainActor public func update(user: CometChatSDK.User) -> Self
  @discardableResult
  @_Concurrency.MainActor public func onSelection(_ onSelection: @escaping ([CometChatSDK.User]) -> Swift.Void) -> Self
  @objc deinit
}
extension CometChatUIKitSwift.CometChatUsers {
  @_Concurrency.MainActor @objc override dynamic open func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor public func manageSelectionState(for user: CometChatSDK.User, in listItem: CometChatUIKitSwift.CometChatListItem, at indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor @objc override dynamic open func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
  @_Concurrency.MainActor @objc override dynamic open func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor @objc override dynamic open func tableView(_ tableView: UIKit.UITableView, heightForRowAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor @objc dynamic public func tableView(_ tableView: UIKit.UITableView, heightForHeaderInSection section: Swift.Int) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor @objc dynamic open func tableView(_ tableView: UIKit.UITableView, viewForHeaderInSection section: Swift.Int) -> UIKit.UIView?
  @_Concurrency.MainActor @objc override dynamic open func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor @objc override dynamic open func tableView(_ tableView: UIKit.UITableView, didDeselectRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor @objc dynamic open func tableView(_ tableView: UIKit.UITableView, willDisplay cell: UIKit.UITableViewCell, forRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor @objc override dynamic open func tableView(_ tableView: UIKit.UITableView, trailingSwipeActionsConfigurationForRowAt indexPath: Foundation.IndexPath) -> UIKit.UISwipeActionsConfiguration?
  @_Concurrency.MainActor public func getSelectedUsers() -> [CometChatSDK.User]
}
extension CometChatUIKitSwift.CometChatUsers : CometChatSDK.CometChatConnectionDelegate {
  @_Concurrency.MainActor @objc dynamic public func connected()
  @_Concurrency.MainActor @objc dynamic public func connecting()
  @_Concurrency.MainActor @objc dynamic public func disconnected()
}
@_hasMissingDesignatedInitializers public class CometChatGroupEvents {
  @objc public static func addListener(_ id: Swift.String, _ observer: any CometChatUIKitSwift.CometChatGroupEventListener)
  @objc public static func removeListener(_ id: Swift.String)
  public static func ccGroupCreated(group: CometChatSDK.Group)
  public static func ccGroupDeleted(group: CometChatSDK.Group)
  public static func ccGroupLeft(action: CometChatSDK.ActionMessage, leftUser: CometChatSDK.User, leftGroup: CometChatSDK.Group)
  public static func ccGroupMemberScopeChanged(action: CometChatSDK.ActionMessage, updatedUser: CometChatSDK.User, scopeChangedTo: Swift.String, scopeChangedFrom: Swift.String, group: CometChatSDK.Group)
  public static func ccGroupMemberBanned(action: CometChatSDK.ActionMessage, bannedUser: CometChatSDK.User, bannedBy: CometChatSDK.User, bannedFrom: CometChatSDK.Group)
  public static func ccGroupMemberKicked(action: CometChatSDK.ActionMessage, kickedUser: CometChatSDK.User, kickedBy: CometChatSDK.User, kickedFrom: CometChatSDK.Group)
  public static func ccGroupMemberUnbanned(action: CometChatSDK.ActionMessage, unbannedUser: CometChatSDK.User, unbannedBy: CometChatSDK.User, unbannedFrom: CometChatSDK.Group)
  public static func ccGroupMemberJoined(joinedUser: CometChatSDK.User, joinedGroup: CometChatSDK.Group)
  public static func ccGroupMemberAdded(messages: [CometChatSDK.ActionMessage], usersAdded: [CometChatSDK.User], groupAddedIn: CometChatSDK.Group, addedBy: CometChatSDK.User)
  public static func ccOwnershipChanged(group: CometChatSDK.Group, newOwner: CometChatSDK.GroupMember)
  @available(*, deprecated, message: "Use ccGroupCreated(group:) instead")
  public static func emitOnGroupCreate(group: CometChatSDK.Group)
  @available(*, deprecated)
  public static func emitOnCreateGroupClick()
  @available(*, deprecated, message: "Use ccGroupDeleted(group:) instead")
  public static func emitOnGroupDelete(group: CometChatSDK.Group)
  @available(*, deprecated, message: "Use ccGroupLeft(action:leftUser:leftGroup:) instead")
  public static func emitOnGroupMemberLeave(leftUser: CometChatSDK.User, leftGroup: CometChatSDK.Group)
  @available(*, deprecated, message: "Use ccGroupMemberScopeChanged(action:updatedUser:scopeChangedTo:scopeChangedFrom:group:) instead")
  public static func emitOnGroupMemberChangeScope(updatedBy: CometChatSDK.User, updatedUser: CometChatSDK.User, scopeChangedTo: CometChatSDK.CometChat.MemberScope, scopeChangedFrom: CometChatSDK.CometChat.MemberScope, group: CometChatSDK.Group)
  @available(*, deprecated, message: "Use ccGroupMemberBanned(action:bannedUser:bannedBy:bannedFrom:) instead")
  public static func emitOnGroupMemberBan(bannedUser: CometChatSDK.User, bannedGroup: CometChatSDK.Group, bannedBy: CometChatSDK.User)
  @available(*, deprecated, message: "Use ccGroupMemberKicked(action:kickedUser:kickedBy:kickedFrom:) instead")
  public static func emitOnGroupMemberKick(kickedUser: CometChatSDK.User, kickedGroup: CometChatSDK.Group, kickedBy: CometChatSDK.User)
  @available(*, deprecated, message: "Use ccGroupMemberUnbanned(action:unbannedUser:unbannedBy:unbannedFrom:) instead")
  public static func emitOnGroupMemberUnban(unbannedUserUser: CometChatSDK.User, unbannedUserGroup: CometChatSDK.Group, unbannedBy: CometChatSDK.User)
  @available(*, deprecated, message: "Use ccGroupMemberJoined(joinedUser:joinedGroup:) instead")
  public static func emitOnGroupMemberJoin(joinedUser: CometChatSDK.User, joinedGroup: CometChatSDK.Group)
  @available(*, deprecated, message: "Use ccGroupMemberAdded(messages:usersAdded:groupAddedIn:addedBy:) instead")
  public static func emitOnGroupMemberAdd(group: CometChatSDK.Group, members: [CometChatSDK.GroupMember], addedBy: CometChatSDK.User)
  @available(*, deprecated, message: "Use ccOwnershipChanged(group:newOwner:) instead")
  public static func emitOnOwnershipChange(group: CometChatSDK.Group?, member: CometChatSDK.GroupMember?)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class AIAssistBotExtension : CometChatUIKitSwift.ExtensionDataSource {
  public init(configuration: CometChatUIKitSwift.AIAssistBotConfiguration? = nil)
  override public func enable()
  override public func addExtension()
  override public func getExtensionId() -> Swift.String
  @objc deinit
}
extension CometChatSDK.CometChat.MessageType {
  public func toString() -> Swift.String
}
extension CometChatSDK.CometChat.MessageCategory {
  public func toString() -> Swift.String
}
@objc @_inheritsConvenienceInitializers public class DateTimeElement : CometChatUIKitSwift.ElementEntity {
  public var isOptional: Swift.Bool
  public var label: Swift.String
  public var defaultValue: Swift.Int?
  public var mode: CometChatUIKitSwift.DateTimePickerMode
  public var fromDateTime: Swift.Int
  public var toDateTime: Swift.Int
  public var dateTimeFormat: Swift.String
  public var timeZone: Swift.String
  @objc override dynamic public init()
  @objc public static func fromJson(_ data: [Swift.String : Any]) -> CometChatUIKitSwift.DateTimeElement
  public func toJSON() -> [Swift.String : Any]
  @objc deinit
}
public enum DateTimePickerMode {
  case dateTime
  case date
  case time
  public static func == (a: CometChatUIKitSwift.DateTimePickerMode, b: CometChatUIKitSwift.DateTimePickerMode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers final public class SmartRepliesStyle : CometChatUIKitSwift.BaseStyle {
  @discardableResult
  final public func set(textFont: UIKit.UIFont) -> Self
  @discardableResult
  final public func set(textColor: UIKit.UIColor) -> Self
  @discardableResult
  final public func set(textBackground: UIKit.UIColor) -> Self
  @discardableResult
  final public func set(borderRadius: CometChatUIKitSwift.CometChatCornerStyle) -> Self
  override public init()
  @objc deinit
}
@_inheritsConvenienceInitializers public class CollaborativeWhiteboardExtension : CometChatUIKitSwift.ExtensionDataSource {
  public init()
  override public func addExtension()
  override public func getExtensionId() -> Swift.String
  @objc deinit
}
extension CometChatUIKitSwift.CometChatMessageHeader {
  @discardableResult
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func set(user: CometChatSDK.User) -> CometChatUIKitSwift.CometChatMessageHeader
  @discardableResult
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func set(group: CometChatSDK.Group) -> CometChatUIKitSwift.CometChatMessageHeader
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(onError: @escaping ((_ error: CometChatSDK.CometChatException) -> Swift.Void)) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(onBack: @escaping (() -> Swift.Void)) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(listItemView: @escaping ((_ user: CometChatSDK.User?, _ group: CometChatSDK.Group?) -> UIKit.UIView)) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(trailView: @escaping ((_ user: CometChatSDK.User?, _ group: CometChatSDK.Group?) -> UIKit.UIView)) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(subtitleView: @escaping ((_ user: CometChatSDK.User?, _ group: CometChatSDK.Group?) -> UIKit.UIView)) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(leadingView: @escaping ((_ user: CometChatSDK.User?, _ group: CometChatSDK.Group?) -> UIKit.UIView)) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(titleView: @escaping ((_ user: CometChatSDK.User?, _ group: CometChatSDK.Group?) -> UIKit.UIView)) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(controller: UIKit.UIViewController) -> Self
}
@_hasMissingDesignatedInitializers public class CometChatSpacing {
  @_hasMissingDesignatedInitializers public class Radius {
    public static var r: Swift.Double {
      get
      set
    }
    public static var r1: Swift.Double {
      get
      set
    }
    public static var r2: Swift.Double {
      get
      set
    }
    public static var r3: Swift.Double {
      get
      set
    }
    public static var r4: Swift.Double {
      get
      set
    }
    public static var r5: Swift.Double {
      get
      set
    }
    public static var r6: Swift.Double {
      get
      set
    }
    public static var rMax: Swift.Double {
      get
      set
    }
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class Padding {
    public static var p: Swift.Double {
      get
      set
    }
    public static var p1: Swift.Double {
      get
      set
    }
    public static var p2: Swift.Double {
      get
      set
    }
    public static var p3: Swift.Double {
      get
      set
    }
    public static var p4: Swift.Double {
      get
      set
    }
    public static var p5: Swift.Double {
      get
      set
    }
    public static var p6: Swift.Double {
      get
      set
    }
    public static var p7: Swift.Double {
      get
      set
    }
    public static var p8: Swift.Double {
      get
      set
    }
    public static var p9: Swift.Double {
      get
      set
    }
    public static var p10: Swift.Double {
      get
      set
    }
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class Margin {
    public static var m: Swift.Double {
      get
      set
    }
    public static var m1: Swift.Double {
      get
      set
    }
    public static var m2: Swift.Double {
      get
      set
    }
    public static var m3: Swift.Double {
      get
      set
    }
    public static var m4: Swift.Double {
      get
      set
    }
    public static var m5: Swift.Double {
      get
      set
    }
    public static var m6: Swift.Double {
      get
      set
    }
    public static var m7: Swift.Double {
      get
      set
    }
    public static var m8: Swift.Double {
      get
      set
    }
    public static var m9: Swift.Double {
      get
      set
    }
    public static var m10: Swift.Double {
      get
      set
    }
    public static var m11: Swift.Double {
      get
      set
    }
    public static var m12: Swift.Double {
      get
      set
    }
    public static var m13: Swift.Double {
      get
      set
    }
    public static var m14: Swift.Double {
      get
      set
    }
    public static var m15: Swift.Double {
      get
      set
    }
    public static var m16: Swift.Double {
      get
      set
    }
    public static var m17: Swift.Double {
      get
      set
    }
    public static var m18: Swift.Double {
      get
      set
    }
    public static var m19: Swift.Double {
      get
      set
    }
    public static var m20: Swift.Double {
      get
      set
    }
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class Spacing {
    public static var s: Swift.Double
    public static var s1: Swift.Double
    public static var s2: Swift.Double
    public static var s3: Swift.Double
    public static var s4: Swift.Double
    public static var s5: Swift.Double
    public static var s6: Swift.Double
    public static var s7: Swift.Double
    public static var s8: Swift.Double
    public static var s9: Swift.Double
    public static var s10: Swift.Double
    public static var s11: Swift.Double
    public static var s12: Swift.Double
    public static var s13: Swift.Double
    public static var s14: Swift.Double
    public static var s15: Swift.Double
    public static var s16: Swift.Double
    public static var s17: Swift.Double
    public static var s18: Swift.Double
    public static var s19: Swift.Double
    public static var s20: Swift.Double
    public static var sMax: Swift.Double
    @objc deinit
  }
  @objc deinit
}
public struct MessageComposerStyle {
  public var placeHolderTextFont: UIKit.UIFont
  public var placeHolderTextColor: UIKit.UIColor
  public var textFiledColor: UIKit.UIColor
  public var textFiledFont: UIKit.UIFont
  public var backgroundColor: UIKit.UIColor
  public var cornerRadius: CometChatUIKitSwift.CometChatCornerStyle?
  public var borderWidth: CoreFoundation.CGFloat
  public var borderColor: UIKit.UIColor
  public var sendButtonImage: UIKit.UIImage
  public var sendButtonImageTint: UIKit.UIColor
  public var activeSendButtonImageBackgroundColor: UIKit.UIColor
  public var inactiveSendButtonImageBackgroundColor: UIKit.UIColor
  public var composeBoxBackgroundColor: UIKit.UIColor
  public var composeBoxBorderColor: UIKit.UIColor
  public var composeBoxBorderWidth: CoreFoundation.CGFloat
  public var composerBoxCornerRadius: CometChatUIKitSwift.CometChatCornerStyle
  public var composerSeparatorColor: UIKit.UIColor
  public var attachmentImage: UIKit.UIImage
  public var attachmentImageTint: UIKit.UIColor
  public var voiceRecordingImage: UIKit.UIImage
  public var voiceRecordingImageTint: UIKit.UIColor
  public var aiImage: UIKit.UIImage
  public var aiImageTint: UIKit.UIColor
  public var stickerImage: UIKit.UIImage
  public var stickerTint: UIKit.UIColor
  public var editPreviewTitleTextFont: UIKit.UIFont
  public var editPreviewMessageTextFont: UIKit.UIFont
  public var editPreviewTitleTextColor: UIKit.UIColor
  public var editPreviewMessageTextColor: UIKit.UIColor
  public var editPreviewBackgroundColor: UIKit.UIColor
  public var editPreviewCornerRadius: CometChatUIKitSwift.CometChatCornerStyle
  public var editPreviewBorderColor: UIKit.UIColor
  public var editPreviewBorderWidth: CoreFoundation.CGFloat
  public var editPreviewCloseIcon: UIKit.UIImage
  public var editPreviewCloseIconTint: UIKit.UIColor
  public var infoIcon: UIKit.UIImage
  public var infoIconTint: UIKit.UIColor
  public var infoTextColor: UIKit.UIColor
  public var infoTextFont: UIKit.UIFont
  public var infoSeparatorColor: UIKit.UIColor
  public var infoBackgroundColor: UIKit.UIColor
  public var infoCornerRadius: CometChatUIKitSwift.CometChatCornerStyle
  public var infoBorderColor: UIKit.UIColor
  public var infoBorderWidth: CoreFoundation.CGFloat
  public init()
}
public protocol HyperlinkLabelDelegate : AnyObject {
  func didSelect(_ text: Swift.String, type: CometChatUIKitSwift.HyperlinkType)
}
public typealias ConfigureLinkAttribute = (CometChatUIKitSwift.HyperlinkType, [Foundation.NSAttributedString.Key : Any], Swift.Bool) -> ([Foundation.NSAttributedString.Key : Any])
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor @preconcurrency public class HyperlinkLabel : UIKit.UILabel {
  @_Concurrency.MainActor @preconcurrency weak public var delegate: (any CometChatUIKitSwift.HyperlinkLabelDelegate)?
  @_Concurrency.MainActor @preconcurrency public var enabledTypes: [CometChatUIKitSwift.HyperlinkType]
  @_Concurrency.MainActor @preconcurrency public var urlMaximumLength: Swift.Int?
  @_Concurrency.MainActor @preconcurrency public var configureLinkAttribute: CometChatUIKitSwift.ConfigureLinkAttribute?
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var mentionColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var mentionSelectedColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var hashtagColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var hashtagSelectedColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var URLColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var URLSelectedColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency public var customColor: [CometChatUIKitSwift.HyperlinkType : UIKit.UIColor]
  @_Concurrency.MainActor @preconcurrency public var addUnderline: [CometChatUIKitSwift.HyperlinkType : Swift.Bool]
  @_Concurrency.MainActor @preconcurrency public var customFont: [CometChatUIKitSwift.HyperlinkType : UIKit.UIFont]
  @_Concurrency.MainActor @preconcurrency public var customAttributes: [Foundation.NSRange : [Foundation.NSAttributedString.Key : Any]]
  @_Concurrency.MainActor @preconcurrency public var customSelectedColor: [CometChatUIKitSwift.HyperlinkType : UIKit.UIColor] {
    get
    set
  }
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var lineSpacing: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var minimumLineHeight: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var highlightFontName: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency public var highlightFontSize: CoreFoundation.CGFloat? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public func handleMentionTap(_ handler: @escaping (Swift.String) -> ())
  @_Concurrency.MainActor @preconcurrency public func handleHashtagTap(_ handler: @escaping (Swift.String) -> ())
  @_Concurrency.MainActor @preconcurrency public func handleURLTap(_ handler: @escaping (Foundation.URL) -> ())
  @_Concurrency.MainActor @preconcurrency public func handleCustomTap(for type: CometChatUIKitSwift.HyperlinkType, handler: @escaping (Swift.String) -> ())
  @_Concurrency.MainActor @preconcurrency public func removeHandle(for type: CometChatUIKitSwift.HyperlinkType)
  @_Concurrency.MainActor @preconcurrency public func filterMention(_ predicate: @escaping (Swift.String) -> Swift.Bool)
  @_Concurrency.MainActor @preconcurrency public func filterHashtag(_ predicate: @escaping (Swift.String) -> Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var text: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var attributedText: Foundation.NSAttributedString? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var font: UIKit.UIFont! {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var textColor: UIKit.UIColor! {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var textAlignment: UIKit.NSTextAlignment {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var numberOfLines: Swift.Int {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var lineBreakMode: UIKit.NSLineBreakMode {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func drawText(in rect: CoreFoundation.CGRect)
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func customize(_ block: (_ label: CometChatUIKitSwift.HyperlinkLabel) -> ()) -> CometChatUIKitSwift.HyperlinkLabel
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func touchesBegan(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func touchesMoved(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func touchesCancelled(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func touchesEnded(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @objc deinit
}
extension CometChatUIKitSwift.HyperlinkLabel : UIKit.UIGestureRecognizerDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldRecognizeSimultaneouslyWith otherGestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldRequireFailureOf otherGestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldBeRequiredToFailBy otherGestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
}
public struct InteractiveConstants {
  public static var INTERACTIVE_MESSAGE_FORM_FIELD: Swift.String
  public static var INTERACTIVE_MESSAGE_SUBMIT_ELEMENT: Swift.String
  public static var TITLE: Swift.String
  public static var AVATAR_URL: Swift.String
  public static var GOAL_COMPELTION_TEXT: Swift.String
  public static var ELEMENT_TYPE: Swift.String
  public static var ELEMENT_ID: Swift.String
  public static var value: Swift.String
  public static var CARD_ACTIONS: Swift.String
  public static var IMAGE_URL: Swift.String
  public static var TEXT: Swift.String
  public static var BUFFER_TIME: Swift.String
  public static var MEETING_DURATION: Swift.String
  public static var AVAILABILITY: Swift.String
  public static var DATE_RANGE_START: Swift.String
  public static var DATE_RANGE_END: Swift.String
  public static var ICS_FILE_URL: Swift.String
  public static var SCHEDULE_ELEMENT: Swift.String
  public static var TIME_ZONE_CODE: Swift.String
  public static var DURATION: Swift.String
  public static var MEET_STARTED_AT: Swift.String
  public struct OptionElementConstants {
    public static var LABEL: Swift.String
    public static var VALUE: Swift.String
  }
  public struct ElementsType {
    public static var TEXT_INPUT: Swift.String
    public static var RADIO_BUTTON: Swift.String
    public static var LABEL: Swift.String
    public static var DROP_DOWN: Swift.String
    public static var CHECK_BOX: Swift.String
    public static var BUTTON: Swift.String
  }
  public struct TextInputUIConstants {
    public static var ENABLED: Swift.String
    public static var OPTIONAL: Swift.String
    public static var LABEL: Swift.String
    public static var MAX_LINES: Swift.String
    public static var PLACEHOLDER: Swift.String
    public static var PLACEHOLDER_TEXT: Swift.String
    public static var DEFAULT_VALUE: Swift.String
  }
  public struct RadioButtonUIConstants {
    public static var ENABLED: Swift.String
    public static var OPTIONAL: Swift.String
    public static var LABEL: Swift.String
    public static var OPTIONS: Swift.String
    public static var OPTION_ID: Swift.String
    public static var OPTION_VALUE: Swift.String
    public static var OPTION_SELECTED: Swift.String
    public static var DEFAULT_VALUE: Swift.String
  }
  public struct LabelUIConstants {
    public static var TEXT: Swift.String
  }
  public struct DropDownUIConstants {
    public static var ENABLED: Swift.String
    public static var OPTIONAL: Swift.String
    public static var LABEL: Swift.String
    public static var DEFAULT_OPTION: Swift.String
    public static var OPTIONS: Swift.String
    public static var OPTION_LABEL: Swift.String
    public static var OPTION_VALUE: Swift.String
    public static var DEFAULT_VALUE: Swift.String
  }
  public struct CheckBoxUIConstants {
    public static var ENABLED: Swift.String
    public static var OPTIONAL: Swift.String
    public static var LABEL: Swift.String
    public static var OPTIONS: Swift.String
    public static var OPTION_LABEL: Swift.String
    public static var OPTION_VALUE: Swift.String
    public static var OPTION_SELECTED: Swift.String
    public static var DEFAULT_VALUE: Swift.String
  }
  public struct SingleSelectUIConstants {
    public static var ENABLED: Swift.String
    public static var OPTIONAL: Swift.String
    public static var LABEL: Swift.String
    public static var DEFAULT_VALUE: Swift.String
    public static var OPTIONS: Swift.String
    public static var OPTION_LABEL: Swift.String
    public static var OPTION_VALUE: Swift.String
  }
  public struct ButtonUIConstants {
    public static var ENABLE: Swift.String
    public static var BUTTONTEXT: Swift.String
    public static var ACTION: Swift.String
    public static var ACTION_TYPE: Swift.String
    public static var ACTION_TYPE_: Swift.String
    public static var ACTION_URL: Swift.String
    public static var ACTION_PAYLOAD: Swift.String
    public static var ACTION_HEADERS: Swift.String
    public static var ACTION_DATA_KEY: Swift.String
    public static var METHOD: Swift.String
    public static var ACTION_API: Swift.String
    public static var DISABLE_AFTER_INTERACTED: Swift.String
    public static var APP_ID: Swift.String
    public static var REGION: Swift.String
    public static var TRIGGER: Swift.String
    public static var PAYLOAD: Swift.String
    public static var CONVERSATION_ID: Swift.String
    public static var SENDER: Swift.String
    public static var RECEIVER: Swift.String
    public static var RECEIVER_TYPE: Swift.String
    public static var MESSAGE_CATEGORY: Swift.String
    public static var MESSAGE_ID: Swift.String
    public static var INTERACTION_TIMEZONE_CODE: Swift.String
    public static var INTERACTED_BY: Swift.String
    public static var INTERACTED_ELEMENT_ID: Swift.String
    public static var MESSAGE_TYPE: Swift.String
    public static var UI_MESSAGE_INTERACTED: Swift.String
    public static var SCHEDULER_DATA: Swift.String
  }
  public struct DateTimeConstants {
    public static var VALUE: Swift.String
    public static var TIME_ZONE: Swift.String
    public static var OPTIONAL: Swift.String
    public static var LABEL: Swift.String
    public static var DEFAULT_VALUE: Swift.String
    public static var DATE_TIME_FORMATE: Swift.String
    public static var MODE: Swift.String
    public static var FROM: Swift.String
    public static var TO: Swift.String
    public static var ACTION_API: Swift.String
    public static var DISABLE_AFTER_INTERACTED: Swift.String
    public static var APP_ID: Swift.String
    public static var REGION: Swift.String
    public static var TRIGGER: Swift.String
    public static var PAYLOAD: Swift.String
    public static var CONVERSATION_ID: Swift.String
    public static var SENDER: Swift.String
    public static var RECEIVER: Swift.String
    public static var RECEIVER_TYPE: Swift.String
    public static var MESSAGE_CATEGORY: Swift.String
    public static var MESSAGE_ID: Swift.String
    public static var INTERACTION_TIMEZONE_CODE: Swift.String
    public static var INTERACTED_BY: Swift.String
    public static var INTERACTED_ELEMENT_ID: Swift.String
    public static var MESSAGE_TYPE: Swift.String
    public static var UI_MESSAGE_INTERACTED: Swift.String
    public static var SCHEDULER_DATA: Swift.String
  }
}
extension CometChatUIKitSwift.CometChatMessageList {
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(user: CometChatSDK.User, parentMessage: CometChatSDK.BaseMessage? = nil) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(group: CometChatSDK.Group, parentMessage: CometChatSDK.BaseMessage? = nil) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(messagesRequestBuilder: CometChatSDK.MessagesRequest.MessageRequestBuilder) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(templates: [CometChatUIKitSwift.CometChatMessageTemplate]) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func add(templates: [CometChatUIKitSwift.CometChatMessageTemplate]) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(reactionsRequestBuilder: CometChatSDK.ReactionsRequestBuilder) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(parentMessageId: Swift.Int) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(onReactionClick: ((_ reaction: CometChatSDK.ReactionCount, _ baseMessage: CometChatSDK.BaseMessage?) -> ())?) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(onReactionListItemClick: ((_ messageReaction: CometChatSDK.Reaction, _ baseMessage: CometChatSDK.BaseMessage?) -> ())?) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(onThreadRepliesClick: ((_ message: CometChatSDK.BaseMessage, _ template: CometChatUIKitSwift.CometChatMessageTemplate) -> ())?) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(onError: @escaping ((_ error: CometChatSDK.CometChatException) -> Swift.Void)) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(onLoad: @escaping (([CometChatSDK.BaseMessage]) -> Swift.Void)) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(onEmpty: @escaping (() -> Swift.Void)) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(textFormatters: [CometChatUIKitSwift.CometChatTextFormatter]) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(customSoundForMessages: Foundation.URL) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(datePattern: ((_ timestamp: Swift.Int?) -> Swift.String)?) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(timePattern: ((_ timestamp: Swift.Int?) -> Swift.String)?) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(dateSeparatorPattern: ((_ timestamp: Swift.Int?) -> Swift.String)?) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func scrollToBottom(isAnimated: Swift.Bool = true) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(messageAlignment: CometChatUIKitSwift.MessageListAlignment) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(smartRepliesKeywords: [Swift.String]) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(smartRepliesDelayDuration: Swift.Int) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(headerView: UIKit.UIView?) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func clear(headerView: Swift.Bool) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(footerView: UIKit.UIView) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func clear(footerView: Swift.Bool) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(loadingView: UIKit.UIView) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(errorView: UIKit.UIView) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(emptyView: UIKit.UIView) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(controller: UIKit.UIViewController) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func connect() -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func disconnect() -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func add(message: CometChatSDK.BaseMessage) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func update(message: CometChatSDK.BaseMessage) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func remove(message: CometChatSDK.BaseMessage) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func delete(message: CometChatSDK.BaseMessage) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func didMessageInformationClicked(message: CometChatSDK.BaseMessage) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func clearList() -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func isEmpty() -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency public func scrollToLastVisibleCell()
  @_Concurrency.MainActor @preconcurrency public func getAdditionalConfiguration() -> CometChatUIKitSwift.AdditionalConfiguration
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class PanModalPresentationController : UIKit.UIPresentationController {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var presentedView: UIKit.UIView {
    @objc get
  }
  @objc deinit
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func containerViewWillLayoutSubviews()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func presentationTransitionWillBegin()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func presentationTransitionDidEnd(_ completed: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func dismissalTransitionWillBegin()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func dismissalTransitionDidEnd(_ completed: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewWillTransition(to size: CoreFoundation.CGSize, with coordinator: any UIKit.UIViewControllerTransitionCoordinator)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(presentedViewController: UIKit.UIViewController, presenting presentingViewController: UIKit.UIViewController?)
}
extension CometChatUIKitSwift.PanModalPresentationController : UIKit.UIGestureRecognizerDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldBeRequiredToFailBy otherGestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldRecognizeSimultaneouslyWith otherGestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
}
public struct TypingIndicatorStyle {
  public var textColor: UIKit.UIColor
  public var textFont: UIKit.UIFont
  public init()
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class CometChatAIConversationSummaryShimmer : CometChatUIKitSwift.CometChatShimmerView {
  @_Concurrency.MainActor @preconcurrency public var cellCount: Swift.Int
  @_Concurrency.MainActor @preconcurrency override open func buildUI()
  @_Concurrency.MainActor @preconcurrency override open func startShimmer()
  @_Concurrency.MainActor @preconcurrency override open func stopShimmer()
  @_Concurrency.MainActor @preconcurrency @objc override open func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc override open func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init()
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class GIFImageView : UIKit.UIImageView {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(image: UIKit.UIImage?)
  @available(iOS 3.0, *)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(image: UIKit.UIImage?, highlightedImage: UIKit.UIImage?)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class CometChatTheme {
  public static var primaryColor: UIKit.UIColor {
    get
    set
  }
  public static var white: UIKit.UIColor
  public static var black: UIKit.UIColor
  public static var extendedPrimaryColor50: UIKit.UIColor
  public static var extendedPrimaryColor100: UIKit.UIColor
  public static var extendedPrimaryColor200: UIKit.UIColor
  public static var extendedPrimaryColor300: UIKit.UIColor
  public static var extendedPrimaryColor400: UIKit.UIColor
  public static var extendedPrimaryColor500: UIKit.UIColor
  public static var extendedPrimaryColor600: UIKit.UIColor
  public static var extendedPrimaryColor700: UIKit.UIColor
  public static var extendedPrimaryColor800: UIKit.UIColor
  public static var extendedPrimaryColor900: UIKit.UIColor
  public static var neutralColor50: UIKit.UIColor
  public static var neutralColor100: UIKit.UIColor
  public static var neutralColor200: UIKit.UIColor
  public static var neutralColor300: UIKit.UIColor
  public static var neutralColor400: UIKit.UIColor
  public static var neutralColor500: UIKit.UIColor
  public static var neutralColor600: UIKit.UIColor
  public static var neutralColor700: UIKit.UIColor
  public static var neutralColor800: UIKit.UIColor
  public static var neutralColor900: UIKit.UIColor
  public static var backgroundColor01: UIKit.UIColor {
    get
    set
  }
  public static var backgroundColor02: UIKit.UIColor {
    get
    set
  }
  public static var backgroundColor03: UIKit.UIColor {
    get
    set
  }
  public static var backgroundColor04: UIKit.UIColor {
    get
    set
  }
  public static var borderColorDefault: UIKit.UIColor {
    get
    set
  }
  public static var borderColorLight: UIKit.UIColor {
    get
    set
  }
  public static var borderColorDark: UIKit.UIColor {
    get
    set
  }
  public static var borderColorHighlight: UIKit.UIColor {
    get
    set
  }
  public static var textColorPrimary: UIKit.UIColor {
    get
    set
  }
  public static var textColorSecondary: UIKit.UIColor {
    get
    set
  }
  public static var textColorTertiary: UIKit.UIColor {
    get
    set
  }
  public static var textColorDisabled: UIKit.UIColor {
    get
    set
  }
  public static var textColorWhite: UIKit.UIColor {
    get
    set
  }
  public static var textColorHighlight: UIKit.UIColor {
    get
    set
  }
  public static var iconColorPrimary: UIKit.UIColor {
    get
    set
  }
  public static var iconColorSecondary: UIKit.UIColor {
    get
    set
  }
  public static var iconColorTertiary: UIKit.UIColor {
    get
    set
  }
  public static var iconColorWhite: UIKit.UIColor {
    get
    set
  }
  public static var iconColorHighlight: UIKit.UIColor {
    get
    set
  }
  public static var messageReadColor: UIKit.UIColor
  public static var infoColor: UIKit.UIColor
  public static var warningColor: UIKit.UIColor
  public static var successColor: UIKit.UIColor
  public static var errorColor: UIKit.UIColor
  public static var buttonBackgroundColor: UIKit.UIColor {
    get
    set
  }
  public static var buttonIconColor: UIKit.UIColor
  public static var buttonTextColor: UIKit.UIColor
  public static var secondaryButtonBackgroundColor: UIKit.UIColor {
    get
    set
  }
  public static var secondaryButtonIconColor: UIKit.UIColor {
    get
    set
  }
  public static var secondaryButtonTextColor: UIKit.UIColor {
    get
    set
  }
  public static var fabButtonBackgroundColor: UIKit.UIColor {
    get
    set
  }
  public static var fabButtonIconColor: UIKit.UIColor
  public static var whiteHoverColor: UIKit.UIColor {
    get
    set
  }
  @objc deinit
}
extension CometChatUIKitSwift.CometChatMessageComposer : UIKit.UITextViewDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func textViewShouldBeginEditing(_ textView: UIKit.UITextView) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func textView(_ textView: UIKit.UITextView, shouldChangeTextIn range: Foundation.NSRange, replacementText text: Swift.String) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func textViewDidChangeSelection(_ textView: UIKit.UITextView)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func textViewDidChange(_ textView: UIKit.UITextView)
}
public struct GroupActionBubbleStyle {
  public var backgroundColor: UIKit.UIColor
  public var backgroundDrawable: UIKit.UIImage?
  public var borderWidth: CoreFoundation.CGFloat
  public var borderColor: UIKit.UIColor
  public var cornerRadius: CometChatUIKitSwift.CometChatCornerStyle?
  public var bubbleTextFont: UIKit.UIFont
  public var bubbleTextColor: UIKit.UIColor
  public init()
}
@objc public protocol CometChatGroupEventListener {
  @objc optional func ccGroupCreated(group: CometChatSDK.Group)
  @objc optional func ccGroupDeleted(group: CometChatSDK.Group)
  @objc optional func ccGroupLeft(action: CometChatSDK.ActionMessage, leftUser: CometChatSDK.User, leftGroup: CometChatSDK.Group)
  @objc optional func ccGroupMemberScopeChanged(action: CometChatSDK.ActionMessage, updatedUser: CometChatSDK.User, scopeChangedTo: Swift.String, scopeChangedFrom: Swift.String, group: CometChatSDK.Group)
  @objc optional func ccGroupMemberBanned(action: CometChatSDK.ActionMessage, bannedUser: CometChatSDK.User, bannedBy: CometChatSDK.User, bannedFrom: CometChatSDK.Group)
  @objc optional func ccGroupMemberKicked(action: CometChatSDK.ActionMessage, kickedUser: CometChatSDK.User, kickedBy: CometChatSDK.User, kickedFrom: CometChatSDK.Group)
  @objc optional func ccGroupMemberUnbanned(action: CometChatSDK.ActionMessage, unbannedUser: CometChatSDK.User, unbannedBy: CometChatSDK.User, unbannedFrom: CometChatSDK.Group)
  @objc optional func ccGroupMemberJoined(joinedUser: CometChatSDK.User, joinedGroup: CometChatSDK.Group)
  @objc optional func ccGroupMemberAdded(messages: [CometChatSDK.ActionMessage], usersAdded: [CometChatSDK.User], groupAddedIn: CometChatSDK.Group, addedBy: CometChatSDK.User)
  @objc optional func ccOwnershipChanged(group: CometChatSDK.Group, newOwner: CometChatSDK.GroupMember)
  @available(*, deprecated, message: "Use ccGroupCreated(group:) instead")
  @objc optional func onGroupCreate(group: CometChatSDK.Group)
  @available(*, deprecated, message: "Use ccGroupDeleted(group:) instead")
  @objc optional func onGroupDelete(group: CometChatSDK.Group)
  @available(*, deprecated, message: "Use ccGroupLeft(action:leftUser:leftGroup:) instead")
  @objc optional func onGroupMemberLeave(leftUser: CometChatSDK.User, leftGroup: CometChatSDK.Group)
  @available(*, deprecated, message: "Use ccGroupMemberScopeChanged(action:updatedUser:scopeChangedTo:scopeChangedFrom:group:) instead")
  @objc optional func onGroupMemberChangeScope(updatedBy: CometChatSDK.User, updatedUser: CometChatSDK.User, scopeChangedTo: CometChatSDK.CometChat.MemberScope, scopeChangedFrom: CometChatSDK.CometChat.MemberScope, group: CometChatSDK.Group)
  @available(*, deprecated, message: "Use ccGroupMemberBanned(action:bannedUser:bannedBy:bannedFrom:) instead")
  @objc optional func onGroupMemberBan(bannedUser: CometChatSDK.User, bannedGroup: CometChatSDK.Group, bannedBy: CometChatSDK.User)
  @available(*, deprecated, message: "Use ccGroupMemberKicked(action:kickedUser:kickedBy:kickedFrom:) instead")
  @objc optional func onGroupMemberKick(kickedUser: CometChatSDK.User, kickedGroup: CometChatSDK.Group, kickedBy: CometChatSDK.User)
  @available(*, deprecated, message: "Use ccGroupMemberUnbanned(action:unbannedUser:unbannedBy:unbannedFrom:) instead")
  @objc optional func onGroupMemberUnban(unbannedUserUser: CometChatSDK.User, unbannedUserGroup: CometChatSDK.Group, unbannedBy: CometChatSDK.User)
  @available(*, deprecated, message: "Use ccGroupMemberJoined(joinedUser:joinedGroup:) instead")
  @objc optional func onGroupMemberJoin(joinedUser: CometChatSDK.User, joinedGroup: CometChatSDK.Group)
  @available(*, deprecated, message: "Use ccGroupMemberAdded(messages:usersAdded:groupAddedIn:addedBy:) instead")
  @objc optional func onGroupMemberAdd(group: CometChatSDK.Group, members: [CometChatSDK.GroupMember], addedBy: CometChatSDK.User)
  @available(*, deprecated, message: "Use ccOwnershipChanged(group:newOwner:) instead")
  @objc optional func onOwnershipChange(group: CometChatSDK.Group?, member: CometChatSDK.GroupMember?)
  @available(*, deprecated, message: "This function is now deprecated")
  @objc optional func onCreateGroupClick()
}
public enum ConversationConstants {
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class CometChatMessageComposer : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public var textView: CometChatUIKitSwift.GrowingTextView {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var containerView: UIKit.UIStackView {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var dividerView: UIKit.UIView {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var composerBoxContainerStackView: UIKit.UIStackView {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var topContainerView: UIKit.UIView {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var bottomContainerView: UIKit.UIView {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var messagePreview: UIKit.UIStackView {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var suggestionContainerView: UIKit.UIStackView {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var primaryButtonContainerView: UIKit.UIStackView {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var secondaryButtonContainerView: UIKit.UIStackView {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var headerView: UIKit.UIStackView {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var footerView: UIKit.UIStackView {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var primaryStackView: UIKit.UIStackView {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var secondaryStackView: UIKit.UIStackView {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var auxiliaryStackView: UIKit.UIView {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var aiButton: UIKit.UIButton {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var sendButton: UIKit.UIButton {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var attachmentButton: UIKit.UIButton {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var microphoneButton: UIKit.UIButton {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var bottomConstant: UIKit.NSLayoutConstraint!
  @_Concurrency.MainActor @preconcurrency public static var style: CometChatUIKitSwift.MessageComposerStyle
  @_Concurrency.MainActor @preconcurrency public static var mediaRecorderStyle: CometChatUIKitSwift.MediaRecorderStyle
  @_Concurrency.MainActor @preconcurrency public static var attachmentSheetStyle: CometChatUIKitSwift.ActionSheetStyle
  @_Concurrency.MainActor @preconcurrency public static var suggestionsStyle: CometChatUIKitSwift.SuggestionViewStyle
  @_Concurrency.MainActor @preconcurrency public static var mentionStyle: CometChatUIKitSwift.MentionTextStyle
  @_Concurrency.MainActor @preconcurrency public static var aiOptionsStyle: CometChatUIKitSwift.AIOptionsStyle
  @_Concurrency.MainActor @preconcurrency public var style: CometChatUIKitSwift.MessageComposerStyle {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var mediaRecorderStyle: CometChatUIKitSwift.MediaRecorderStyle {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var attachmentSheetStyle: CometChatUIKitSwift.ActionSheetStyle {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var suggestionsStyle: CometChatUIKitSwift.SuggestionViewStyle {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var aiOptionsStyle: CometChatUIKitSwift.AIOptionsStyle {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var mentionStyle: CometChatUIKitSwift.MentionTextStyle
  @_Concurrency.MainActor @preconcurrency public var attachmentOptionsClosure: ((_ user: CometChatSDK.User?, _ group: CometChatSDK.Group?, _ controller: UIKit.UIViewController?) -> [CometChatUIKitSwift.CometChatMessageComposerAction])?
  @_Concurrency.MainActor @preconcurrency public var aiOptionsClosure: ((_ user: CometChatSDK.User?, _ group: CometChatSDK.Group?, _ controller: UIKit.UIViewController?) -> [CometChatUIKitSwift.CometChatMessageComposerAction])?
  @_Concurrency.MainActor @preconcurrency public var onSendButtonClick: ((CometChatSDK.BaseMessage) -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency public var onSuggestionItemClick: ((CometChatUIKitSwift.SuggestionItem) -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency public var secondaryButtonView: ((_ user: CometChatSDK.User?, _ group: CometChatSDK.Group?) -> UIKit.UIView)?
  @_Concurrency.MainActor @preconcurrency public var auxilaryButtonView: ((_ user: CometChatSDK.User?, _ group: CometChatSDK.Group?) -> UIKit.UIView)?
  @_Concurrency.MainActor @preconcurrency public var sendButtonView: ((_ user: CometChatSDK.User?, _ group: CometChatSDK.Group?) -> UIKit.UIView)?
  @_Concurrency.MainActor @preconcurrency public var onClickSuggestionListView: (() -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency public var viewModel: CometChatUIKitSwift.MessageComposerViewModel
  @_Concurrency.MainActor @preconcurrency public var placeholderText: Swift.String
  @_Concurrency.MainActor @preconcurrency public var disableSoundForMessages: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public var customSoundForMessage: Foundation.URL?
  @_Concurrency.MainActor @preconcurrency public var disableTypingEvents: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public var hideHeaderView: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public var hideFooterView: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public var messageComposerMode: CometChatUIKitSwift.MessageComposerMode
  @_Concurrency.MainActor @preconcurrency public var auxiliaryButtonsAlignment: CometChatUIKitSwift.AuxilaryButtonAlignment
  @_Concurrency.MainActor @preconcurrency public var suggestionViewStyle: CometChatUIKitSwift.SuggestionViewStyle?
  @_Concurrency.MainActor @preconcurrency public var disableMentions: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var hideSendButton: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public var hideAIButton: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public var attachmentOptions: [CometChatUIKitSwift.CometChatMessageComposerAction]
  @_Concurrency.MainActor @preconcurrency public var hideImageAttachmentOption: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var hideVideoAttachmentOption: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var hideFileAttachmentOption: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var hidePollsOption: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var hideCollaborativeDocumentOption: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var hideCollaborativeWhiteboardOption: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var hideAttachmentButton: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public var hideVoiceRecordingButton: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public var hideStickersButton: Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func willMove(toWindow newWindow: UIKit.UIWindow?)
  @_Concurrency.MainActor @preconcurrency open func buildUI()
  @_Concurrency.MainActor @preconcurrency open func handleThemeModeChange()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @_Concurrency.MainActor @preconcurrency open func setupStyle()
  @_Concurrency.MainActor @preconcurrency open func setupAuxiliaryButton()
  @objc @_Concurrency.MainActor @preconcurrency open func didMicrophoneButtonClicked()
  @objc @_Concurrency.MainActor @preconcurrency open func didSendButtonClicked()
  @_Concurrency.MainActor @preconcurrency open func didDefaultSendButtonClicked()
  @objc deinit
  @_Concurrency.MainActor @preconcurrency open func presentEditPreview(for message: CometChatSDK.BaseMessage)
  @_Concurrency.MainActor @preconcurrency open func hideEditPreview()
}
extension CometChatUIKitSwift.CometChatMessageComposer {
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func connect() -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func disconnect() -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func edit(message: CometChatSDK.BaseMessage) -> Self
}
extension CometChatUIKitSwift.CometChatMessageComposer : CometChatUIKitSwift.CometChatUIEventListener {
  @_Concurrency.MainActor @preconcurrency public func ccComposeMessage(id: [Swift.String : Any]?, message: CometChatSDK.BaseMessage)
  @_Concurrency.MainActor @preconcurrency public func showPanel(id: [Swift.String : Any]?, alignment: CometChatUIKitSwift.UIAlignment, view: UIKit.UIView?)
  @_Concurrency.MainActor @preconcurrency public func hidePanel(id: [Swift.String : Any]?, alignment: CometChatUIKitSwift.UIAlignment)
}
extension CometChatUIKitSwift.CometChatMessageComposer : CometChatUIKitSwift.GrowingTextViewDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func textViewDidChangeHeight(_ textView: CometChatUIKitSwift.GrowingTextView, height: CoreFoundation.CGFloat)
}
extension CometChatUIKitSwift.CometChatMessageComposer : UIKit.UIDocumentPickerDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func documentPicker(_ controller: UIKit.UIDocumentPickerViewController, didPickDocumentsAt urls: [Foundation.URL])
}
public enum MessageComposerMode {
  case draft
  case edit
  case reply
  public static func == (a: CometChatUIKitSwift.MessageComposerMode, b: CometChatUIKitSwift.MessageComposerMode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum AuxilaryButtonAlignment {
  case left
  case right
  public static func == (a: CometChatUIKitSwift.AuxilaryButtonAlignment, b: CometChatUIKitSwift.AuxilaryButtonAlignment) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
open class ReactionListDataModel {
  public init(reaction: Swift.String, count: Swift.Int, messageID: Swift.Int, reactionsRequest: CometChatSDK.ReactionsRequestBuilder? = nil)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class AISmartRepliesExtension : CometChatUIKitSwift.ExtensionDataSource {
  public init(configuration: CometChatUIKitSwift.AISmartRepliesConfiguration? = nil)
  override public func enable()
  override public func addExtension()
  override public func getExtensionId() -> Swift.String
  @objc deinit
}
public struct GroupMembersStyle : CometChatUIKitSwift.ListBaseStyle, CometChatUIKitSwift.ListItemStyle {
  public var retryButtonTextColor: UIKit.UIColor
  public var retryButtonTextFont: UIKit.UIFont
  public var retryButtonBackgroundColor: UIKit.UIColor
  public var retryButtonBorderColor: UIKit.UIColor
  public var retryButtonBorderWidth: CoreFoundation.CGFloat
  public var retryButtonCornerRadius: CometChatUIKitSwift.CometChatCornerStyle
  public var listItemSelectedBackground: UIKit.UIColor
  public var listItemDeSelectedImageTint: UIKit.UIColor
  public var listItemSelectionImageTint: UIKit.UIColor
  public var listItemSelectedImage: UIKit.UIImage
  public var listItemDeSelectedImage: UIKit.UIImage
  public var backgroundColor: UIKit.UIColor
  public var borderWidth: CoreFoundation.CGFloat
  public var borderColor: UIKit.UIColor
  public var cornerRadius: CometChatUIKitSwift.CometChatCornerStyle
  public var titleFont: UIKit.UIFont?
  public var largeTitleFont: UIKit.UIFont?
  public var titleColor: UIKit.UIColor?
  public var largeTitleColor: UIKit.UIColor?
  public var navigationBarTintColor: UIKit.UIColor?
  public var navigationBarItemsTintColor: UIKit.UIColor?
  public var errorTitleTextFont: UIKit.UIFont
  public var errorTitleTextColor: UIKit.UIColor
  public var errorSubTitleFont: UIKit.UIFont
  public var errorSubTitleTextColor: UIKit.UIColor
  public var emptyTitleTextFont: UIKit.UIFont
  public var emptyTitleTextColor: UIKit.UIColor
  public var emptySubTitleFont: UIKit.UIFont
  public var emptySubTitleTextColor: UIKit.UIColor
  public var tableViewSeparator: UIKit.UIColor
  public var listItemTitleTextColor: UIKit.UIColor
  public var listItemTitleFont: UIKit.UIFont
  public var listItemSubTitleTextColor: UIKit.UIColor
  public var listItemSubTitleFont: UIKit.UIFont
  public var listItemBackground: UIKit.UIColor
  public var listItemBorderWidth: CoreFoundation.CGFloat
  public var listItemBorderColor: UIKit.UIColor
  public var listItemCornerRadius: CometChatUIKitSwift.CometChatCornerStyle
  public var messageTypeImageTint: UIKit.UIColor
  public var passwordGroupImageTintColor: UIKit.UIColor
  public var passwordGroupImageBackgroundColor: UIKit.UIColor
  public var privateGroupImageTintColor: UIKit.UIColor
  public var privateGroupImageBackgroundColor: UIKit.UIColor
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class CometChatQuickView : UIKit.UIStackView {
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(title: Swift.String) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(titleFont: UIKit.UIFont) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(titleColor: UIKit.UIColor) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(subTitle: Swift.String) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(subTitleFont: UIKit.UIFont) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(subTitleColor: UIKit.UIColor) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(leadingBarTint: UIKit.UIColor) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(leadingBarWidth: CoreFoundation.CGFloat) -> Self
  @objc deinit
}
@_hasMissingDesignatedInitializers public class CometChatUserEvents {
  @objc public static func addListener(_ id: Swift.String, _ observer: any CometChatUIKitSwift.CometChatUserEventListener)
  @objc public static func removeListener(_ id: Swift.String)
  public static func ccUserBlocked(user: CometChatSDK.User)
  public static func ccUserUnblocked(user: CometChatSDK.User)
  @objc deinit
}
public enum Language : Swift.String {
  case german
  case arabic
  case chinese_taiwan
  case english
  case spanish
  case malay
  case swedish
  case hungarian
  case lithuanian
  case russian
  case french
  case portuguese
  case hindi
  case chinese
  case english_uk
  case dutch
  case japanese
  case korean
  case turkish
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class CometChatLocalize : Foundation.Bundle {
  public class func set(locale: CometChatUIKitSwift.Language)
  public class func getLocale() -> Swift.String
  @objc override dynamic public func localizedString(forKey key: Swift.String, value: Swift.String?, table tableName: Swift.String?) -> Swift.String
  @objc override dynamic public init?(path: Swift.String)
  @objc deinit
}
extension Swift.String {
  public func localize() -> Swift.String
}
@objc @_Concurrency.MainActor @preconcurrency open class CometChatGroupMembers : CometChatUIKitSwift.CometChatListBase {
  @_Concurrency.MainActor @preconcurrency public var viewModel: CometChatUIKitSwift.GroupMembersViewModel
  @_Concurrency.MainActor @preconcurrency public static var style: CometChatUIKitSwift.GroupMembersStyle
  @_Concurrency.MainActor @preconcurrency public static var avatarStyle: CometChatUIKitSwift.AvatarStyle
  @_Concurrency.MainActor @preconcurrency public static var statusIndicatorStyle: CometChatUIKitSwift.StatusIndicatorStyle
  @_Concurrency.MainActor @preconcurrency public var style: CometChatUIKitSwift.GroupMembersStyle
  @_Concurrency.MainActor @preconcurrency public var avatarStyle: CometChatUIKitSwift.AvatarStyle
  @_Concurrency.MainActor @preconcurrency public var statusIndicatorStyle: CometChatUIKitSwift.StatusIndicatorStyle
  @_Concurrency.MainActor @preconcurrency public var disableUserPresence: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public var onSelectedItemProceed: ((_ groupMembers: [CometChatSDK.GroupMember]) -> ())?
  @_Concurrency.MainActor @preconcurrency public var hideUserStatus: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public var hideKickMemberOption: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public var hideBanMemberOption: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public var hideScopeChangeOption: Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc dynamic public init()
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency open func defaultSetup()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency open func addCheckBarButtonItem()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency override open func setupStyle()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @objc deinit
  @objc @_Concurrency.MainActor @preconcurrency open func didTapBackButton()
  @_Concurrency.MainActor @preconcurrency open func fetchData()
  @_Concurrency.MainActor @preconcurrency open func reloadData()
  @objc @_Concurrency.MainActor @preconcurrency open func tickButtonTapped()
  @_Concurrency.MainActor @preconcurrency open func registerCells()
  @_Concurrency.MainActor @preconcurrency override open func onSearch(state: CometChatUIKitSwift.SearchState, text: Swift.String)
  @_Concurrency.MainActor @preconcurrency open func configureTailView(groupMember: CometChatSDK.GroupMember) -> UIKit.UIButton?
  @_Concurrency.MainActor @preconcurrency open func configureMenu(groupMember: CometChatSDK.GroupMember) -> [UIKit.UIContextualAction]
  @_Concurrency.MainActor @preconcurrency open func onBanMemberSelected(for groupMember: CometChatSDK.GroupMember)
  @_Concurrency.MainActor @preconcurrency open func onRemoveMemberSelected(for groupMember: CometChatSDK.GroupMember)
  @_Concurrency.MainActor @preconcurrency open func onScopeChangeSelected(for groupMember: CometChatSDK.GroupMember, onCancelled: @escaping (() -> Swift.Void), onCompleted: @escaping (() -> Swift.Void))
  @_Concurrency.MainActor @preconcurrency public func onGroupMemberBanned(action: CometChatSDK.ActionMessage, bannedUser: CometChatSDK.User, bannedBy: CometChatSDK.User, bannedFrom: CometChatSDK.Group)
}
extension CometChatUIKitSwift.CometChatGroupMembers {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func tableView(_ tableView: UIKit.UITableView, heightForRowAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency @objc dynamic open func tableView(_ tableView: UIKit.UITableView, willDisplay cell: UIKit.UITableViewCell, forRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func tableView(_ tableView: UIKit.UITableView, didDeselectRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func tableView(_ tableView: UIKit.UITableView, trailingSwipeActionsConfigurationForRowAt indexPath: Foundation.IndexPath) -> UIKit.UISwipeActionsConfiguration?
}
extension CometChatUIKitSwift.CometChatGroupMembers : CometChatSDK.CometChatConnectionDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func connected()
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func connecting()
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func disconnected()
}
extension UIKit.UIImage {
  public func add(text: Swift.String, imageTint: UIKit.UIColor) -> UIKit.UIImage?
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class UsersShimmerView : CometChatUIKitSwift.CometChatShimmerView {
  @_Concurrency.MainActor @preconcurrency public var cellCount: Swift.Int
  @_Concurrency.MainActor @preconcurrency override open func buildUI()
  @_Concurrency.MainActor @preconcurrency override open func startShimmer()
  @_Concurrency.MainActor @preconcurrency override open func stopShimmer()
  @_Concurrency.MainActor @preconcurrency @objc override open func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc override open func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init()
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension CometChatUIKitSwift.MessageHeaderViewModel : CometChatUIKitSwift.CometChatMessageEventListener {
  public func onTypingStarted(_ typingDetails: CometChatSDK.TypingIndicator)
  public func onTypingEnded(_ typingDetails: CometChatSDK.TypingIndicator)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class CometChatIncomingCall : UIKit.UIViewController {
  @_Concurrency.MainActor @preconcurrency public var containerView: UIKit.UIView {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var titleContainerView: UIKit.UIView {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var subtitleContainerView: UIKit.UIView {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var trailingView: UIKit.UIView {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var leadingContainerView: UIKit.UIView {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var nameLabel: UIKit.UILabel {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var callLabel: UIKit.UILabel {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var avatar: CometChatUIKitSwift.CometChatAvatar {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var acceptButton: UIKit.UIButton {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var declineButton: UIKit.UIButton {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public static var style: CometChatUIKitSwift.IncomingCallStyle
  @_Concurrency.MainActor @preconcurrency public static var avatarStyle: CometChatUIKitSwift.AvatarStyle
  @_Concurrency.MainActor @preconcurrency public var style: CometChatUIKitSwift.IncomingCallStyle {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var avatarStyle: CometChatUIKitSwift.AvatarStyle {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var disableSoundForCalls: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public var customSoundForCalls: Foundation.URL?
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency open func buildUI()
  @_Concurrency.MainActor @preconcurrency open func setupData()
  @_Concurrency.MainActor @preconcurrency open func setupStyle()
  @objc @_Concurrency.MainActor @preconcurrency open func onAcceptButtonTapped()
  @objc @_Concurrency.MainActor @preconcurrency open func onRejectButtonTapped()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class CometChatStickerBubble : UIKit.UIStackView {
  @_Concurrency.MainActor @preconcurrency public var imageView: UIKit.UIImageView {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var activityIndicator: UIKit.UIActivityIndicatorView {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func willMove(toWindow newWindow: UIKit.UIWindow?)
  @_Concurrency.MainActor @preconcurrency public func buildUI()
  @_Concurrency.MainActor @preconcurrency public func setUpStyle()
  @_Concurrency.MainActor @preconcurrency public func set(image: UIKit.UIImage)
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func setOnClick(onClick: @escaping (() -> Swift.Void)) -> Self
  @_Concurrency.MainActor @preconcurrency public func set(imageUrl: Swift.String)
  @_Concurrency.MainActor @preconcurrency public func set(controller: UIKit.UIViewController?)
  @objc deinit
}
final public class UIKitSettings {
  public init()
  @discardableResult
  final public func enable(inAppIncomingCall: Swift.Bool) -> Self
  @discardableResult
  final public func set(appID: Swift.String) -> Self
  @discardableResult
  final public func set(authKey: Swift.String) -> Self
  @discardableResult
  final public func set(region: Swift.String) -> Self
  @discardableResult
  final public func set(deviceToken: Swift.String) -> Self
  @discardableResult
  final public func set(voipToken: Swift.String) -> Self
  @discardableResult
  final public func enable(extensions: [CometChatUIKitSwift.ExtensionDataSource]) -> Self
  @discardableResult
  final public func enable(aiExtensions: [CometChatUIKitSwift.ExtensionDataSource]) -> Self
  @discardableResult
  final public func set(fcmKey: Swift.String) -> Self
  @discardableResult
  final public func set(googleApiKey: Swift.String) -> Self
  @discardableResult
  final public func set(stripeKey: Swift.String) -> Self
  @discardableResult
  final public func disableCalling() -> Self
  @discardableResult
  final public func setEnableAutoJoinForGroups(enableAutoJoinForGroups: Swift.Bool) -> Self
  @discardableResult
  final public func setExtensionGroupID(id: Swift.String) -> Self
  @discardableResult
  final public func subscribePresenceForAllUsers() -> Self
  @discardableResult
  final public func subcribePresenceForRoles(roles: [Swift.String]) -> Self
  @discardableResult
  final public func subscribePresenceForFriends() -> Self
  @discardableResult
  final public func autoEstablishSocketConnection(bool: Swift.Bool) -> Self
  @discardableResult
  final public func overrideAdminHost(_ adminHost: Swift.String) -> Self
  @discardableResult
  final public func overrideClientHost(_ clientHost: Swift.String) -> Self
  @discardableResult
  final public func set(callingExtensions: CometChatUIKitSwift.CallingExtension) -> Self
  @discardableResult
  final public func build() -> Self
  @objc deinit
}
extension UIKit.UIColor {
  public static func dynamicColor(lightModeColor: UIKit.UIColor, darkModeColor: UIKit.UIColor) -> UIKit.UIColor
  convenience public init(hex: Swift.String)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class FormMessage : CometChatSDK.InteractiveMessage {
  @objc override dynamic public init()
  public func getFormFields() -> [CometChatUIKitSwift.ElementEntity]
  public func setFormFields(_ formFields: [CometChatUIKitSwift.ElementEntity])
  public func getTitle() -> Swift.String
  public func setTitle(_ title: Swift.String)
  public func getGoalCompletionText() -> Swift.String
  public func setGoalCompletionText(_ text: Swift.String)
  public func getSubmitElement() -> CometChatUIKitSwift.ButtonElement
  public func setSubmitElement(_ submitElement: CometChatUIKitSwift.ButtonElement)
  public static func toFormMessage(_ interactiveMessage: CometChatSDK.InteractiveMessage) -> CometChatUIKitSwift.FormMessage
  public func interactiveMessage() -> CometChatSDK.InteractiveMessage
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class CometChatFileBubble : UIKit.UIStackView {
  @_Concurrency.MainActor @preconcurrency public var title: UIKit.UILabel {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var subTitle: UIKit.UILabel {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var middleStackView: UIKit.UIStackView {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var fileImageView: UIKit.UIImageView {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var downloadProgressBar: CometChatUIKitSwift.DownloadableCircularProgressBar {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var fileImage: UIKit.UIImage?
  @_Concurrency.MainActor @preconcurrency public var downloadImage: UIKit.UIImage?
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func willMove(toSuperview newSuperview: UIKit.UIView?)
  @_Concurrency.MainActor @preconcurrency public func setUpUI()
  @_Concurrency.MainActor @preconcurrency public func buildUI()
  @_Concurrency.MainActor @preconcurrency public func set(fileUrl: Swift.String)
  @_Concurrency.MainActor @preconcurrency public func set(cacheFileURL: Swift.String?)
  @_Concurrency.MainActor @preconcurrency public func set(controller: UIKit.UIViewController)
  @_Concurrency.MainActor @preconcurrency public func set(title: Swift.String)
  @_Concurrency.MainActor @preconcurrency public func set(subtitle: Swift.String)
  @_Concurrency.MainActor @preconcurrency public static func getFileIcon(for mediaMessage: CometChatSDK.MediaMessage, localURL: Foundation.URL? = nil) -> UIKit.UIImage?
  @objc deinit
}
extension CometChatUIKitSwift.CometChatFileBubble : QuickLook.QLPreviewControllerDataSource, QuickLook.QLPreviewControllerDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func numberOfPreviewItems(in controller: QuickLook.QLPreviewController) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func previewController(_ controller: QuickLook.QLPreviewController, previewItemAt index: Swift.Int) -> any QuickLook.QLPreviewItem
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func previewController(_ controller: QuickLook.QLPreviewController, transitionViewFor item: any QuickLook.QLPreviewItem) -> UIKit.UIView?
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func previewController(_ controller: QuickLook.QLPreviewController, transitionImageFor item: any QuickLook.QLPreviewItem, contentRect: Swift.UnsafeMutablePointer<CoreFoundation.CGRect>) -> UIKit.UIImage?
}
@_inheritsConvenienceInitializers public class CometChatLinkPreviewExtension : CometChatUIKitSwift.ExtensionDataSource {
  public init()
  override public func addExtension()
  override public func getExtensionId() -> Swift.String
  @objc deinit
}
public struct CallLogStyle : CometChatUIKitSwift.ListItemStyle, CometChatUIKitSwift.ListBaseStyle {
  public var listItemTitleTextColor: UIKit.UIColor
  public var listItemTitleFont: UIKit.UIFont
  public var listItemSubTitleTextColor: UIKit.UIColor
  public var listItemSubTitleFont: UIKit.UIFont
  public var listItemBackground: UIKit.UIColor
  public var listItemSelectedBackground: UIKit.UIColor
  public var listItemBorderWidth: CoreFoundation.CGFloat
  public var listItemBorderColor: UIKit.UIColor
  public var listItemCornerRadius: CometChatUIKitSwift.CometChatCornerStyle
  public var listItemSelectionImageTint: UIKit.UIColor
  public var listItemDeSelectedImageTint: UIKit.UIColor
  public var listItemSelectedImage: UIKit.UIImage
  public var listItemDeSelectedImage: UIKit.UIImage
  public var backgroundColor: UIKit.UIColor
  public var borderWidth: CoreFoundation.CGFloat
  public var borderColor: UIKit.UIColor
  public var cornerRadius: CometChatUIKitSwift.CometChatCornerStyle
  public var titleColor: UIKit.UIColor?
  public var titleFont: UIKit.UIFont?
  public var largeTitleColor: UIKit.UIColor?
  public var largeTitleFont: UIKit.UIFont?
  public var navigationBarTintColor: UIKit.UIColor?
  public var navigationBarItemsTintColor: UIKit.UIColor?
  public var errorTitleTextFont: UIKit.UIFont
  public var errorTitleTextColor: UIKit.UIColor
  public var errorSubTitleFont: UIKit.UIFont
  public var errorSubTitleTextColor: UIKit.UIColor
  public var retryButtonTextColor: UIKit.UIColor
  public var retryButtonTextFont: UIKit.UIFont
  public var retryButtonBackgroundColor: UIKit.UIColor
  public var retryButtonBorderColor: UIKit.UIColor
  public var retryButtonBorderWidth: CoreFoundation.CGFloat
  public var retryButtonCornerRadius: CometChatUIKitSwift.CometChatCornerStyle
  public var emptyTitleTextFont: UIKit.UIFont
  public var emptyTitleTextColor: UIKit.UIColor
  public var emptySubTitleFont: UIKit.UIFont
  public var emptySubTitleTextColor: UIKit.UIColor
  public var tableViewSeparator: UIKit.UIColor
  public var backIcon: UIKit.UIImage?
  public var backIconTint: UIKit.UIColor?
  public var incomingCallIcon: UIKit.UIImage?
  public var incomingCallIconTint: UIKit.UIColor?
  public var outgoingCallIcon: UIKit.UIImage?
  public var outgoingCallIconTint: UIKit.UIColor?
  public var missedCallTitleColor: UIKit.UIColor?
  public var missedCallIcon: UIKit.UIImage?
  public var missedCallIconTint: UIKit.UIColor?
  public var audioCallIcon: UIKit.UIImage?
  public var audioCallIconTint: UIKit.UIColor?
  public var videoCallIcon: UIKit.UIImage?
  public var videoCallIconTint: UIKit.UIColor?
  public var separatorColor: UIKit.UIColor?
  public init()
}
public class APIAction : CometChatUIKitSwift.ActionEntity {
  public var method: CometChatUIKitSwift.HttpMethodType
  @objc public var url: Swift.String
  @objc public var payLoad: [Swift.String : Any]
  @objc public var headers: [Swift.String : Swift.String]
  @objc public var dataKey: Swift.String
  @objc public var disableAfterInteracted: Swift.Bool
  public init()
  @objc deinit
}
public enum HttpMethodType {
  case GET
  case POST
  case PUT
  case PATCH
  case DELETE
  public var value: Swift.String {
    get
  }
  public static func == (a: CometChatUIKitSwift.HttpMethodType, b: CometChatUIKitSwift.HttpMethodType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public class URLNavigationAction : CometChatUIKitSwift.ActionEntity {
  public init()
  @objc public var url: Swift.String
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class CometChatThreadedMessageHeader : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public var bubbleContainerView: UIKit.UIStackView {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var bubbleScrollView: UIKit.UIScrollView {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var threadCountContainerView: UIKit.UIStackView {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var threadCountLabel: UIKit.UILabel {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var enableSoundForMessages: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public var customIncomingMessageSound: Foundation.URL?
  @_Concurrency.MainActor @preconcurrency public var customOutgoingMessageSound: Foundation.URL?
  @_Concurrency.MainActor @preconcurrency public var customSoundForOutgoingMessages: Foundation.URL?
  @_Concurrency.MainActor @preconcurrency public var singleNewMessageText: Swift.String
  @_Concurrency.MainActor @preconcurrency public var multipleNewMessageText: Swift.String
  @_Concurrency.MainActor @preconcurrency public var controller: UIKit.UIViewController?
  @_Concurrency.MainActor @preconcurrency public var messageAlignment: CometChatUIKitSwift.MessageListAlignment
  @_Concurrency.MainActor @preconcurrency public var hideReceipt: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public var hideBubbleHeader: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public var messageBubbleStyle: (incoming: CometChatUIKitSwift.MessageBubbleStyle, outgoing: CometChatUIKitSwift.MessageBubbleStyle)
  @_Concurrency.MainActor @preconcurrency public var maxHeight: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var hideReplyCount: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public var hideReplyCountBar: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public var hideAvatar: Swift.Bool?
  @_Concurrency.MainActor @preconcurrency public static var style: CometChatUIKitSwift.ThreadedMessageHeaderStyle
  @_Concurrency.MainActor @preconcurrency public var style: CometChatUIKitSwift.ThreadedMessageHeaderStyle {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency open var viewModel: any CometChatUIKitSwift.ThreadedMessageHeaderViewModelProtocol
  @_Concurrency.MainActor @preconcurrency public static var dateTimeFormatter: CometChatUIKitSwift.CometChatDateTimeFormatter
  @_Concurrency.MainActor @preconcurrency public var dateTimeFormatter: CometChatUIKitSwift.CometChatDateTimeFormatter {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public init()
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
  @_Concurrency.MainActor @preconcurrency open func setupViewModel()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func willMove(toWindow newWindow: UIKit.UIWindow?)
  @_Concurrency.MainActor @preconcurrency open func setupStyle()
  @_Concurrency.MainActor @preconcurrency open func buildUI()
  @_Concurrency.MainActor @preconcurrency open func setupMessageBubbleView()
  @_Concurrency.MainActor @preconcurrency open func setupThreadCountIndicator()
  @_Concurrency.MainActor @preconcurrency open func connect()
  @_Concurrency.MainActor @preconcurrency open func disconnect()
}
@_hasMissingDesignatedInitializers public class PollBubbleConfiguration {
  @discardableResult
  public func set(style: CometChatUIKitSwift.PollBubbleStyle) -> CometChatUIKitSwift.PollBubbleConfiguration
  @discardableResult
  public func set(voteIconURL: Swift.String) -> CometChatUIKitSwift.PollBubbleConfiguration
  @objc deinit
}
@objc public class ActionItem : ObjectiveC.NSObject {
  public var id: Swift.String
  public var text: Swift.String?
  public var leadingIcon: UIKit.UIImage?
  public var trailingView: UIKit.UIView?
  public var onActionClick: (() -> ())?
  public var style: CometChatUIKitSwift.ActionSheetStyle?
  public init(id: Swift.String, text: Swift.String?, leadingIcon: UIKit.UIImage? = nil, trailingView: UIKit.UIView? = nil, onActionClick: (() -> ())? = nil)
  @objc deinit
}
@objc public class CometChatMessageComposerAction : ObjectiveC.NSObject {
  public var id: Swift.String?
  public var text: Swift.String?
  public var startIcon: UIKit.UIImage?
  public var endIcon: UIKit.UIImage?
  public var startIconTint: UIKit.UIColor?
  public var endIconTint: UIKit.UIColor?
  public var textColor: UIKit.UIColor?
  public var textFont: UIKit.UIFont?
  public var backgroundColour: UIKit.UIColor?
  public var borderRadius: CometChatUIKitSwift.CometChatCornerStyle?
  public var borderWidth: CoreFoundation.CGFloat?
  public var borderColor: UIKit.UIColor?
  public var onActionClick: (() -> ())?
  public init(id: Swift.String?, text: Swift.String?, startIcon: UIKit.UIImage?, endIcon: UIKit.UIImage? = nil, startIconTint: UIKit.UIColor?, endIconTint: UIKit.UIColor? = nil, textColor: UIKit.UIColor?, textFont: UIKit.UIFont?, backgroundColour: UIKit.UIColor? = nil, borderRadius: CometChatUIKitSwift.CometChatCornerStyle? = nil, borderWidth: CoreFoundation.CGFloat? = nil, borderColor: UIKit.UIColor? = nil, onActionClick: (() -> ())? = nil)
  @objc deinit
}
public class ConversationsUtils {
  public init()
  public func configureTailView(conversation: CometChatSDK.Conversation, badgeStyle: CometChatUIKitSwift.BadgeStyle, dateStyle: CometChatUIKitSwift.DateStyle, datePattern: Swift.String?, dateTimeFormatter: CometChatUIKitSwift.CometChatDateTimeFormatter) -> UIKit.UIView
  public static func configureSubtitleView(conversation: CometChatSDK.Conversation, isTypingEnabled: Swift.Bool, receiptStyle: CometChatUIKitSwift.ReceiptStyle, disableReceipt: Swift.Bool, textFormatter: [CometChatUIKitSwift.CometChatTextFormatter], typingIndicator: CometChatSDK.TypingIndicator? = nil, typingIndicatorStyle: CometChatUIKitSwift.TypingIndicatorStyle, conversationStyle: CometChatUIKitSwift.ConversationsStyle) -> UIKit.UIView
  @objc deinit
}
@_inheritsConvenienceInitializers @objc @IBDesignable @_Concurrency.MainActor @preconcurrency final public class CometChatBadge : UIKit.UILabel {
  @_Concurrency.MainActor @preconcurrency public static var style: CometChatUIKitSwift.BadgeStyle
  @_Concurrency.MainActor @preconcurrency final public var style: CometChatUIKitSwift.BadgeStyle {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc override final public func drawText(in rect: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc override final public func layoutSubviews()
  @discardableResult
  @_Concurrency.MainActor @preconcurrency final public func set(count: Swift.Int) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency final public func incrementCount() -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency final public func removeCount() -> Self
  @_Concurrency.MainActor @preconcurrency @objc override final public var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @objc deinit
}
public class BaseStyle {
  public init()
  @discardableResult
  public func set(background: UIKit.UIColor) -> Self
  @discardableResult
  public func set(cornerRadius: CometChatUIKitSwift.CometChatCornerStyle) -> Self
  @discardableResult
  public func set(borderWidth: CoreFoundation.CGFloat) -> Self
  @discardableResult
  public func set(borderColor: UIKit.UIColor) -> Self
  @objc deinit
}
@_inheritsConvenienceInitializers public class CollaborativeDocumentExtension : CometChatUIKitSwift.ExtensionDataSource {
  public init()
  override public func addExtension()
  override public func getExtensionId() -> Swift.String
  @objc deinit
}
public class AIAssistBotStyle {
  public init()
  @discardableResult
  public func set(buttonTextColor: UIKit.UIColor) -> Self
  @discardableResult
  public func set(buttonTextFont: UIKit.UIFont) -> Self
  @discardableResult
  public func set(buttonBorder: CoreFoundation.CGFloat) -> Self
  @discardableResult
  public func set(buttonBorderRadius: CometChatUIKitSwift.CometChatCornerStyle) -> Self
  @discardableResult
  public func set(buttonBackground: UIKit.UIColor) -> Self
  @discardableResult
  public func set(buttonBorderColor: UIKit.UIColor) -> Self
  @discardableResult
  public func set(closeIconTint: UIKit.UIColor) -> Self
  @discardableResult
  public func set(sendIconTint: UIKit.UIColor) -> Self
  @discardableResult
  public func set(titleColor: UIKit.UIColor) -> Self
  @discardableResult
  public func set(titleFont: UIKit.UIFont) -> Self
  @discardableResult
  public func set(subtitleFont: UIKit.UIFont) -> Self
  @discardableResult
  public func set(subtitleColor: UIKit.UIColor) -> Self
  @objc deinit
}
extension CometChatUIKitSwift.CometChatMessageList : CometChatUIKitSwift.CometChatMessageEventListener, CometChatUIKitSwift.CometChatUIEventListener {
}
extension CometChatUIKitSwift.CometChatMessageList {
  @_Concurrency.MainActor @preconcurrency public func updateAIOnNewMessageReceived(message: CometChatSDK.BaseMessage)
}
@_hasMissingDesignatedInitializers public class CometChatStickerExtension : CometChatUIKitSwift.ExtensionDataSource {
  public init(configuration: CometChatUIKitSwift.StickerConfiguration? = nil)
  override public func addExtension()
  override public func getExtensionId() -> Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers public class GroupMembersBuilder {
  public static func getSharedBuilder(for group: CometChatSDK.Group) -> CometChatSDK.GroupMembersRequest.GroupMembersRequestBuilder
  @objc deinit
}
extension CometChatUIKitSwift.CometChatGroups {
  @discardableResult
  @_Concurrency.MainActor public func set(groupsRequestBuilder: CometChatSDK.GroupsRequest.GroupsRequestBuilder) -> Self
  @discardableResult
  @_Concurrency.MainActor public func set(searchRequestBuilder: CometChatSDK.GroupsRequest.GroupsRequestBuilder) -> Self
  @_Concurrency.MainActor public func set(searchKeyword: Swift.String) -> Self
  @discardableResult
  @_Concurrency.MainActor public func onSelection(_ onSelection: @escaping (([CometChatSDK.Group]?) -> ())) -> Self
  @discardableResult
  @_Concurrency.MainActor public func set(onLoad: @escaping (([CometChatSDK.Group]) -> Swift.Void)) -> Self
  @discardableResult
  @_Concurrency.MainActor public func set(onError: @escaping ((_ error: CometChatSDK.CometChatException) -> Swift.Void)) -> Self
  @discardableResult
  @_Concurrency.MainActor public func set(onEmpty: @escaping (() -> Swift.Void)) -> Self
  @discardableResult
  @_Concurrency.MainActor public func set(onItemClick: @escaping ((_ group: CometChatSDK.Group, _ indexPath: Foundation.IndexPath) -> Swift.Void)) -> Self
  @discardableResult
  @_Concurrency.MainActor public func set(onItemLongClick: @escaping ((_ group: CometChatSDK.Group, _ indexPath: Foundation.IndexPath) -> Swift.Void)) -> Self
  @discardableResult
  @_Concurrency.MainActor public func set(options: ((_ group: CometChatSDK.Group?) -> [CometChatUIKitSwift.CometChatGroupOption])?) -> Self
  @discardableResult
  @_Concurrency.MainActor public func add(options: ((_ group: CometChatSDK.Group?) -> [CometChatUIKitSwift.CometChatGroupOption])?) -> Self
  @discardableResult
  @_Concurrency.MainActor public func set(subtitle: ((_ group: CometChatSDK.Group?) -> UIKit.UIView)?) -> Self
  @discardableResult
  @_Concurrency.MainActor public func set(listItemView: ((_ group: CometChatSDK.Group?) -> UIKit.UIView)?) -> Self
  @discardableResult
  @_Concurrency.MainActor public func set(titleView: ((_ group: CometChatSDK.Group?) -> UIKit.UIView)?) -> Self
  @discardableResult
  @_Concurrency.MainActor public func set(leadingView: ((_ group: CometChatSDK.Group?) -> UIKit.UIView)?) -> Self
  @discardableResult
  @_Concurrency.MainActor public func set(trailingView: ((_ group: CometChatSDK.Group?) -> UIKit.UIView)?) -> Self
  @discardableResult
  @_Concurrency.MainActor public func set(title: Swift.String) -> Self
  @discardableResult
  @_Concurrency.MainActor public func set(selectionLimit: Swift.Int) -> Self
}
public struct TextBubbleStyle : CometChatUIKitSwift.BaseMessageBubbleStyle {
  public var avatarStyle: CometChatUIKitSwift.AvatarStyle?
  public var dateStyle: CometChatUIKitSwift.DateStyle?
  public var receiptStyle: CometChatUIKitSwift.ReceiptStyle?
  public var backgroundColor: UIKit.UIColor?
  public var backgroundDrawable: UIKit.UIImage?
  public var cornerRadius: CometChatUIKitSwift.CometChatCornerStyle?
  public var borderWidth: CoreFoundation.CGFloat?
  public var borderColor: UIKit.UIColor?
  public var headerTextColor: UIKit.UIColor?
  public var headerTextFont: UIKit.UIFont?
  public var threadedIndicatorTextFont: UIKit.UIFont?
  public var threadedIndicatorTextColor: UIKit.UIColor?
  public var threadedIndicatorImageTint: UIKit.UIColor?
  public var textFont: UIKit.UIFont
  public var textColor: UIKit.UIColor
  public var textHighlightColor: UIKit.UIColor
  public var reactionsStyle: CometChatUIKitSwift.ReactionsStyle?
  public init()
}
@_inheritsConvenienceInitializers public class ProfanityDataMaskingExtension : CometChatUIKitSwift.ExtensionDataSource {
  public init()
  override public func addExtension()
  override public func enable()
  override public func getExtensionId() -> Swift.String
  @objc deinit
}
open class ReactionsConfiguration {
  public init()
  @discardableResult
  public func set(width: CoreFoundation.CGFloat) -> Self
  @available(*, deprecated)
  public func set(reactionAlignment: CometChatUIKitSwift.MessageBubbleAlignment) -> Self
  @discardableResult
  public func set(onReactionsLongPressed: @escaping ((_ reaction: CometChatSDK.ReactionCount, _ baseMessage: CometChatSDK.BaseMessage?) -> ())) -> Self
  @discardableResult
  public func set(onReactionsPressed: @escaping ((_ reaction: CometChatSDK.ReactionCount, _ baseMessage: CometChatSDK.BaseMessage?) -> ())) -> Self
  @discardableResult
  public func set(style: CometChatUIKitSwift.ReactionsStyle) -> Self
  @objc deinit
}
@_inheritsConvenienceInitializers public class AIConversationSummaryConfiguration : CometChatUIKitSwift.AIParentConfiguration {
  @discardableResult
  public func set(title: Swift.String) -> Self
  @discardableResult
  public func set(closeIcon: UIKit.UIImage) -> Self
  @discardableResult
  public func set(summaryStyle: CometChatUIKitSwift.AIConversationSummaryStyle) -> Self
  @discardableResult
  public func set(customView: ((_ response: Swift.String, _ closeCallBack: @escaping () -> Swift.Void) -> UIKit.UIView)?) -> Self
  @discardableResult
  public func set(unreadMessageThreshold: Swift.Int) -> Self
  @discardableResult
  public func set(apiConfiguration: ((_ user: CometChatSDK.User?, _ group: CometChatSDK.Group?, _ configuration: ((_ configuration: [Swift.String : Any]) -> Swift.Void)) -> ())?) -> Self
  override public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency open class CometChatQuickReactions : UIKit.UIStackView {
  @_Concurrency.MainActor @preconcurrency public static var style: CometChatUIKitSwift.QuickReactionsStyle
  @_Concurrency.MainActor @preconcurrency public var style: CometChatUIKitSwift.QuickReactionsStyle {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var addReactionIcon: UIKit.UIImage?
  public enum Direction {
    case left
    case right
    public static func == (a: CometChatUIKitSwift.CometChatQuickReactions.Direction, b: CometChatUIKitSwift.CometChatQuickReactions.Direction) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init(coder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func willMove(toWindow newWindow: UIKit.UIWindow?)
  @_Concurrency.MainActor @preconcurrency public func dismissAnimation()
  @_Concurrency.MainActor @preconcurrency public func presentAnimation(animationDirection: CometChatUIKitSwift.CometChatQuickReactions.Direction)
  @objc deinit
}
extension CometChatUIKitSwift.CometChatQuickReactions {
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(reactions: [Swift.String]) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(onReacted: ((_ reaction: Swift.String?) -> Swift.Void)?) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(onAddReactionIconTapped: (() -> Swift.Void)?) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(addReactionIcon: UIKit.UIImage?) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(configuration: CometChatUIKitSwift.QuickReactionsConfiguration?) -> Self
}
public class DataSourceDecorator : CometChatUIKitSwift.DataSource {
  public init(dataSource: any CometChatUIKitSwift.DataSource)
  public func getMessageTypeToSubtitle(messageType: Swift.String, controller: UIKit.UIViewController) -> Swift.String?
  public func getAttachmentOptions(controller: UIKit.UIViewController, user: CometChatSDK.User?, group: CometChatSDK.Group?, id: [Swift.String : Any]?, additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration) -> [CometChatUIKitSwift.CometChatMessageComposerAction]?
  public func getAllMessageTypes() -> [Swift.String]?
  public func getAllMessageCategories() -> [Swift.String]?
  public func getMessageOptions(loggedInUser: CometChatSDK.User, messageObject: CometChatSDK.BaseMessage, controller: UIKit.UIViewController?, group: CometChatSDK.Group?, additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration) -> [CometChatUIKitSwift.CometChatMessageOption]?
  public func getTextMessageOptions(loggedInUser: CometChatSDK.User, messageObject: CometChatSDK.BaseMessage, controller: UIKit.UIViewController?, group: CometChatSDK.Group?, additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration) -> [CometChatUIKitSwift.CometChatMessageOption]?
  public func getImageMessageOptions(loggedInUser: CometChatSDK.User, messageObject: CometChatSDK.BaseMessage, controller: UIKit.UIViewController?, group: CometChatSDK.Group?, additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration) -> [CometChatUIKitSwift.CometChatMessageOption]?
  public func getVideoMessageOptions(loggedInUser: CometChatSDK.User, messageObject: CometChatSDK.BaseMessage, controller: UIKit.UIViewController?, group: CometChatSDK.Group?, additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration) -> [CometChatUIKitSwift.CometChatMessageOption]?
  public func getAudioMessageOptions(loggedInUser: CometChatSDK.User, messageObject: CometChatSDK.BaseMessage, controller: UIKit.UIViewController?, group: CometChatSDK.Group?, additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration) -> [CometChatUIKitSwift.CometChatMessageOption]?
  public func getFileMessageOptions(loggedInUser: CometChatSDK.User, messageObject: CometChatSDK.BaseMessage, controller: UIKit.UIViewController?, group: CometChatSDK.Group?, additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration) -> [CometChatUIKitSwift.CometChatMessageOption]?
  public func getCommonOptions(loggedInUser: CometChatSDK.User, messageObject: CometChatSDK.BaseMessage, controller: UIKit.UIViewController?, group: CometChatSDK.Group?, additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration) -> [CometChatUIKitSwift.CometChatMessageOption]
  public func getAuxiliaryOptions(user: CometChatSDK.User?, group: CometChatSDK.Group?, controller: UIKit.UIViewController?, id: [Swift.String : Any]?) -> UIKit.UIView?
  public func getAIOptions(controller: UIKit.UIViewController, user: CometChatSDK.User?, group: CometChatSDK.Group?, id: [Swift.String : Any]?, aiOptionsStyle: CometChatUIKitSwift.AIOptionsStyle?) -> [CometChatUIKitSwift.CometChatMessageComposerAction]?
  public func getId() -> Swift.String
  public func getLastConversationMessage(conversation: CometChatSDK.Conversation, additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration?) -> Foundation.NSAttributedString?
  public func getLastConversationMessage(conversation: CometChatSDK.Conversation) -> Swift.String?
  public func getAuxiliaryHeaderMenu(user: CometChatSDK.User?, group: CometChatSDK.Group?, controller: UIKit.UIViewController?, id: [Swift.String : Any]?, additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration) -> UIKit.UIStackView?
  public func getAllMessageTemplates(additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration?) -> [CometChatUIKitSwift.CometChatMessageTemplate]
  public func getTextMessageTemplate(additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration?) -> CometChatUIKitSwift.CometChatMessageTemplate
  public func getAudioMessageTemplate(additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration?) -> CometChatUIKitSwift.CometChatMessageTemplate
  public func getVideoMessageTemplate(additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration?) -> CometChatUIKitSwift.CometChatMessageTemplate
  public func getImageMessageTemplate(additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration?) -> CometChatUIKitSwift.CometChatMessageTemplate
  public func getGroupActionTemplate(additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration?) -> CometChatUIKitSwift.CometChatMessageTemplate
  public func getFileMessageTemplate(additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration?) -> CometChatUIKitSwift.CometChatMessageTemplate
  public func getFormMessageTemplate(additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration?) -> CometChatUIKitSwift.CometChatMessageTemplate
  public func getSchedulerMessageTemplate(additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration?) -> CometChatUIKitSwift.CometChatMessageTemplate
  public func getCardMessageTemplate(additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration?) -> CometChatUIKitSwift.CometChatMessageTemplate
  public func getMessageTemplate(messageType: Swift.String, messageCategory: Swift.String, additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration?) -> CometChatUIKitSwift.CometChatMessageTemplate?
  public func getBottomView(message: CometChatSDK.BaseMessage, controller: UIKit.UIViewController?, alignment: CometChatUIKitSwift.MessageBubbleAlignment, additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration?) -> UIKit.UIView?
  public func getTextMessageContentView(message: CometChatSDK.TextMessage, controller: UIKit.UIViewController?, alignment: CometChatUIKitSwift.MessageBubbleAlignment, style: CometChatUIKitSwift.TextBubbleStyle?, additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration?) -> UIKit.UIView?
  public func getImageMessageContentView(message: CometChatSDK.MediaMessage, controller: UIKit.UIViewController?, alignment: CometChatUIKitSwift.MessageBubbleAlignment, style: CometChatUIKitSwift.ImageBubbleStyle?, additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration?) -> UIKit.UIView?
  public func getVideoMessageContentView(message: CometChatSDK.MediaMessage, controller: UIKit.UIViewController?, alignment: CometChatUIKitSwift.MessageBubbleAlignment, style: CometChatUIKitSwift.VideoBubbleStyle?, additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration?) -> UIKit.UIView?
  public func getFileMessageContentView(message: CometChatSDK.MediaMessage, controller: UIKit.UIViewController?, alignment: CometChatUIKitSwift.MessageBubbleAlignment, style: CometChatUIKitSwift.FileBubbleStyle?, additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration?) -> UIKit.UIView?
  public func getAudioMessageContentView(message: CometChatSDK.MediaMessage, controller: UIKit.UIViewController?, alignment: CometChatUIKitSwift.MessageBubbleAlignment, style: CometChatUIKitSwift.AudioBubbleStyle?, additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration?) -> UIKit.UIView?
  public func getFormMessageContentView(message: CometChatUIKitSwift.FormMessage, controller: UIKit.UIViewController?, alignment: CometChatUIKitSwift.MessageBubbleAlignment, style: CometChatUIKitSwift.FormBubbleStyle?, additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration?) -> UIKit.UIView?
  public func getSchedulerContentView(message: CometChatUIKitSwift.SchedulerMessage, controller: UIKit.UIViewController?, alignment: CometChatUIKitSwift.MessageBubbleAlignment, style: CometChatUIKitSwift.SchedulerBubbleStyle?, additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration?) -> UIKit.UIView?
  public func getCardMessageContentView(message: CometChatUIKitSwift.CardMessage, controller: UIKit.UIViewController?, alignment: CometChatUIKitSwift.MessageBubbleAlignment, style: CometChatUIKitSwift.CardBubbleStyle?, additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration?) -> UIKit.UIView?
  public func getDeleteMessageBubble(messageObject: CometChatSDK.BaseMessage, additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration?) -> UIKit.UIView?
  public func getVideoMessageBubble(videoUrl: Swift.String?, thumbnailUrl: Swift.String?, message: CometChatSDK.MediaMessage?, controller: UIKit.UIViewController?, style: CometChatUIKitSwift.VideoBubbleStyle?, additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration?) -> UIKit.UIView?
  public func getTextMessageBubble(messageText: Swift.String?, message: CometChatSDK.TextMessage?, controller: UIKit.UIViewController?, alignment: CometChatUIKitSwift.MessageBubbleAlignment, style: CometChatUIKitSwift.TextBubbleStyle?, additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration?) -> UIKit.UIView?
  public func getImageMessageBubble(imageUrl: Swift.String?, caption: Swift.String?, message: CometChatSDK.MediaMessage?, controller: UIKit.UIViewController?, style: CometChatUIKitSwift.ImageBubbleStyle?, additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration?) -> UIKit.UIView?
  public func getAudioMessageBubble(audioUrl: Swift.String?, title: Swift.String?, message: CometChatSDK.MediaMessage?, controller: UIKit.UIViewController?, style: CometChatUIKitSwift.AudioBubbleStyle?, additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration?) -> UIKit.UIView?
  public func getFormBubble(message: CometChatUIKitSwift.FormMessage?, controller: UIKit.UIViewController?, alignment: CometChatUIKitSwift.MessageBubbleAlignment, style: CometChatUIKitSwift.FormBubbleStyle?, additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration?) -> UIKit.UIView?
  public func getCardBubble(message: CometChatUIKitSwift.CardMessage?, controller: UIKit.UIViewController?, alignment: CometChatUIKitSwift.MessageBubbleAlignment, style: CometChatUIKitSwift.CardBubbleStyle?, additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration?) -> UIKit.UIView?
  public func getSchedulerBubble(message: CometChatUIKitSwift.SchedulerMessage?, controller: UIKit.UIViewController?, alignment: CometChatUIKitSwift.MessageBubbleAlignment, style: CometChatUIKitSwift.SchedulerBubbleStyle?, additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration?) -> UIKit.UIView?
  public func getFileMessageBubble(fileUrl: Swift.String?, fileMimeType: Swift.String?, title: Swift.String?, id: Swift.Int?, message: CometChatSDK.MediaMessage?, controller: UIKit.UIViewController?, style: CometChatUIKitSwift.FileBubbleStyle?, additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration?) -> UIKit.UIView?
  public func getTextFormatters() -> [CometChatUIKitSwift.CometChatTextFormatter]
  @objc deinit
}
public enum HyperlinkType {
  case mention
  case hashtag
  case url
  case custom(pattern: Swift.String)
}
extension CometChatUIKitSwift.HyperlinkType : Swift.Hashable, Swift.Equatable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public func == (lhs: CometChatUIKitSwift.HyperlinkType, rhs: CometChatUIKitSwift.HyperlinkType) -> Swift.Bool
extension CometChatUIKitSwift.MessageComposerViewModel : CometChatUIKitSwift.CometChatUserEventListener {
  @objc dynamic public func onUserUnblock(user: CometChatSDK.User)
  @objc dynamic public func onUserBlock(user: CometChatSDK.User)
}
public struct ImageBubbleStyle : CometChatUIKitSwift.BaseMessageBubbleStyle {
  public var backgroundColor: UIKit.UIColor?
  public var backgroundDrawable: UIKit.UIImage?
  public var borderWidth: CoreFoundation.CGFloat?
  public var borderColor: UIKit.UIColor?
  public var cornerRadius: CometChatUIKitSwift.CometChatCornerStyle?
  public var avatarStyle: CometChatUIKitSwift.AvatarStyle?
  public var dateStyle: CometChatUIKitSwift.DateStyle?
  public var receiptStyle: CometChatUIKitSwift.ReceiptStyle?
  public var headerTextColor: UIKit.UIColor?
  public var headerTextFont: UIKit.UIFont?
  public var threadedIndicatorTextFont: UIKit.UIFont?
  public var threadedIndicatorTextColor: UIKit.UIColor?
  public var threadedIndicatorImageTint: UIKit.UIColor?
  public var imageBorderWidth: CoreFoundation.CGFloat
  public var imageBorderCornerRadius: CometChatUIKitSwift.CometChatCornerStyle
  public var imageBorderColor: UIKit.UIColor
  public var reactionsStyle: CometChatUIKitSwift.ReactionsStyle?
  public init()
}
public struct CometChatEmoji : Swift.Decodable {
  public let keywords: [Swift.String]
  public let emoji: Swift.String
  public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers public class CometChatPollsExtension : CometChatUIKitSwift.ExtensionDataSource {
  public init()
  override public func addExtension()
  override public func getExtensionId() -> Swift.String
  @objc deinit
}
public struct CallActionBubbleStyle {
  public var backgroundColor: UIKit.UIColor
  public var callImage: UIKit.UIImage?
  public var callImageTintColor: UIKit.UIColor
  public var missedCallImageTintColor: UIKit.UIColor
  public var borderWidth: CoreFoundation.CGFloat
  public var borderColor: UIKit.UIColor
  public var cornerRadius: CometChatUIKitSwift.CometChatCornerStyle?
  public var callTextFont: UIKit.UIFont
  public var callTextColor: UIKit.UIColor
  public var missedCallTextFont: UIKit.UIFont
  public var missedCallTextColor: UIKit.UIColor
  public init()
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class CometChatMessageBubble : UIKit.UITableViewCell {
  @_Concurrency.MainActor @preconcurrency public var containerStackView: UIKit.UIStackView {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var headerView: UIKit.UIView {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var middleStackView: UIKit.UIStackView {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var bubbleStackView: UIKit.UIStackView {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var replayView: UIKit.UIView {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var messageContentView: UIKit.UIView {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var statusInfoView: UIKit.UIView {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var bottomView: UIKit.UIView {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var footerView: UIKit.UIView {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var viewReplyView: UIKit.UIView {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var leadingView: UIKit.UIStackView {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var avatarContainerView: UIKit.UIStackView {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var customBubbleView: UIKit.UIView?
  @_Concurrency.MainActor @preconcurrency public var bubbleViewSpacing: CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency public var leadingSpacer: UIKit.UIView {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var trailingSpacer: UIKit.UIView {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var avatar: CometChatUIKitSwift.CometChatAvatar {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public static var style: (incoming: CometChatUIKitSwift.MessageBubbleStyle, outgoing: CometChatUIKitSwift.MessageBubbleStyle)
  @_Concurrency.MainActor @preconcurrency public static var actionBubbleStyle: CometChatUIKitSwift.GroupActionBubbleStyle
  @_Concurrency.MainActor @preconcurrency public static var callActionBubbleStyle: CometChatUIKitSwift.CallActionBubbleStyle
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency open func buildUI()
  @_Concurrency.MainActor @preconcurrency open func buildMiddleStackView()
  @_Concurrency.MainActor @preconcurrency open func buildBubbleStackView()
  @_Concurrency.MainActor @preconcurrency open func buildAvatarView()
  @_Concurrency.MainActor @preconcurrency public func set(bubbleAlignment: CometChatUIKitSwift.MessageBubbleAlignment)
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(avatarURL url: Swift.String? = nil, avatarName name: Swift.String? = nil) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func hide(avatar: Swift.Bool) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func hide(headerView: Swift.Bool) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func onLongPressGestureRecognised(gesture: @escaping (() -> Swift.Void)) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func hide(footerView: Swift.Bool) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(actionSheetStyle: CometChatUIKitSwift.ActionSheetStyle) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(bubbleView: UIKit.UIView?) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(headerView: UIKit.UIView) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(footerView: UIKit.UIView) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(contentView: UIKit.UIView) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(bottomView: UIKit.UIView) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(statusInfoView: UIKit.UIView) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(viewReply: UIKit.UIView) -> Self
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func prepareForReuse()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldRecognizeSimultaneouslyWith otherGestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class CometChatEmojiKeyboard : UIKit.UIViewController {
  @_Concurrency.MainActor @preconcurrency public static var style: CometChatUIKitSwift.EmojiKeyboardStyle
  @_Concurrency.MainActor @preconcurrency public var style: CometChatUIKitSwift.EmojiKeyboardStyle
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func setOnClick(onClick: @escaping ((_ emoji: CometChatUIKitSwift.CometChatEmoji) -> Swift.Void)) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(onCancel: @escaping (() -> ())) -> Self
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension CometChatUIKitSwift.CometChatEmojiKeyboard : UIKit.UICollectionViewDelegate, UIKit.UICollectionViewDataSource, UIKit.UICollectionViewDelegateFlowLayout {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func numberOfSections(in collectionView: UIKit.UICollectionView) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, sizeForItemAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGSize
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, insetForSectionAt section: Swift.Int) -> UIKit.UIEdgeInsets
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, viewForSupplementaryElementOfKind kind: Swift.String, at indexPath: Foundation.IndexPath) -> UIKit.UICollectionReusableView
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, referenceSizeForHeaderInSection section: Swift.Int) -> CoreFoundation.CGSize
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, didEndDisplaying cell: UIKit.UICollectionViewCell, forItemAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor @preconcurrency @objc dynamic open func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor @preconcurrency @objc dynamic open func scrollViewWillBeginDragging(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor @preconcurrency @objc dynamic open func scrollViewDidEndDragging(_ scrollView: UIKit.UIScrollView, willDecelerate decelerate: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc dynamic open func scrollViewWillBeginDecelerating(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func scrollViewWillEndDragging(_ scrollView: UIKit.UIScrollView, withVelocity velocity: CoreFoundation.CGPoint, targetContentOffset: Swift.UnsafeMutablePointer<CoreFoundation.CGPoint>)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, willDisplay cell: UIKit.UICollectionViewCell, forItemAt indexPath: Foundation.IndexPath)
}
extension CometChatUIKitSwift.CometChatEmojiKeyboard {
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func hide(headerView: Swift.Bool) -> Self
}
open class QuickReactionsConfiguration {
  public init()
  @discardableResult
  public func set(onReacted: ((_ reaction: Swift.String?) -> Swift.Void)?) -> Self
  @discardableResult
  public func set(onAddReactionIconTapped: (() -> Swift.Void)?) -> Self
  @discardableResult
  public func set(reactionList: [Swift.String]?) -> Self
  @discardableResult
  public func set(addReactionIcon: UIKit.UIImage?) -> Self
  @discardableResult
  public func set(style: CometChatUIKitSwift.QuickReactionsStyle?) -> Self
  @objc deinit
}
public protocol ListBaseStyle {
  var backgroundColor: UIKit.UIColor { get set }
  var borderWidth: CoreFoundation.CGFloat { get set }
  var borderColor: UIKit.UIColor { get set }
  var cornerRadius: CometChatUIKitSwift.CometChatCornerStyle { get set }
  var titleColor: UIKit.UIColor? { get set }
  var titleFont: UIKit.UIFont? { get set }
  var largeTitleColor: UIKit.UIColor? { get set }
  var largeTitleFont: UIKit.UIFont? { get set }
  var navigationBarTintColor: UIKit.UIColor? { get set }
  var navigationBarItemsTintColor: UIKit.UIColor? { get set }
  var errorTitleTextFont: UIKit.UIFont { get set }
  var errorTitleTextColor: UIKit.UIColor { get set }
  var errorSubTitleFont: UIKit.UIFont { get set }
  var errorSubTitleTextColor: UIKit.UIColor { get set }
  var retryButtonTextColor: UIKit.UIColor { get set }
  var retryButtonTextFont: UIKit.UIFont { get set }
  var retryButtonBackgroundColor: UIKit.UIColor { get set }
  var retryButtonBorderColor: UIKit.UIColor { get set }
  var retryButtonBorderWidth: CoreFoundation.CGFloat { get set }
  var retryButtonCornerRadius: CometChatUIKitSwift.CometChatCornerStyle { get set }
  var emptyTitleTextFont: UIKit.UIFont { get set }
  var emptyTitleTextColor: UIKit.UIColor { get set }
  var emptySubTitleFont: UIKit.UIFont { get set }
  var emptySubTitleTextColor: UIKit.UIColor { get set }
  var tableViewSeparator: UIKit.UIColor { get set }
}
public protocol SearchBarStyle {
  var searchTintColor: UIKit.UIColor? { get set }
  var searchBarTintColor: UIKit.UIColor? { get set }
  var searchBarStyle: UIKit.UISearchBar.Style { get set }
  var searchBarPlaceholderTextColor: UIKit.UIColor? { get set }
  var searchBarPlaceholderTextFont: UIKit.UIFont? { get set }
  var searchBarTextColor: UIKit.UIColor? { get set }
  var searchBarTextFont: UIKit.UIFont? { get set }
  var searchBarBackgroundColor: UIKit.UIColor? { get set }
  var searchBarCancelIconTintColor: UIKit.UIColor? { get set }
  var searchBarCrossIconTintColor: UIKit.UIColor? { get set }
  var searchIconTintColor: UIKit.UIColor? { get set }
}
public class DateTimeFormatterUtils {
  public init()
  public func getFormattedDateFromClosures(timeStamp: Swift.Int, dateTimeFormatter: CometChatUIKitSwift.CometChatDateTimeFormatter?) -> Swift.String?
  @objc deinit
}
public struct VideoBubbleStyle : CometChatUIKitSwift.BaseMessageBubbleStyle {
  public var threadedIndicatorTextFont: UIKit.UIFont?
  public var threadedIndicatorTextColor: UIKit.UIColor?
  public var threadedIndicatorImageTint: UIKit.UIColor?
  public var headerTextColor: UIKit.UIColor?
  public var headerTextFont: UIKit.UIFont?
  public var backgroundColor: UIKit.UIColor?
  public var backgroundDrawable: UIKit.UIImage?
  public var borderWidth: CoreFoundation.CGFloat?
  public var borderColor: UIKit.UIColor?
  public var cornerRadius: CometChatUIKitSwift.CometChatCornerStyle?
  public var avatarStyle: CometChatUIKitSwift.AvatarStyle?
  public var dateStyle: CometChatUIKitSwift.DateStyle?
  public var receiptStyle: CometChatUIKitSwift.ReceiptStyle?
  public var playButtonTint: UIKit.UIColor
  public var playButtonBackgroundColor: UIKit.UIColor
  public var videoBorderWidth: CoreFoundation.CGFloat
  public var videoCornerRadius: CometChatUIKitSwift.CometChatCornerStyle
  public var videoBorderColor: UIKit.UIColor
  public var reactionsStyle: CometChatUIKitSwift.ReactionsStyle?
  public init()
}
extension CometChatUIKitSwift.UsersViewModel : CometChatSDK.CometChatUserDelegate {
  @objc dynamic public func onUserOnline(user: CometChatSDK.User)
  @objc dynamic public func onUserOffline(user: CometChatSDK.User)
}
extension CometChatUIKitSwift.UsersViewModel : CometChatUIKitSwift.CometChatUserEventListener {
  @objc dynamic public func ccUserUnblocked(user: CometChatSDK.User)
  @objc dynamic public func ccUserBlocked(user: CometChatSDK.User)
}
@_hasMissingDesignatedInitializers public class CollaborativeDocumentBubbleConfiguration {
  @discardableResult
  public func set(style: CometChatUIKitSwift.CometChatCollaborativeBubble) -> Self
  @discardableResult
  public func set(iconURL: Swift.String) -> Self
  @objc deinit
}
@_inheritsConvenienceInitializers final public class EmojiKeyboardStyle : CometChatUIKitSwift.BaseStyle {
  @discardableResult
  final public func set(sectionHeaderFont: UIKit.UIFont) -> Self
  @discardableResult
  final public func set(sectionHeaderColor: UIKit.UIColor) -> Self
  @discardableResult
  final public func set(categoryIconTint: UIKit.UIColor) -> Self
  @discardableResult
  final public func set(selectedCategoryIconTint: UIKit.UIColor) -> Self
  @discardableResult
  final public func set(titleColor: UIKit.UIColor) -> Self
  @discardableResult
  final public func set(titleFont: UIKit.UIFont) -> Self
  @discardableResult
  final public func set(cancelButtonTint: UIKit.UIColor) -> Self
  override public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DefaultExtensions {
  public static var listOfAIExtensions: () -> [CometChatUIKitSwift.ExtensionDataSource]
  public static var listOfExtensions: () -> [CometChatUIKitSwift.ExtensionDataSource]
  @objc deinit
}
@_hasMissingDesignatedInitializers public class AIConversationStarterExtension : CometChatUIKitSwift.ExtensionDataSource {
  public init(configuration: CometChatUIKitSwift.AIConversationStarterConfiguration? = nil)
  override public func enable()
  override public func addExtension()
  override public func getExtensionId() -> Swift.String
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor open class CometChatOutgoingCall : UIKit.UIViewController {
  @_Concurrency.MainActor public var avatarTopView: UIKit.UIView {
    get
    set
  }
  @_Concurrency.MainActor public var avatar: CometChatUIKitSwift.CometChatAvatar {
    get
    set
  }
  @_Concurrency.MainActor public var titleContainerView: UIKit.UIView {
    get
    set
  }
  @_Concurrency.MainActor public var subtitleContainerView: UIKit.UIView {
    get
    set
  }
  @_Concurrency.MainActor public var nameLabel: UIKit.UILabel {
    get
    set
  }
  @_Concurrency.MainActor public var callingLabel: UIKit.UILabel {
    get
    set
  }
  @_Concurrency.MainActor public var declineButtonView: UIKit.UIView {
    get
    set
  }
  @_Concurrency.MainActor public var declineButton: UIKit.UIButton {
    get
    set
  }
  @_Concurrency.MainActor public var containerView: UIKit.UIView {
    get
    set
  }
  @_Concurrency.MainActor public static var style: CometChatUIKitSwift.OutgoingCallStyle
  @_Concurrency.MainActor public static var avatarStyle: CometChatUIKitSwift.AvatarStyle
  @_Concurrency.MainActor public var avatarStyle: CometChatUIKitSwift.AvatarStyle
  @_Concurrency.MainActor public var style: CometChatUIKitSwift.OutgoingCallStyle
  @_Concurrency.MainActor public var call: CometChatSDK.Call?
  @_Concurrency.MainActor public var user: CometChatSDK.User?
  @_Concurrency.MainActor public var declineButtonText: Swift.String
  @_Concurrency.MainActor public var declineButtonIcon: UIKit.UIImage
  @_Concurrency.MainActor public var disableSoundForCalls: Swift.Bool
  @_Concurrency.MainActor public var customSoundForCalls: Foundation.URL?
  @_Concurrency.MainActor public var fullscreenView: UIKit.UIView?
  @_Concurrency.MainActor public var buttonStyle: CometChatUIKitSwift.ButtonStyle
  @_Concurrency.MainActor public var outgoingCallStyle: CometChatUIKitSwift.OutgoingCallStyle
  @_Concurrency.MainActor @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor open func buildUI()
  @_Concurrency.MainActor open func setupStyle()
  @objc @_Concurrency.MainActor open func onDeclineButtonTapped()
  @_Concurrency.MainActor @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public struct LinkPreviewBubbleStyle : CometChatUIKitSwift.BaseMessageBubbleStyle {
  public var threadedIndicatorTextFont: UIKit.UIFont?
  public var threadedIndicatorTextColor: UIKit.UIColor?
  public var threadedIndicatorImageTint: UIKit.UIColor?
  public var backgroundColor: UIKit.UIColor?
  public var backgroundDrawable: UIKit.UIImage?
  public var borderWidth: CoreFoundation.CGFloat?
  public var borderColor: UIKit.UIColor?
  public var cornerRadius: CometChatUIKitSwift.CometChatCornerStyle?
  public var avatarStyle: CometChatUIKitSwift.AvatarStyle?
  public var dateStyle: CometChatUIKitSwift.DateStyle?
  public var receiptStyle: CometChatUIKitSwift.ReceiptStyle?
  public var headerTextColor: UIKit.UIColor?
  public var headerTextFont: UIKit.UIFont?
  public var previewCornerRadius: CometChatUIKitSwift.CometChatCornerStyle
  public var previewBackgroundColor: UIKit.UIColor
  public var messageTextFont: UIKit.UIFont
  public var messageTextColor: UIKit.UIColor
  public var titleTextColor: UIKit.UIColor
  public var titleTextFont: UIKit.UIFont
  public var subtitleTextColor: UIKit.UIColor
  public var subtitleTextFont: UIKit.UIFont
  public var linkTextColor: UIKit.UIColor
  public var linkTextFont: UIKit.UIFont
  public var linkIconImageCornerRadios: CometChatUIKitSwift.CometChatCornerStyle
  public var textHighlightColor: UIKit.UIColor
  public var reactionsStyle: CometChatUIKitSwift.ReactionsStyle?
  public init()
}
extension CometChatUIKitSwift.CometChatUsers {
  @_Concurrency.MainActor public func set(userRequestBuilder: CometChatSDK.UsersRequest.UsersRequestBuilder) -> Self
  @_Concurrency.MainActor public func set(searchRequestBuilder: CometChatSDK.UsersRequest.UsersRequestBuilder) -> Self
  @_Concurrency.MainActor public func set(searchKeyword: Swift.String) -> Self
  @discardableResult
  @_Concurrency.MainActor public func set(onSelection: @escaping ((_ user: [CometChatSDK.User]) -> Swift.Void)) -> Self
  @discardableResult
  @_Concurrency.MainActor public func set(subtitle: ((_ user: CometChatSDK.User?) -> UIKit.UIView)?) -> Self
  @discardableResult
  @_Concurrency.MainActor public func set(listItemView: ((_ user: CometChatSDK.User?) -> UIKit.UIView)?) -> Self
  @discardableResult
  @_Concurrency.MainActor public func set(titleView: ((_ user: CometChatSDK.User?) -> UIKit.UIView)?) -> Self
  @discardableResult
  @_Concurrency.MainActor public func set(leadingView: ((_ user: CometChatSDK.User?) -> UIKit.UIView)?) -> Self
  @discardableResult
  @_Concurrency.MainActor public func set(trailingView: ((_ user: CometChatSDK.User?) -> UIKit.UIView)?) -> Self
  @discardableResult
  @_Concurrency.MainActor public func set(options: ((_ user: CometChatSDK.User?) -> [CometChatUIKitSwift.CometChatUserOption])?) -> Self
  @discardableResult
  @_Concurrency.MainActor public func add(options: ((_ user: CometChatSDK.User?) -> [CometChatUIKitSwift.CometChatUserOption])?) -> Self
  @discardableResult
  @_Concurrency.MainActor public func set(onItemClick: @escaping ((_ user: CometChatSDK.User, _ indexPath: Foundation.IndexPath?) -> Swift.Void)) -> Self
  @discardableResult
  @_Concurrency.MainActor public func set(onItemLongClick: @escaping ((_ user: CometChatSDK.User, _ indexPath: Foundation.IndexPath) -> Swift.Void)) -> Self
  @discardableResult
  @_Concurrency.MainActor public func set(onError: @escaping ((_ error: CometChatSDK.CometChatException) -> Swift.Void)) -> Self
  @discardableResult
  @_Concurrency.MainActor public func set(onLoad: @escaping (([[CometChatSDK.User]]) -> Swift.Void)) -> Self
  @discardableResult
  @_Concurrency.MainActor public func set(onEmpty: @escaping (() -> Swift.Void)) -> Self
  @discardableResult
  @_Concurrency.MainActor public func set(selectionLimit: Swift.Int) -> Self
}
extension UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public class func fromNib<T>() -> T where T : UIKit.UIView
}
public class GroupMembersUtils {
  public init()
  public func getViewMemberOptions(group: CometChatSDK.Group, groupMember: CometChatSDK.GroupMember) -> [CometChatUIKitSwift.CometChatGroupMemberOption]?
  public func getBannedMemberOptions(group: CometChatSDK.Group, groupMember: CometChatSDK.GroupMember) -> [CometChatUIKitSwift.CometChatGroupMemberOption]?
  public static func allowKickBanUnbanMember(group: CometChatSDK.Group, groupMember: CometChatSDK.GroupMember) -> Swift.Bool
  public static func allowScopeChange(group: CometChatSDK.Group, groupMember: CometChatSDK.GroupMember) -> Swift.Bool
  @objc deinit
}
@available(*, deprecated)
public class CometChatMessageReaction {
  @available(*, deprecated)
  public init()
  @objc deinit
}
public struct ScopeChangeStyle {
  public var backgroundColor: UIKit.UIColor
  public var borderColor: UIKit.UIColor
  public var borderWidth: CoreFoundation.CGFloat
  public var cornerRadius: CometChatUIKitSwift.CometChatCornerStyle?
  public var changeImage: UIKit.UIImage
  public var changeImageTintColor: UIKit.UIColor
  public var titleTextColor: UIKit.UIColor
  public var titleFont: UIKit.UIFont
  public var subtitleTextColor: UIKit.UIColor
  public var subtitleFont: UIKit.UIFont
  public var saveButtonTintColor: UIKit.UIColor
  public var cancelButonTintColor: UIKit.UIColor
  public var optionContainerBorderColor: UIKit.UIColor
  public var optionContainerBorderWidth: CoreFoundation.CGFloat
  public var optionsContainerCornerRadius: CometChatUIKitSwift.CometChatCornerStyle
  public var selectedOptionBackgroundColor: UIKit.UIColor
  public var optionBackgroundColor: UIKit.UIColor
  public var optionTextColor: UIKit.UIColor
  public var selectedOptionTextColor: UIKit.UIColor
  public var optionFont: UIKit.UIFont
  public var selectedOptionImage: UIKit.UIImage?
  public var optionImage: UIKit.UIImage?
  public init()
}
@_inheritsConvenienceInitializers public class AISmartRepliesConfiguration : CometChatUIKitSwift.AIParentConfiguration {
  @discardableResult
  public func set(customView: ((_ reply: [Swift.String : Swift.String]) -> UIKit.UIView?)?) -> Self
  @discardableResult
  public func set(apiConfiguration: ((_ user: CometChatSDK.User?, _ group: CometChatSDK.Group?, _ configuration: ((_ configuration: [Swift.String : Any]) -> ())) -> Swift.Void)?) -> Self
  override public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class CometChatTimeSlotSelector : UIKit.UIStackView {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init(coder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency public func buildUI()
  @objc deinit
}
extension CometChatUIKitSwift.CometChatTimeSlotSelector {
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(icsFileUrl: Swift.String?) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(style: CometChatUIKitSwift.TimeSlotSelectorStyle?) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(date: Foundation.Date?) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(duration: Swift.Int) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(bufferTime: Swift.Int) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(onTimeSelected: ((CometChatUIKitSwift.TimeRange, Foundation.Date) -> ())?) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(availability: [Swift.String : [CometChatUIKitSwift.TimeRange]]) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(isTableViewUpdating: ((Swift.Bool) -> ())?) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func hide(dateText: Swift.Bool) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func hide(timeZone: Swift.Bool) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func hide(selectTimeText: Swift.Bool) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(timeZone: Swift.String) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func build() -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(unavailableTimeRange: [Swift.String : [CometChatUIKitSwift.TimeRange]]?) -> Self
}
@_inheritsConvenienceInitializers @objc public class SingleSelectElement : CometChatUIKitSwift.ElementEntity {
  @objc public var optional: Swift.Bool
  @objc public var label: Swift.String
  @objc public var defaultValue: Swift.String
  @objc public var options: [CometChatUIKitSwift.OptionElement]
  @objc override dynamic public init()
  @objc public static func singleSelectElementFromJSON(_ data: [Swift.String : Any]) -> CometChatUIKitSwift.SingleSelectElement?
  public func toJSON() -> [Swift.String : Any]
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class CometChatLinkPreviewBubble : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public var previewContainerStackView: UIKit.UIStackView {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var previewTextContainerStackView: UIKit.UIStackView {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var title: UIKit.UILabel {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var titleContainerStackView: UIKit.UIStackView {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var subtitle: UIKit.UILabel {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var linkLabel: UIKit.UILabel {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var messageLabel: CometChatUIKitSwift.HyperlinkLabel {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var thumbnailImageView: UIKit.UIImageView {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var linkIconImageView: UIKit.UIImageView {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var style: CometChatUIKitSwift.LinkPreviewBubbleStyle
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency convenience public init(frame: CoreFoundation.CGRect, message: CometChatSDK.TextMessage)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func willMove(toSuperview newSuperview: UIKit.UIView?)
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(message: CometChatSDK.TextMessage) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(controller: UIKit.UIViewController?) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(attributedText: Foundation.NSAttributedString) -> Self
  @_Concurrency.MainActor @preconcurrency open func buildUI()
  @_Concurrency.MainActor @preconcurrency open func setupStyle()
  @objc deinit
}
extension CometChatUIKitSwift.CometChatLinkPreviewBubble : MessageUI.MFMailComposeViewControllerDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func mailComposeController(_ controller: MessageUI.MFMailComposeViewController, didFinishWith result: MessageUI.MFMailComposeResult, error: (any Swift.Error)?)
}
@_inheritsConvenienceInitializers public class ThumbnailGenerationViewModel : CometChatUIKitSwift.DataSourceDecorator {
  override public init(dataSource: any CometChatUIKitSwift.DataSource)
  override public func getId() -> Swift.String
  override public func getImageMessageBubble(imageUrl: Swift.String?, caption: Swift.String?, message: CometChatSDK.MediaMessage?, controller: UIKit.UIViewController?, style: CometChatUIKitSwift.ImageBubbleStyle?, additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration?) -> UIKit.UIView?
  override public func getVideoMessageBubble(videoUrl: Swift.String?, thumbnailUrl: Swift.String?, message: CometChatSDK.MediaMessage?, controller: UIKit.UIViewController?, style: CometChatUIKitSwift.VideoBubbleStyle?, additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration?) -> UIKit.UIView?
  public func getThumbnailGeneration(message: CometChatSDK.MediaMessage) -> Swift.String?
  public func checkForThumbnail(message: CometChatSDK.MediaMessage) -> Swift.String?
  @objc deinit
}
public struct CallBubbleStyle : CometChatUIKitSwift.BaseMessageBubbleStyle {
  public var avatarStyle: CometChatUIKitSwift.AvatarStyle?
  public var dateStyle: CometChatUIKitSwift.DateStyle?
  public var receiptStyle: CometChatUIKitSwift.ReceiptStyle?
  public var backgroundColor: UIKit.UIColor?
  public var backgroundDrawable: UIKit.UIImage?
  public var cornerRadius: CometChatUIKitSwift.CometChatCornerStyle?
  public var borderWidth: CoreFoundation.CGFloat?
  public var borderColor: UIKit.UIColor?
  public var headerTextColor: UIKit.UIColor?
  public var headerTextFont: UIKit.UIFont?
  public var threadedIndicatorTextFont: UIKit.UIFont?
  public var threadedIndicatorTextColor: UIKit.UIColor?
  public var threadedIndicatorImageTint: UIKit.UIColor?
  public var titleTextFont: UIKit.UIFont
  public var titleTextColor: UIKit.UIColor
  public var subtitleTextFont: UIKit.UIFont
  public var subtitleTextColor: UIKit.UIColor
  public var joinButtonTextColor: UIKit.UIColor
  public var joinButtonTextFont: UIKit.UIFont
  public var callImageTintColor: UIKit.UIColor
  public var audioCallImage: UIKit.UIImage
  public var videoCallImage: UIKit.UIImage
  public var callImageBackgroundColor: UIKit.UIColor
  public var callImageBorderWidth: CoreFoundation.CGFloat
  public var callImageBorderColor: UIKit.UIColor
  public var callImageCornerRadius: CometChatUIKitSwift.CometChatCornerStyle?
  public var separatorBackgroundColor: UIKit.UIColor
  public var reactionsStyle: CometChatUIKitSwift.ReactionsStyle?
  public init()
}
public class AdditionalConfiguration {
  public var textFormatter: [CometChatUIKitSwift.CometChatTextFormatter]
  public var messageBubbleStyle: (incoming: CometChatUIKitSwift.MessageBubbleStyle, outgoing: CometChatUIKitSwift.MessageBubbleStyle)
  public var actionBubbleStyle: CometChatUIKitSwift.GroupActionBubbleStyle
  public var conversationsStyle: CometChatUIKitSwift.ConversationsStyle
  public var callActionBubbleStyle: CometChatUIKitSwift.CallActionBubbleStyle
  public var hideImageAttachmentOption: Swift.Bool
  public var hideVideoAttachmentOption: Swift.Bool
  public var hideFileAttachmentOption: Swift.Bool
  public var hidePollsOption: Swift.Bool
  public var hideCollaborativeDocumentOption: Swift.Bool
  public var hideCollaborativeWhiteboardOption: Swift.Bool
  public var hideAttachmentButton: Swift.Bool
  public var hideVoiceRecordingButton: Swift.Bool
  public var hideStickersButton: Swift.Bool
  public var hideReplyInThreadOption: Swift.Bool
  public var hideTranslateMessageOption: Swift.Bool
  public var hideEditMessageOption: Swift.Bool
  public var hideDeleteMessageOption: Swift.Bool
  public var hideReactionOption: Swift.Bool
  public var hideMessagePrivatelyOption: Swift.Bool
  public var hideCopyMessageOption: Swift.Bool
  public var hideMessageInfoOption: Swift.Bool
  public var hideShareMessageOption: Swift.Bool
  public var hideVideoCallButton: Swift.Bool
  public var hideVoiceCallButton: Swift.Bool
  public init()
  @objc deinit
}
extension CometChatUIKitSwift.AdditionalConfiguration {
  @discardableResult
  public func set(textFormatter: [CometChatUIKitSwift.CometChatTextFormatter]) -> Self
}
public enum Sound {
  case incomingCall
  case incomingMessage
  case incomingMessageFromOther
  case outgoingCall
  case outgoingMessage
  public static func == (a: CometChatUIKitSwift.Sound, b: CometChatUIKitSwift.Sound) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public var audioPlayer: AVFAudio.AVAudioPlayer?
public let audioQueue: Dispatch.DispatchQueue
public var audioWorkItem: Dispatch.DispatchWorkItem?
@objc @_inheritsConvenienceInitializers public class CometChatSoundManager : ObjectiveC.NSObject {
  @discardableResult
  public func play(sound: CometChatUIKitSwift.Sound, customSound: Foundation.URL? = nil) -> CometChatUIKitSwift.CometChatSoundManager
  @discardableResult
  public func pause() -> CometChatUIKitSwift.CometChatSoundManager
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class SchedulerUtils {
  public static func getAvailableTimeSlots(ICSFile: Swift.String?, forDate date: Foundation.Date, availableTimes: [Swift.String : [CometChatUIKitSwift.TimeRange]], bufferTime: Swift.Int, duration: Swift.Int, timeZoneCode: Swift.String, completion: @escaping ([CometChatUIKitSwift.TimeRange]?) -> ())
  public static func generateTimeSlots(allAvailableTimes: [Swift.String : [CometChatUIKitSwift.TimeRange]], allUnAvailableTime: [Swift.String : [CometChatUIKitSwift.TimeRange]], forDate date: Foundation.Date, bufferTime: Swift.Int, duration: Swift.Int, timeZoneCode: Swift.String, completion: @escaping ([CometChatUIKitSwift.TimeRange]?) -> ())
  public static func checkTimeSlotAvailable(icsFileURL: Swift.String?, date: Foundation.Date, timeSlot: CometChatUIKitSwift.TimeRange, completion: @escaping ((Swift.Bool) -> ()), failure: ((CometChatSDK.CometChatException) -> ())? = nil)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc @IBDesignable @_Concurrency.MainActor @preconcurrency public class CometChatMessageHeader : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public var backButton: UIKit.UIButton {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var leadingConatinerView: UIKit.UIView {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var backButtonView: UIKit.UIButton {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var avatar: CometChatUIKitSwift.CometChatAvatar {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var titleLabel: UIKit.UILabel {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var titleLabelView: UIKit.UIView {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var subtitleLabel: UIKit.UILabel {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var subtitle: UIKit.UIView {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var tailView: UIKit.UIStackView {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var statusIndicator: CometChatUIKitSwift.CometChatStatusIndicator {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public static var style: CometChatUIKitSwift.MessageHeaderStyle
  @_Concurrency.MainActor @preconcurrency public static var statusIndicatorStyle: CometChatUIKitSwift.StatusIndicatorStyle
  @_Concurrency.MainActor @preconcurrency public static var typingIndicatorStyle: CometChatUIKitSwift.TypingIndicatorStyle
  @_Concurrency.MainActor @preconcurrency public static var avatarStyle: CometChatUIKitSwift.AvatarStyle
  @_Concurrency.MainActor @preconcurrency public var titleContainerStackView: UIKit.UIStackView
  @_Concurrency.MainActor @preconcurrency public static var dateTimeFormatter: CometChatUIKitSwift.CometChatDateTimeFormatter
  @_Concurrency.MainActor @preconcurrency public var dateTimeFormatter: CometChatUIKitSwift.CometChatDateTimeFormatter {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var style: CometChatUIKitSwift.MessageHeaderStyle {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var statusIndicatorStyle: CometChatUIKitSwift.StatusIndicatorStyle {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var typingIndicatorStyle: CometChatUIKitSwift.TypingIndicatorStyle {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration
  @_Concurrency.MainActor @preconcurrency public var hideBackButton: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var hideUserStatus: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var hideVideoCallButton: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var hideVoiceCallButton: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var avatarStyle: CometChatUIKitSwift.AvatarStyle {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency open var viewModel: any CometChatUIKitSwift.MessageHeaderViewModelProtocol
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func willMove(toWindow newWindow: UIKit.UIWindow?)
  @objc deinit
  @_Concurrency.MainActor @preconcurrency open func buildUI()
  @_Concurrency.MainActor @preconcurrency open func setupStyle()
  @_Concurrency.MainActor @preconcurrency open func configure(user: CometChatSDK.User)
  @_Concurrency.MainActor @preconcurrency open func configure(group: CometChatSDK.Group)
  @_Concurrency.MainActor @preconcurrency open func configureGroupSubtitleStyling()
  @_Concurrency.MainActor @preconcurrency open func configureGroupStatusIndicatorStyling()
  @_Concurrency.MainActor @preconcurrency public func connect()
  @_Concurrency.MainActor @preconcurrency public func disconnect()
  @_Concurrency.MainActor @preconcurrency public func setupViewModel()
  @_Concurrency.MainActor @preconcurrency open func updateUserStatus(_ isOnline: Swift.Bool)
}
extension CometChatUIKitSwift.CometChatMessageHeader {
  @_Concurrency.MainActor @preconcurrency public func configureSubTitleView(text: Swift.String, isTyping: Swift.Bool = false)
}
extension CometChatUIKitSwift.CometChatMessageHeader : CometChatSDK.CometChatConnectionDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func connected()
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func connecting()
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func disconnected()
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class CometChatCollaborativeBubble : UIKit.UIStackView {
  @_Concurrency.MainActor @preconcurrency public var topImageView: UIKit.UIImageView {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var title: UIKit.UILabel {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var icon: UIKit.UIImageView {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var subTitle: UIKit.UILabel {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var openButton: UIKit.UIButton {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var dividerView: UIKit.UIView {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var middleContainerView: UIKit.UIView {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var style: CometChatUIKitSwift.CollaborativeBubbleStyle
  @_Concurrency.MainActor @preconcurrency public var onOpenButtonClicked: (() -> ())?
  @_Concurrency.MainActor @preconcurrency public var collaborativeIconImage: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var topImage: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func willMove(toWindow newWindow: UIKit.UIWindow?)
  @_Concurrency.MainActor @preconcurrency public func buildUI()
  @_Concurrency.MainActor @preconcurrency public func setupStyle()
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(title: Swift.String) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(subTitle: Swift.String) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(buttonText: Swift.String) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(onOpenButtonClicked: @escaping (() -> ())) -> Self
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class CometChatImageBubble : UIKit.UIStackView {
  @_Concurrency.MainActor @preconcurrency public var imageView: UIKit.UIImageView {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var activityIndicator: UIKit.UIActivityIndicatorView {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func willMove(toWindow newWindow: UIKit.UIWindow?)
  @_Concurrency.MainActor @preconcurrency public func buildUI()
  @_Concurrency.MainActor @preconcurrency public func setUpStyle()
  @_Concurrency.MainActor @preconcurrency public func set(image: UIKit.UIImage)
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func setOnClick(onClick: @escaping (() -> Swift.Void)) -> Self
  @_Concurrency.MainActor @preconcurrency public func set(imageUrl: Swift.String, localFileURL: Swift.String? = nil, thumbnailURL: Swift.String? = nil)
  @_Concurrency.MainActor @preconcurrency public func set(controller: UIKit.UIViewController?)
  @objc deinit
}
extension CometChatUIKitSwift.CometChatImageBubble : QuickLook.QLPreviewControllerDelegate, QuickLook.QLPreviewControllerDataSource {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func numberOfPreviewItems(in controller: QuickLook.QLPreviewController) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func previewController(_ controller: QuickLook.QLPreviewController, previewItemAt index: Swift.Int) -> any QuickLook.QLPreviewItem
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func previewController(_ controller: QuickLook.QLPreviewController, transitionImageFor item: any QuickLook.QLPreviewItem, contentRect: Swift.UnsafeMutablePointer<CoreFoundation.CGRect>) -> UIKit.UIImage?
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func previewController(_ controller: QuickLook.QLPreviewController, transitionViewFor item: any QuickLook.QLPreviewItem) -> UIKit.UIView?
}
@_hasMissingDesignatedInitializers public class SmartRepliesConfiguration {
  @discardableResult
  public func set(customOutgoingMessageSound: Swift.String) -> Self
  @discardableResult
  public func enable(soundForMessagesonClick: Swift.Bool) -> Self
  @discardableResult
  public func set(closeIcon: UIKit.UIImage) -> Self
  @discardableResult
  public func setOnClose(onClose: @escaping (() -> ())) -> Self
  @discardableResult
  public func setOnClick(onClick: @escaping (() -> ())) -> Self
  @discardableResult
  public func set(style: CometChatUIKitSwift.SmartRepliesStyle) -> Self
  @objc deinit
}
@_hasMissingDesignatedInitializers public class SDKEventInitializer : CometChatSDK.CometChatMessageDelegate {
  @objc public func onTextMessageReceived(textMessage: CometChatSDK.TextMessage)
  @objc public func onMediaMessageReceived(mediaMessage: CometChatSDK.MediaMessage)
  @objc public func onCustomMessageReceived(customMessage: CometChatSDK.CustomMessage)
  @objc public func onTypingStarted(_ typingIndicator: CometChatSDK.TypingIndicator)
  @objc public func onTypingEnded(_ typingIndicator: CometChatSDK.TypingIndicator)
  @objc public func onMessagesDelivered(receipt: CometChatSDK.MessageReceipt)
  @objc public func onMessagesRead(receipt: CometChatSDK.MessageReceipt)
  @objc public func onMessageEdited(message: CometChatSDK.BaseMessage)
  @objc public func onMessageDeleted(message: CometChatSDK.BaseMessage)
  @objc public func onTransisentMessageReceived(_ message: CometChatSDK.TransientMessage)
  @objc public func onMessagesReadByAll(receipt: CometChatSDK.MessageReceipt)
  @objc public func onMessagesDeliveredToAll(receipt: CometChatSDK.MessageReceipt)
  @objc public func onInteractiveMessageReceived(interactiveMessage: CometChatSDK.InteractiveMessage)
  @objc public func onMessageReactionAdded(reactionEvent: CometChatSDK.ReactionEvent)
  @objc public func onMessageReactionRemoved(reactionEvent: CometChatSDK.ReactionEvent)
  @objc deinit
}
@objc @_Concurrency.MainActor @preconcurrency open class CometChatMessageInformation : CometChatUIKitSwift.CometChatListBase {
  @_Concurrency.MainActor @preconcurrency public var bubbleContainerView: UIKit.UIView {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public static var style: CometChatUIKitSwift.MessageInformationStyle
  @_Concurrency.MainActor @preconcurrency public static var receiptStyle: CometChatUIKitSwift.ReceiptStyle
  @_Concurrency.MainActor @preconcurrency public var style: CometChatUIKitSwift.MessageInformationStyle
  @_Concurrency.MainActor @preconcurrency public var messageStyle: CometChatUIKitSwift.MessageBubbleStyle
  @_Concurrency.MainActor @preconcurrency public var receiptStyle: CometChatUIKitSwift.ReceiptStyle
  @_Concurrency.MainActor @preconcurrency public var dateTimeFormatter: CometChatUIKitSwift.CometChatDateTimeFormatter?
  @_Concurrency.MainActor @preconcurrency open var viewModel: any CometChatUIKitSwift.MessageInformationViewModelProtocol
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public init()
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency open func registerCells()
  @_Concurrency.MainActor @preconcurrency override open func setupStyle()
  @_Concurrency.MainActor @preconcurrency override open func styleNavigationBar()
  @_Concurrency.MainActor @preconcurrency open func buildBubbleView()
  @_Concurrency.MainActor @preconcurrency override open func showErrorView()
  @_Concurrency.MainActor @preconcurrency override open func showEmptyView()
  @objc deinit
}
extension CometChatUIKitSwift.CometChatMessageInformation {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func tableView(_ tableView: UIKit.UITableView, heightForRowAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func tableView(_ tableView: UIKit.UITableView, willSelectRowAt indexPath: Foundation.IndexPath) -> Foundation.IndexPath?
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func tableView(_ tableView: UIKit.UITableView, trailingSwipeActionsConfigurationForRowAt indexPath: Foundation.IndexPath) -> UIKit.UISwipeActionsConfiguration?
}
extension CometChatUIKitSwift.CometChatMessageInformation {
  @_Concurrency.MainActor @preconcurrency public func set(message: CometChatSDK.BaseMessage)
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func setSubtitle(subtitle: @escaping ((_ message: CometChatSDK.BaseMessage, _ receipt: CometChatSDK.MessageReceipt) -> UIKit.UIView)) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func setBubbleView(bubbleView: @escaping ((_ message: CometChatSDK.BaseMessage) -> UIKit.UIView)) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func setListItemView(listItemView: @escaping ((_ message: CometChatSDK.BaseMessage, _ receipt: CometChatSDK.MessageReceipt) -> UIKit.UIView)) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func setOnError(onError: @escaping ((_ error: CometChatSDK.CometChatException) -> Swift.Void)) -> Self
}
public enum CometChatICSParser {
  public static func load(string: Swift.String, completion: @escaping ([Swift.String : [CometChatUIKitSwift.TimeRange]]) -> ())
  public static func load(url: Foundation.URL, encoding: Swift.String.Encoding = .utf8, completion: @escaping ([Swift.String : [CometChatUIKitSwift.TimeRange]]) -> (), failure: ((CometChatSDK.CometChatException) -> ())? = nil)
}
public enum iCalError : Swift.Error {
  case fileNotFound
  case encoding
  case parseError
  case unsupportedICalVersion
  public static func == (a: CometChatUIKitSwift.iCalError, b: CometChatUIKitSwift.iCalError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct CollaborativeBubbleStyle : CometChatUIKitSwift.BaseMessageBubbleStyle {
  public var headerTextColor: UIKit.UIColor?
  public var headerTextFont: UIKit.UIFont?
  public var backgroundColor: UIKit.UIColor?
  public var backgroundDrawable: UIKit.UIImage?
  public var borderWidth: CoreFoundation.CGFloat?
  public var borderColor: UIKit.UIColor?
  public var cornerRadius: CometChatUIKitSwift.CometChatCornerStyle?
  public var avatarStyle: CometChatUIKitSwift.AvatarStyle?
  public var dateStyle: CometChatUIKitSwift.DateStyle?
  public var receiptStyle: CometChatUIKitSwift.ReceiptStyle?
  public var threadedIndicatorTextFont: UIKit.UIFont?
  public var threadedIndicatorTextColor: UIKit.UIColor?
  public var threadedIndicatorImageTint: UIKit.UIColor?
  public var titleFont: UIKit.UIFont
  public var titleColor: UIKit.UIColor
  public var subTitleFont: UIKit.UIFont
  public var subTitleColor: UIKit.UIColor
  public var iconTint: UIKit.UIColor
  public var buttonTextFont: UIKit.UIFont
  public var buttonTextColor: UIKit.UIColor
  public var dividerTint: UIKit.UIColor
  public var reactionsStyle: CometChatUIKitSwift.ReactionsStyle?
  public init()
}
public struct AssetConstants {
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class CometChatGroupActionBubble : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public var style: CometChatUIKitSwift.GroupActionBubbleStyle
  @_Concurrency.MainActor @preconcurrency public var message: UIKit.UILabel {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func willMove(toWindow newWindow: UIKit.UIWindow?)
  @_Concurrency.MainActor @preconcurrency public func buildUI()
  @_Concurrency.MainActor @preconcurrency open func setupStyle()
  @discardableResult
  @objc @_Concurrency.MainActor @preconcurrency public func set(messageObject: CometChatSDK.BaseMessage) -> CometChatUIKitSwift.CometChatGroupActionBubble
  @objc deinit
}
public struct NewMessageIndicatorStyle {
  public var textFont: UIKit.UIFont
  public var textColor: UIKit.UIColor
  public var textBackgroundColor: UIKit.UIColor
  public var imageTint: UIKit.UIColor
  public var backgroundColor: UIKit.UIColor
  public var cornerRadius: CometChatUIKitSwift.CometChatCornerStyle?
  public var borderWidth: CoreFoundation.CGFloat
  public var borderColor: UIKit.UIColor
  public var iconImage: UIKit.UIImage?
  public init()
}
@_inheritsConvenienceInitializers public class MessageTranslationViewModel : CometChatUIKitSwift.DataSourceDecorator {
  override public init(dataSource: any CometChatUIKitSwift.DataSource)
  override public func getId() -> Swift.String
  override public func getTextMessageBubble(messageText: Swift.String?, message: CometChatSDK.TextMessage?, controller: UIKit.UIViewController?, alignment: CometChatUIKitSwift.MessageBubbleAlignment, style: CometChatUIKitSwift.TextBubbleStyle?, additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration?) -> UIKit.UIView?
  override public func getTextMessageOptions(loggedInUser: CometChatSDK.User, messageObject: CometChatSDK.BaseMessage, controller: UIKit.UIViewController?, group: CometChatSDK.Group?, additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration) -> [CometChatUIKitSwift.CometChatMessageOption]?
  @objc deinit
}
extension CometChatUIKitSwift.CometChatCallButtons {
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(user: CometChatSDK.User) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(group: CometChatSDK.Group) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(callSettingsBuilder: @escaping ((_ user: CometChatSDK.User?, _ group: CometChatSDK.Group?, _ isAudioOnly: Swift.Bool) -> Any)) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(onError: @escaping ((_ error: CometChatSDK.CometChatException?) -> Swift.Void)) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(outgoingCallConfiguration: CometChatUIKitSwift.OutgoingCallConfiguration?) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(controller: UIKit.UIViewController?) -> Self
}
@_hasMissingDesignatedInitializers public class ChatConfigurator {
  @objc deinit
}
@_hasMissingDesignatedInitializers public class CallLogsViewModel {
  @objc deinit
}
@_hasMissingDesignatedInitializers public class CometChatConversationEvents {
  @objc public static func addListener(_ id: Swift.String, _ observer: any CometChatUIKitSwift.CometChatConversationEventListener)
  @objc public static func removeListener(_ id: Swift.String)
  public static func ccConversationDeleted(conversation: CometChatSDK.Conversation)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class CometChatCardBubble : UIKit.UIView {
  @objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class Button : UIKit.UIButton {
    @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
    @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
    @objc deinit
  }
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(onActionClick: @escaping ((CometChatUIKitSwift.CometChatCardBubble.Button) -> Swift.Void)) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(cardMessage: CometChatUIKitSwift.CardMessage)
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func setUIElements(_ elementEntities: [CometChatUIKitSwift.ElementEntity])
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(style: CometChatUIKitSwift.CardBubbleStyle) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(background: UIKit.UIColor) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(corner: CometChatUIKitSwift.CometChatCornerStyle) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(borderWidth: CoreFoundation.CGFloat) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(borderColor: UIKit.UIColor) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(textColor: UIKit.UIColor) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(textFont: UIKit.UIFont) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(controller: UIKit.UIViewController) -> Self
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class CometChatScopeChange : UIKit.UIViewController {
  @_Concurrency.MainActor @preconcurrency public var options: [(Swift.String, CometChatSDK.CometChat.MemberScope)]
  @_Concurrency.MainActor @preconcurrency public var titleLabel: UIKit.UILabel {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var subtitleLabel: UIKit.UILabel {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var imageView: UIKit.UIImageView {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var optionsContainerView: UIKit.UIStackView {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var imageContainerView: UIKit.UIView {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var saveButton: UIKit.UIButton {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var cancelButton: UIKit.UIButton {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public static var style: CometChatUIKitSwift.ScopeChangeStyle
  @_Concurrency.MainActor @preconcurrency public var style: CometChatUIKitSwift.ScopeChangeStyle {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var group: CometChatSDK.Group?
  @_Concurrency.MainActor @preconcurrency public var groupMember: CometChatSDK.GroupMember?
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency open func buildUI()
  @_Concurrency.MainActor @preconcurrency open func buildOptionsView()
  @objc @_Concurrency.MainActor @preconcurrency open func onOptionSelected(_ sender: UIKit.UITapGestureRecognizer)
  @_Concurrency.MainActor @preconcurrency open func setupStyle()
  @objc @_Concurrency.MainActor @preconcurrency open func onSaveButtonClicked()
  @objc @_Concurrency.MainActor @preconcurrency open func onCancelButtonClicked()
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(group: CometChatSDK.Group, groupMember: CometChatSDK.GroupMember) -> Self
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public class ActionEntity {
  public init(actionType: Swift.String)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class GroupsShimmerView : CometChatUIKitSwift.CometChatShimmerView {
  @_Concurrency.MainActor @preconcurrency public var cellCount: Swift.Int
  @_Concurrency.MainActor @preconcurrency override open func buildUI()
  @_Concurrency.MainActor @preconcurrency override open func startShimmer()
  @_Concurrency.MainActor @preconcurrency override open func stopShimmer()
  @_Concurrency.MainActor @preconcurrency @objc override open func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc override open func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init()
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public struct MessageListStyle {
  public var backgroundColor: UIKit.UIColor
  public var borderWidth: CoreFoundation.CGFloat
  public var borderColor: UIKit.UIColor
  public var cornerRadius: CometChatUIKitSwift.CometChatCornerStyle?
  public var shimmerGradientColor1: UIKit.UIColor
  public var shimmerGradientColor2: UIKit.UIColor
  public var emptyStateTitleColor: UIKit.UIColor
  public var emptyStateTitleFont: UIKit.UIFont
  public var emptyStateSubtitleColor: UIKit.UIColor
  public var emptyStateSubtitleFont: UIKit.UIFont
  public var errorStateTitleColor: UIKit.UIColor
  public var errorStateTitleFont: UIKit.UIFont
  public var errorStateSubtitleColor: UIKit.UIColor
  public var errorStateSubtitleFont: UIKit.UIFont
  public var threadedMessageImage: UIKit.UIImage?
  public var errorImage: UIKit.UIImage?
  public var emptyImage: UIKit.UIImage?
  public var newMessageIndicatorImage: UIKit.UIImage?
  public var backgroundImage: UIKit.UIImage?
  public init()
}
@_hasMissingDesignatedInitializers public class MessagesListBuilder {
  public static func getDefaultRequestBuilder() -> CometChatSDK.MessagesRequest.MessageRequestBuilder
  @objc deinit
}
public struct DeleteBubbleStyle : CometChatUIKitSwift.BaseMessageBubbleStyle {
  public var backgroundColor: UIKit.UIColor?
  public var backgroundDrawable: UIKit.UIImage?
  public var borderWidth: CoreFoundation.CGFloat?
  public var borderColor: UIKit.UIColor?
  public var cornerRadius: CometChatUIKitSwift.CometChatCornerStyle?
  public var avatarStyle: CometChatUIKitSwift.AvatarStyle?
  public var dateStyle: CometChatUIKitSwift.DateStyle?
  public var receiptStyle: CometChatUIKitSwift.ReceiptStyle?
  public var headerTextColor: UIKit.UIColor?
  public var headerTextFont: UIKit.UIFont?
  public var threadedIndicatorTextFont: UIKit.UIFont?
  public var threadedIndicatorTextColor: UIKit.UIColor?
  public var threadedIndicatorImageTint: UIKit.UIColor?
  public var textColor: UIKit.UIColor?
  public var textFont: UIKit.UIFont
  public var deleteImageTintColor: UIKit.UIColor?
  public var reactionsStyle: CometChatUIKitSwift.ReactionsStyle?
  public init()
}
@_inheritsConvenienceInitializers final public class CardBubbleStyle : CometChatUIKitSwift.BaseStyle {
  override public init()
  override final public func set(background: UIKit.UIColor) -> Self
  override final public func set(borderWidth: CoreFoundation.CGFloat) -> Self
  override final public func set(cornerRadius: CometChatUIKitSwift.CometChatCornerStyle) -> Self
  override final public func set(borderColor: UIKit.UIColor) -> Self
  final public func set(textColor: UIKit.UIColor) -> Self
  final public func set(textFont: UIKit.UIFont) -> Self
  final public func set(progressBarTintColor: UIKit.UIColor) -> Self
  final public func set(buttonDisableTextColor: UIKit.UIColor) -> Self
  final public func set(contentBackgroundColor: UIKit.UIColor) -> Self
  final public func set(buttonSeparatorColor: UIKit.UIColor) -> Self
  final public func set(contentRadius: CoreFoundation.CGFloat) -> Self
  final public func set(buttonBackgroundColor: UIKit.UIColor) -> Self
  final public func set(buttonTextColor: UIKit.UIColor) -> Self
  final public func set(buttonTextFont: UIKit.UIFont) -> Self
  final public func set(imageBubbleStyle: CometChatUIKitSwift.ImageBubbleStyle) -> Self
  final public func getTextColor() -> UIKit.UIColor
  final public func getTextFont() -> UIKit.UIFont
  final public func getProgressBarTintColor() -> UIKit.UIColor
  final public func getButtonBackgroundColor() -> UIKit.UIColor
  final public func getButtonTextColor() -> UIKit.UIColor
  final public func getButtonTextFont() -> UIKit.UIFont
  final public func getContentBackgroundColor() -> UIKit.UIColor
  final public func getImageBubbleStyle() -> CometChatUIKitSwift.ImageBubbleStyle
  final public func getButtonDisableTextColor() -> UIKit.UIColor
  final public func getButtonSeparatorColor() -> UIKit.UIColor
  final public func getContentRadius() -> CoreFoundation.CGFloat
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class CometChatStickerShimmer : CometChatUIKitSwift.CometChatShimmerView, UIKit.UICollectionViewDataSource, UIKit.UICollectionViewDelegate, UIKit.UICollectionViewDelegateFlowLayout {
  @_Concurrency.MainActor @preconcurrency public var cellCount: Swift.Int
  @_Concurrency.MainActor @preconcurrency override open func buildUI()
  @_Concurrency.MainActor @preconcurrency override open func startShimmer()
  @_Concurrency.MainActor @preconcurrency override open func stopShimmer()
  @_Concurrency.MainActor @preconcurrency @objc public func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  @_Concurrency.MainActor @preconcurrency @objc public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, sizeForItemAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGSize
  @_Concurrency.MainActor @preconcurrency @objc public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, minimumLineSpacingForSectionAt section: Swift.Int) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency @objc public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, minimumInteritemSpacingForSectionAt section: Swift.Int) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init()
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class ButtonElement : CometChatUIKitSwift.ElementEntity {
  @objc public var buttonText: Swift.String
  @objc public var disableAfterInteracted: Swift.Bool
  public var clickAction: CometChatUIKitSwift.ActionEntity?
  public init(elementID: Swift.String, clickAction: CometChatUIKitSwift.ActionEntity, buttonText: Swift.String)
  @available(*, deprecated)
  public init(elementType: CometChatUIKitSwift.elementType, elementID: Swift.String, clickAction: CometChatUIKitSwift.ActionEntity, buttonText: Swift.String)
  @objc public static func buttonElementFromJSON(_ data: [Swift.String : Any]) -> CometChatUIKitSwift.ButtonElement?
  @objc public static func buttonElementFromJSON_(_ data: [Swift.String : Any]) -> CometChatUIKitSwift.ButtonElement?
  public func toJSON() -> [Swift.String : Any]
  @objc deinit
}
@_hasMissingDesignatedInitializers open class MessageUtils {
  public static func getSpecificMessageTypeStyle(message: CometChatSDK.BaseMessage, from messageStyle: (incoming: CometChatUIKitSwift.MessageBubbleStyle, outgoing: CometChatUIKitSwift.MessageBubbleStyle)) -> (any CometChatUIKitSwift.BaseMessageBubbleStyle)?
  public static func getDefaultMessageTypes(message: CometChatSDK.BaseMessage) -> Swift.String
  public static func getDefaultMessageCategories(message: CometChatSDK.BaseMessage) -> Swift.String
  public static func getDefaultAttachmentOptions(addtionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration) -> [CometChatUIKitSwift.CometChatMessageComposerAction]
  public static func bubbleBackgroundAppearance(bubbleView: UIKit.UIView, senderUid: Swift.String, message: CometChatSDK.BaseMessage, controller: UIKit.UIViewController)
  public static func processTextFormatter(message: CometChatSDK.TextMessage, textFormatter: [CometChatUIKitSwift.CometChatTextFormatter], formattingType: CometChatUIKitSwift.FormattingType, alignment: CometChatUIKitSwift.MessageBubbleAlignment = .left) -> Foundation.NSAttributedString
  public static func processMessageForTextFormatter(_ input: Foundation.NSMutableAttributedString, regex: Swift.String, replaceRegex: ((Swift.String) -> Foundation.NSAttributedString)) -> (Foundation.NSAttributedString, [(item: CometChatUIKitSwift.SuggestionItem, range: Foundation.NSRange)])
  @objc deinit
}
@_hasMissingDesignatedInitializers public class StickerConfiguration {
  @objc deinit
}
public struct ReactionListStyle {
  public var backgroundColor: UIKit.UIColor
  public var cornerRadius: CometChatUIKitSwift.CometChatCornerStyle?
  public var borderWidth: CoreFoundation.CGFloat
  public var borderColor: UIKit.UIColor
  public var titleTextFont: UIKit.UIFont
  public var titleTextColor: UIKit.UIColor
  public var reactionTabTextFont: UIKit.UIFont
  public var reactionTabTextColor: UIKit.UIColor
  public var reactionActiveTabTextColor: UIKit.UIColor
  public var reactionTabBackgroundColor: UIKit.UIColor
  public var reactionTabActiveIndicatorColor: UIKit.UIColor
  public var tailViewTextFont: UIKit.UIFont
  public var subTitleTextFont: UIKit.UIFont
  public var subTitleTextColor: UIKit.UIColor
  public var errorTextColor: UIKit.UIColor
  public var errorTextFont: UIKit.UIFont
  public var avatarStyle: CometChatUIKitSwift.AvatarStyle
  public init()
}
public struct SuggestionViewStyle {
  public var backgroundColor: UIKit.UIColor
  public var borderColor: UIKit.UIColor
  public var borderWidth: CoreFoundation.CGFloat
  public var cornerRadius: CometChatUIKitSwift.CometChatCornerStyle?
  public var textFont: UIKit.UIFont
  public var textColor: UIKit.UIColor
  public init()
}
public struct CreatePollStyle {
  public var backgroundColor: UIKit.UIColor
  public var borderWidth: CoreFoundation.CGFloat
  public var borderColor: UIKit.UIColor
  public var cornerRadius: CometChatUIKitSwift.CometChatCornerStyle?
  public var titleFont: UIKit.UIFont
  public var titleColor: UIKit.UIColor
  public var separatorColor: UIKit.UIColor
  public var questionPlaceholderColor: UIKit.UIColor
  public var questionPlaceholderFont: UIKit.UIFont
  public var questionTitleTextColor: UIKit.UIColor
  public var questionTitleTextFont: UIKit.UIFont
  public var optionsPlaceholderColor: UIKit.UIColor
  public var optionsPlaceholderFont: UIKit.UIFont
  public var optionsTitleTextColor: UIKit.UIColor
  public var optionsTitleTextFont: UIKit.UIFont
  public var optionsTextColor: UIKit.UIColor
  public var optionsTextFont: UIKit.UIFont
  public var questionTextColor: UIKit.UIColor
  public var questionTextFont: UIKit.UIFont
  public var questionInputBoxCornerRadius: CometChatUIKitSwift.CometChatCornerStyle?
  public var questionInputBoxBackground: UIKit.UIColor
  public var questionInputBoxBorderColor: UIKit.UIColor
  public var questionInputBoxBorderWidth: CoreFoundation.CGFloat
  public var optionsInputBoxCornerRadius: CometChatUIKitSwift.CometChatCornerStyle?
  public var optionsInputBoxBackground: UIKit.UIColor
  public var optionsInputBoxBorderColor: UIKit.UIColor
  public var optionsInputBoxBorderWidth: CoreFoundation.CGFloat
  public var cancelButtonTextColor: UIKit.UIColor
  public var cancelButtonTextFont: UIKit.UIFont
  public var cancelButtonBackgroundColor: UIKit.UIColor
  public var cancelButtonCornerRadius: CometChatUIKitSwift.CometChatCornerStyle?
  public var cancelButtonBorderColor: UIKit.UIColor
  public var cancelButtonBorderWidth: CoreFoundation.CGFloat
  public var sendButtonTextColor: UIKit.UIColor
  public var sendButtonDisabledTextColor: UIKit.UIColor
  public var sendButtonTextFont: UIKit.UIFont
  public var sendButtonBackgroundColor: UIKit.UIColor
  public var sendButtonCornerRadius: CometChatUIKitSwift.CometChatCornerStyle?
  public var sendButtonBorderColor: UIKit.UIColor
  public var sendButtonBorderWidth: CoreFoundation.CGFloat
  public var deleteButtonTintColor: UIKit.UIColor
  public var deleteButtonImage: UIKit.UIImage
  public var dragButtonTintColor: UIKit.UIColor
  public var dragButtonImage: UIKit.UIImage
  public var errorViewBackgroundColor: UIKit.UIColor
  public var errorViewBorderWidth: CoreFoundation.CGFloat
  public var errorViewBorderColor: UIKit.UIColor
  public var errorViewCornerRadius: CometChatUIKitSwift.CometChatCornerStyle?
  public var errorTextColor: UIKit.UIColor
  public var errorTextFont: UIKit.UIFont
  public var errorImage: UIKit.UIImage
  public var errorImageTintColor: UIKit.UIColor
  public init()
}
extension CometChatUIKitSwift.CometChatGroupMembers {
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(groupMemberRequestBuilder: CometChatSDK.GroupMembersRequest.GroupMembersRequestBuilder) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(group: CometChatSDK.Group) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(groupMemberSearchRequestBuilder: CometChatSDK.GroupMembersRequest.GroupMembersRequestBuilder) -> Self
  @_Concurrency.MainActor @preconcurrency public func onSelection(_ onSelection: @escaping ([CometChatSDK.GroupMember]?) -> ())
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(onError: @escaping ((_ error: CometChatSDK.CometChatException) -> Swift.Void)) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(onLoad: @escaping (([CometChatSDK.GroupMember]) -> Swift.Void)) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(onEmpty: @escaping () -> Swift.Void) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(onItemClick: @escaping ((_ groupMember: CometChatSDK.GroupMember, _ indexPath: Foundation.IndexPath) -> Swift.Void)) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(onItemLongClick: @escaping ((_ groupMember: CometChatSDK.GroupMember, _ indexPath: Foundation.IndexPath) -> Swift.Void)) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(trailView: ((_ groupMember: CometChatSDK.GroupMember?) -> UIKit.UIView)?) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(leadingView: ((_ groupMember: CometChatSDK.GroupMember?) -> UIKit.UIView)?) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(titleView: ((_ groupMember: CometChatSDK.GroupMember?) -> UIKit.UIView)?) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(subtitleView: ((_ groupMember: CometChatSDK.GroupMember?) -> UIKit.UIView)?) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(listItemView: ((_ groupMember: CometChatSDK.GroupMember?) -> UIKit.UIView)?) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(options: ((_ group: CometChatSDK.Group, _ groupMember: CometChatSDK.GroupMember?) -> [CometChatUIKitSwift.CometChatGroupMemberOption])?) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func add(options: ((_ group: CometChatSDK.Group, _ groupMember: CometChatSDK.GroupMember?) -> [CometChatUIKitSwift.CometChatGroupMemberOption])?) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func add(groupMember: CometChatSDK.GroupMember) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func update(groupMember: CometChatSDK.GroupMember) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func insert(groupMember: CometChatSDK.GroupMember, at: Swift.Int) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func remove(groupMember: CometChatSDK.GroupMember) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func clearList() -> Self
  @_Concurrency.MainActor @preconcurrency public func size() -> Swift.Int
}
@_inheritsConvenienceInitializers public class AIConversationStarterConfiguration : CometChatUIKitSwift.AIParentConfiguration {
  @discardableResult
  public func set(customView: ((_ reply: [Swift.String]) -> UIKit.UIView?)?) -> Self
  @discardableResult
  public func set(style: CometChatUIKitSwift.AIConversationStarterStyle) -> Self
  @discardableResult
  public func set(apiConfiguration: ((_ user: CometChatSDK.User?, _ group: CometChatSDK.Group?, _ configuration: ((_ configuration: [Swift.String : Any]) -> Swift.Void)) -> Swift.Void)?) -> Self
  override public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class CreatePollConfiguration {
  @discardableResult
  public func set(closeIcon: UIKit.UIImage) -> Self
  @discardableResult
  public func set(createPollIcon: UIKit.UIImage) -> Self
  @discardableResult
  public func set(deleteIcon: UIKit.UIImage) -> Self
  @discardableResult
  public func setOnCreatePoll(onCreatePoll: @escaping (() -> ())) -> Self
  @discardableResult
  public func setOnClose(onClose: @escaping (() -> ())) -> Self
  @discardableResult
  public func set(style: CometChatUIKitSwift.CreatePollStyle) -> Self
  @objc deinit
}
public enum ReceiptStatus {
  case inProgress
  case sent
  case delivered
  case failed
  case read
  public static func == (a: CometChatUIKitSwift.ReceiptStatus, b: CometChatUIKitSwift.ReceiptStatus) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct MessageReceiptUtils {
  public static func get(receiptStatus message: CometChatSDK.BaseMessage) -> CometChatUIKitSwift.ReceiptStatus
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @IBDesignable @_Concurrency.MainActor @preconcurrency public class CometChatSmartReplies : UIKit.UIView {
  @discardableResult
  @objc @_Concurrency.MainActor @preconcurrency public func set(titles: [Swift.String]) -> CometChatUIKitSwift.CometChatSmartReplies
  @discardableResult
  @objc @_Concurrency.MainActor @preconcurrency public func set(user: CometChatSDK.User) -> CometChatUIKitSwift.CometChatSmartReplies
  @discardableResult
  @objc @_Concurrency.MainActor @preconcurrency public func set(group: CometChatSDK.Group) -> CometChatUIKitSwift.CometChatSmartReplies
  @discardableResult
  @objc @_Concurrency.MainActor @preconcurrency public func set(message: CometChatSDK.BaseMessage) -> CometChatUIKitSwift.CometChatSmartReplies
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func setOnClick(onClick: @escaping (_ title: Swift.String) -> Swift.Void) -> Self
  @objc deinit
}
extension CometChatUIKitSwift.CometChatSmartReplies : UIKit.UICollectionViewDataSource, UIKit.UICollectionViewDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class CometChatTextBubble : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency weak public var controller: UIKit.UIViewController?
  @_Concurrency.MainActor @preconcurrency public var style: CometChatUIKitSwift.TextBubbleStyle
  @_Concurrency.MainActor @preconcurrency public var label: CometChatUIKitSwift.HyperlinkLabel {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func willMove(toSuperview newSuperview: UIKit.UIView?)
  @_Concurrency.MainActor @preconcurrency public func buildUI()
  @_Concurrency.MainActor @preconcurrency open func applyStyle()
  @_Concurrency.MainActor @preconcurrency open func setUpHyperLinkLabel()
  @_Concurrency.MainActor @preconcurrency public func set(text: Swift.String)
  @_Concurrency.MainActor @preconcurrency public func set(attributedText: Foundation.NSAttributedString)
  @_Concurrency.MainActor @preconcurrency public func updateLabelAlignment()
  @objc deinit
}
extension CometChatUIKitSwift.CometChatTextBubble : MessageUI.MFMailComposeViewControllerDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func mailComposeController(_ controller: MessageUI.MFMailComposeViewController, didFinishWith result: MessageUI.MFMailComposeResult, error: (any Swift.Error)?)
}
public struct AvatarStyle {
  public var backgroundColor: UIKit.UIColor
  public var borderColor: UIKit.UIColor
  public var borderWidth: CoreFoundation.CGFloat
  public var cornerRadius: CometChatUIKitSwift.CometChatCornerStyle?
  public var textFont: UIKit.UIFont
  public var textColor: UIKit.UIColor
  public init()
}
public struct StickerKeyboardStyle {
  public var backgroundColor: UIKit.UIColor
  public var separatorColor: UIKit.UIColor
  public var emptyStateTitleTextColor: UIKit.UIColor
  public var emptyStateTitleTextFont: UIKit.UIFont
  public var emptyStateSubtitleTextColor: UIKit.UIColor
  public var emptyStateSubtitleTextFont: UIKit.UIFont
  public var errorStateTextColor: UIKit.UIColor
  public var errorStateTextFont: UIKit.UIFont
  public init()
}
public class AIAssistBotConfiguration {
  public init()
  @discardableResult
  public func set(title: Swift.String) -> Self
  @discardableResult
  public func set(closeIcon: UIKit.UIImage) -> Self
  @discardableResult
  public func set(sendIcon: UIKit.UIImage) -> Self
  @discardableResult
  public func set(botFirstMessageText: ((_ bot: CometChatSDK.User) -> Swift.String)?) -> Self
  @discardableResult
  public func set(apiConfiguration: ((_ bot: CometChatSDK.User, _ user: CometChatSDK.User?, _ group: CometChatSDK.Group?, _ configuration: ((_ configuration: [Swift.String : Any]) -> ())) -> Swift.Void)?) -> Self
  @discardableResult
  public func set(style: CometChatUIKitSwift.AIAssistBotStyle) -> Self
  @discardableResult
  public func set(botMessageBubbleStyle: CometChatUIKitSwift.TextBubbleStyle) -> Self
  @discardableResult
  public func set(senderMessageBubbleStyle: CometChatUIKitSwift.TextBubbleStyle) -> Self
  @discardableResult
  public func set(messageInputStyle: CometChatUIKitSwift.MessageInputStyle) -> Self
  @discardableResult
  public func set(avatarStyle: CometChatUIKitSwift.AvatarStyle) -> Self
  @discardableResult
  public func set(subtitle: Swift.String?) -> Self
  @objc deinit
}
@_hasMissingDesignatedInitializers public class CometChatUIEvents {
  public static func addListener(_ id: Swift.String, _ observer: any CometChatUIKitSwift.CometChatUIEventListener)
  public static func removeListener(_ id: Swift.String)
  public static func showPanel(id: [Swift.String : Any]?, alignment: CometChatUIKitSwift.UIAlignment, view: UIKit.UIView?)
  public static func hidePanel(id: [Swift.String : Any]?, alignment: CometChatUIKitSwift.UIAlignment)
  public static func ccActiveChatChanged(id: [Swift.String : Any]?, lastMessage: CometChatSDK.BaseMessage?, user: CometChatSDK.User?, group: CometChatSDK.Group?)
  public static func openChat(user: CometChatSDK.User?, group: CometChatSDK.Group?)
  public static func ccComposeMessage(id: [Swift.String : Any]?, message: CometChatSDK.BaseMessage)
  public static func onAiFeatureTapped(user: CometChatSDK.User?, group: CometChatSDK.Group?)
  @objc deinit
}
extension CometChatUIKitSwift.CometChatUIEvents {
  @available(*, deprecated, message: "Use `showPanel(id: [String:Any]?, alignment: UIAlignment, view: UIView?` instead")
  public static func emitShowPanel(id: [Swift.String : Any]?, alignment: CometChatUIKitSwift.UIAlignment, view: UIKit.UIView?)
  @available(*, deprecated, message: "Use `ccActiveChatChanged(_ message: TransientMessage)` instead")
  public static func emitOnOpenChat(user: CometChatSDK.User?, group: CometChatSDK.Group?)
  @available(*, deprecated, message: "Use `ccActiveChatChanged(_ message: TransientMessage)` instead")
  public static func emitOnActiveChatChanged(id: [Swift.String : Any]?, lastMessage: CometChatSDK.BaseMessage?, user: CometChatSDK.User?, group: CometChatSDK.Group?)
  @available(*, deprecated, message: "Use `emitHidePanel(id: [String:Any]?, alignment: UIAlignment)` instead")
  public static func emitHidePanel(id: [Swift.String : Any]?, alignment: CometChatUIKitSwift.UIAlignment)
  @available(*, deprecated, message: "This method is now deprecated")
  public static func emitCCMessageEdited(id: [Swift.String : Any]?, message: CometChatSDK.BaseMessage)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class CometChatDeleteBubble : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public var style: CometChatUIKitSwift.DeleteBubbleStyle
  @_Concurrency.MainActor @preconcurrency public var messageText: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func willMove(toWindow newWindow: UIKit.UIWindow?)
  @discardableResult
  @objc @_Concurrency.MainActor @preconcurrency public func set(text: Swift.String) -> Self
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc @IBDesignable @_Concurrency.MainActor @preconcurrency public class CometChatStickerKeyboard : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public var disableLoadingState: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public static var style: CometChatUIKitSwift.StickerKeyboardStyle
  @_Concurrency.MainActor @preconcurrency public var style: CometChatUIKitSwift.StickerKeyboardStyle {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency open func buildUI()
  @_Concurrency.MainActor @preconcurrency open func setupStyle()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func willMove(toWindow newWindow: UIKit.UIWindow?)
  @_Concurrency.MainActor @preconcurrency public func fetchStickers()
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func setOnStickerTap(onStickerTap: @escaping (_ sticker: CometChatUIKitSwift.CometChatSticker) -> Swift.Void) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func setOnStickerSetSelected(onStickerSetSelected: @escaping (_ stickerSet: CometChatUIKitSwift.CometChatStickerSet) -> Swift.Void) -> Self
  @objc deinit
}
extension CometChatUIKitSwift.CometChatStickerKeyboard : UIKit.UICollectionViewDelegate, UIKit.UICollectionViewDataSource, UIKit.UICollectionViewDelegateFlowLayout {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, sizeForItemAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGSize
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, minimumLineSpacingForSectionAt section: Swift.Int) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, minimumInteritemSpacingForSectionAt section: Swift.Int) -> CoreFoundation.CGFloat
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class CometChatAIConversationStarterShimmer : CometChatUIKitSwift.CometChatShimmerView {
  @_Concurrency.MainActor @preconcurrency public var cellCount: Swift.Int
  @_Concurrency.MainActor @preconcurrency override open func buildUI()
  @_Concurrency.MainActor @preconcurrency override open func startShimmer()
  @_Concurrency.MainActor @preconcurrency override open func stopShimmer()
  @_Concurrency.MainActor @preconcurrency @objc override open func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc override open func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init()
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class OptionElement : ObjectiveC.NSObject {
  @objc public var id: Swift.String
  @objc public var value: Swift.String
  @objc public var selectedValue: Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class CardMessage : CometChatSDK.InteractiveMessage {
  @objc override dynamic public init()
  public func getCardActions() -> [CometChatUIKitSwift.ElementEntity]
  public func setCardActions(_ cardActions: [CometChatUIKitSwift.ElementEntity])
  public func setGoalCompletionText(_ goalCompletionText: Swift.String)
  public func getGoalCompletionText() -> Swift.String
  public func getImageUrl() -> Swift.String
  public func setImageUrl(_ url: Swift.String)
  public func getText() -> Swift.String
  public func setText(_ text: Swift.String)
  public static func toCardMessage(_ interactiveMessage: CometChatSDK.InteractiveMessage) -> CometChatUIKitSwift.CardMessage
  public func interactiveMessage() -> CometChatSDK.InteractiveMessage
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class CometChatNewMessageIndicator : UIKit.UIStackView {
  @_Concurrency.MainActor @preconcurrency public var title: UIKit.UILabel {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var iconImageView: UIKit.UIImageView {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public static var style: CometChatUIKitSwift.NewMessageIndicatorStyle
  @_Concurrency.MainActor @preconcurrency public var style: CometChatUIKitSwift.NewMessageIndicatorStyle
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(count: Swift.Int) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func incrementCount() -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func reset() -> Self
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func willMove(toSuperview newSuperview: UIKit.UIView?)
  @_Concurrency.MainActor @preconcurrency open func setupStyle()
  @_Concurrency.MainActor @preconcurrency open func buildUI()
  @_Concurrency.MainActor @preconcurrency open func handleThemeModeChange()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class MessageListViewModel : ObjectiveC.NSObject {
  public var hideReplyInThreadOption: Swift.Bool {
    get
    set
  }
  public var hideTranslateMessageOption: Swift.Bool {
    get
    set
  }
  public var hideEditMessageOption: Swift.Bool {
    get
    set
  }
  public var hideDeleteMessageOption: Swift.Bool {
    get
    set
  }
  public var hideReactionOption: Swift.Bool {
    get
    set
  }
  public var hideMessagePrivatelyOption: Swift.Bool {
    get
    set
  }
  public var hideCopyMessageOption: Swift.Bool {
    get
    set
  }
  public var hideMessageInfoOption: Swift.Bool {
    get
    set
  }
  public var hideShareMessageOption: Swift.Bool {
    get
    set
  }
  @objc override dynamic public init()
  public func connect()
  public func disconnect()
  @objc deinit
}
extension CometChatUIKitSwift.MessageListViewModel {
  @discardableResult
  public func add(message: CometChatSDK.BaseMessage) -> Self
  @discardableResult
  public func update(message: CometChatSDK.BaseMessage) -> Self
  @discardableResult
  public func update(receipt: CometChatSDK.MessageReceipt) -> Self
  @discardableResult
  public func remove(message: CometChatSDK.BaseMessage) -> Self
  @discardableResult
  public func delete(message: CometChatSDK.BaseMessage) -> Self
  @discardableResult
  public func copy(message: CometChatSDK.BaseMessage) -> Self
  @discardableResult
  public func clearList() -> Self
  @discardableResult
  public func markAsRead(message: CometChatSDK.BaseMessage) -> Self
  @discardableResult
  public func markAsDelivered(message: CometChatSDK.BaseMessage) -> Self
  @discardableResult
  public func disable(receipt: Swift.Bool) -> Self
  @discardableResult
  public func disable(reactions: Swift.Bool) -> Self
}
extension CometChatUIKitSwift.MessageListViewModel : CometChatUIKitSwift.CometChatMessageEventListener {
  public func onFormMessageReceived(message: CometChatUIKitSwift.FormMessage)
  public func onSchedulerMessageReceived(message: CometChatUIKitSwift.SchedulerMessage)
  public func onCustomInteractiveMessageReceived(message: CometChatUIKitSwift.CustomInteractiveMessage)
  public func onCardMessageReceived(message: CometChatUIKitSwift.CardMessage)
  public func onTextMessageReceived(textMessage: CometChatSDK.TextMessage)
  public func onMediaMessageReceived(mediaMessage: CometChatSDK.MediaMessage)
  public func onCustomMessageReceived(customMessage: CometChatSDK.CustomMessage)
  public func onMessagesDelivered(receipt: CometChatSDK.MessageReceipt)
  public func onMessagesRead(receipt: CometChatSDK.MessageReceipt)
  public func onMessagesReadByAll(receipt: CometChatSDK.MessageReceipt)
  public func onMessagesDeliveredToAll(receipt: CometChatSDK.MessageReceipt)
  public func ccMessageRead(message: CometChatSDK.BaseMessage)
  public func ccMessageDeleted(message: CometChatSDK.BaseMessage)
  public func onMessageDeleted(message: CometChatSDK.BaseMessage)
  public func ccMessageSent(message: CometChatSDK.BaseMessage, status: CometChatUIKitSwift.MessageStatus)
  public func ccMessageEdited(message: CometChatSDK.BaseMessage, status: CometChatUIKitSwift.MessageStatus)
  public func onMessageEdited(message: CometChatSDK.BaseMessage)
  public func onMessageReactionAdded(reactionEvent: CometChatSDK.ReactionEvent)
  public func onMessageReactionRemoved(reactionEvent: CometChatSDK.ReactionEvent)
}
extension CometChatUIKitSwift.MessageListViewModel : CometChatSDK.CometChatGroupDelegate {
  @objc dynamic public func onGroupMemberJoined(action: CometChatSDK.ActionMessage, joinedUser: CometChatSDK.User, joinedGroup: CometChatSDK.Group)
  @objc dynamic public func onGroupMemberLeft(action: CometChatSDK.ActionMessage, leftUser: CometChatSDK.User, leftGroup: CometChatSDK.Group)
  @objc dynamic public func onGroupMemberKicked(action: CometChatSDK.ActionMessage, kickedUser: CometChatSDK.User, kickedBy: CometChatSDK.User, kickedFrom: CometChatSDK.Group)
  @objc dynamic public func onGroupMemberBanned(action: CometChatSDK.ActionMessage, bannedUser: CometChatSDK.User, bannedBy: CometChatSDK.User, bannedFrom: CometChatSDK.Group)
  @objc dynamic public func onGroupMemberUnbanned(action: CometChatSDK.ActionMessage, unbannedUser: CometChatSDK.User, unbannedBy: CometChatSDK.User, unbannedFrom: CometChatSDK.Group)
  @objc dynamic public func onGroupMemberScopeChanged(action: CometChatSDK.ActionMessage, scopeChangeduser: CometChatSDK.User, scopeChangedBy: CometChatSDK.User, scopeChangedTo: Swift.String, scopeChangedFrom: Swift.String, group: CometChatSDK.Group)
  @objc dynamic public func onMemberAddedToGroup(action: CometChatSDK.ActionMessage, addedBy: CometChatSDK.User, addedUser: CometChatSDK.User, addedTo: CometChatSDK.Group)
}
extension CometChatUIKitSwift.MessageListViewModel : CometChatUIKitSwift.CometChatGroupEventListener {
  @objc dynamic public func ccGroupMemberKicked(action: CometChatSDK.ActionMessage, kickedUser: CometChatSDK.User, kickedBy: CometChatSDK.User, kickedFrom: CometChatSDK.Group)
  @objc dynamic public func ccGroupMemberAdded(messages: [CometChatSDK.ActionMessage], usersAdded: [CometChatSDK.User], groupAddedIn: CometChatSDK.Group, addedBy: CometChatSDK.User)
  @objc dynamic public func ccGroupMemberBanned(action: CometChatSDK.ActionMessage, bannedUser: CometChatSDK.User, bannedBy: CometChatSDK.User, bannedFrom: CometChatSDK.Group)
  @objc dynamic public func ccGroupMemberUnbanned(action: CometChatSDK.ActionMessage, unbannedUser: CometChatSDK.User, unbannedBy: CometChatSDK.User, unbannedFrom: CometChatSDK.Group)
  @objc dynamic public func ccGroupMemberScopeChanged(action: CometChatSDK.ActionMessage, updatedUser: CometChatSDK.User, scopeChangedTo: Swift.String, scopeChangedFrom: Swift.String, group: CometChatSDK.Group)
}
extension CometChatUIKitSwift.MessageListViewModel : CometChatSDK.CometChatCallDelegate {
  @objc dynamic public func onIncomingCallReceived(incomingCall: CometChatSDK.Call?, error: CometChatSDK.CometChatException?)
  @objc dynamic public func onOutgoingCallAccepted(acceptedCall: CometChatSDK.Call?, error: CometChatSDK.CometChatException?)
  @objc dynamic public func onOutgoingCallRejected(rejectedCall: CometChatSDK.Call?, error: CometChatSDK.CometChatException?)
  @objc dynamic public func onIncomingCallCancelled(canceledCall: CometChatSDK.Call?, error: CometChatSDK.CometChatException?)
  @objc dynamic public func onCallEndedMessageReceived(endedCall: CometChatSDK.Call?, error: CometChatSDK.CometChatException?)
}
extension CometChatUIKitSwift.MessageListViewModel : CometChatUIKitSwift.CometChatCallEventListener {
  public func ccOutgoingCall(call: CometChatSDK.Call)
  public func ccCallAccepted(call: CometChatSDK.Call)
  public func ccCallRejected(call: CometChatSDK.Call)
  public func ccCallEnded(call: CometChatSDK.Call)
}
extension CometChatUIKitSwift.MessageListViewModel : CometChatUIKitSwift.CometChatUIEventListener {
  public func showPanel(id: [Swift.String : Any]?, alignment: CometChatUIKitSwift.UIAlignment, view: UIKit.UIView?)
  public func hidePanel(id: [Swift.String : Any]?, alignment: CometChatUIKitSwift.UIAlignment)
}
extension CometChatUIKitSwift.MessageListViewModel : CometChatSDK.CometChatConnectionDelegate {
  @objc dynamic public func connected()
  @objc dynamic public func disconnected()
  @objc dynamic public func connecting()
}
open class CometChatMentionsFormatter : CometChatUIKitSwift.CometChatTextFormatter {
  public static var composerTextStyle: CometChatUIKitSwift.MentionTextStyle
  public static var conversationListTextStyle: CometChatUIKitSwift.MentionTextStyle
  public static var leftBubbleTextStyle: CometChatUIKitSwift.MentionTextStyle
  public static var rightBubbleTextStyle: CometChatUIKitSwift.MentionTextStyle
  public var rightBubbleTextStyle: CometChatUIKitSwift.MentionTextStyle {
    get
    set
  }
  public var leftBubbleTextStyle: CometChatUIKitSwift.MentionTextStyle {
    get
    set
  }
  public var conversationListTextStyle: CometChatUIKitSwift.MentionTextStyle {
    get
    set
  }
  public var composerTextStyle: CometChatUIKitSwift.MentionTextStyle {
    get
    set
  }
  public enum MentionsType {
    case usersAndGroupMembers
    case users
    public static func == (a: CometChatUIKitSwift.CometChatMentionsFormatter.MentionsType, b: CometChatUIKitSwift.CometChatMentionsFormatter.MentionsType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum MentionsVisibility {
    case usersConversationOnly
    case groupConversationOnly
    case both
    public static func == (a: CometChatUIKitSwift.CometChatMentionsFormatter.MentionsVisibility, b: CometChatUIKitSwift.CometChatMentionsFormatter.MentionsVisibility) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public init()
  override open func getRegex() -> Swift.String
  override open func search(string: Swift.String, suggestedItems listItemModelCallBack: (([CometChatUIKitSwift.SuggestionItem]) -> ())? = nil)
  open func searchForUser(string: Swift.String, suggestedItems listItemModelCallBack: (([CometChatUIKitSwift.SuggestionItem]) -> ())?)
  open func searchForGroup(string: Swift.String, suggestedItems listItemModelCallBack: (([CometChatUIKitSwift.SuggestionItem]) -> ())?)
  open func buildSuggestionItem(user: CometChatSDK.User) -> CometChatUIKitSwift.SuggestionItem
  override open func onScrollToBottom(suggestionItemList: [CometChatUIKitSwift.SuggestionItem], listItem: (([CometChatUIKitSwift.SuggestionItem]) -> ())?)
  open func onScrollToBottomForGroup(suggestionItemList: [CometChatUIKitSwift.SuggestionItem], listItem: (([CometChatUIKitSwift.SuggestionItem]) -> ())?)
  open func onScrollToBottomForUser(suggestionItemList: [CometChatUIKitSwift.SuggestionItem], listItem: (([CometChatUIKitSwift.SuggestionItem]) -> ())?)
  override open func handlePreMessageSend(baseMessage: CometChatSDK.BaseMessage, suggestionItemList: [CometChatUIKitSwift.SuggestionItem])
  override open func prepareMessageString(baseMessage: CometChatSDK.BaseMessage, regexString: Swift.String, alignment: CometChatUIKitSwift.MessageBubbleAlignment = .right, formattingType: CometChatUIKitSwift.FormattingType) -> Foundation.NSAttributedString
  open func getNSAttributes(for user: CometChatSDK.User, alignment: CometChatUIKitSwift.MessageBubbleAlignment, formattingType: CometChatUIKitSwift.FormattingType) -> [Foundation.NSAttributedString.Key : Any]
  override open func onTextTapped(baseMessage: CometChatSDK.BaseMessage, tappedText: Swift.String, controller: UIKit.UIViewController?)
  @objc deinit
}
extension CometChatUIKitSwift.CometChatMentionsFormatter {
  @discardableResult
  public func set(composerTextStyle: CometChatUIKitSwift.MentionTextStyle) -> Self
  @discardableResult
  public func set(conversationListTextStyle: CometChatUIKitSwift.MentionTextStyle) -> Self
  @discardableResult
  public func set(leftBubbleTextStyle: CometChatUIKitSwift.MentionTextStyle) -> Self
  @discardableResult
  public func set(rightBubbleTextStyle: CometChatUIKitSwift.MentionTextStyle) -> Self
  @discardableResult
  public func set(userRequestBuilder: CometChatSDK.UsersRequest.UsersRequestBuilder?) -> Self
  @discardableResult
  public func set(groupRequestBuilder: CometChatSDK.GroupMembersRequest.GroupMembersRequestBuilder?) -> Self
  @discardableResult
  public func set(onMentionClicked: ((_ baseMessage: CometChatSDK.BaseMessage, _ tappedText: Swift.String, _ controller: UIKit.UIViewController?) -> ())?) -> Self
  @discardableResult
  public func set(mentionsType: CometChatUIKitSwift.CometChatMentionsFormatter.MentionsType) -> Self
  @discardableResult
  public func set(visibility: CometChatUIKitSwift.CometChatMentionsFormatter.MentionsVisibility) -> Self
}
@_hasMissingDesignatedInitializers @IBDesignable @objc @_Concurrency.MainActor @preconcurrency public class CometChatAvatar : UIKit.UIImageView {
  @_Concurrency.MainActor @preconcurrency public static var style: CometChatUIKitSwift.AvatarStyle
  @_Concurrency.MainActor @preconcurrency public var style: CometChatUIKitSwift.AvatarStyle {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(image: UIKit.UIImage?)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor @preconcurrency open func setUpStyle()
  @discardableResult
  @objc @_Concurrency.MainActor @preconcurrency public func set(image: UIKit.UIImage) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func setAvatar(avatarUrl: Swift.String? = nil, with name: Swift.String? = nil) -> CometChatUIKitSwift.CometChatAvatar
  @_Concurrency.MainActor @preconcurrency public func cancel()
  @_Concurrency.MainActor @preconcurrency public func reset()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class AvatarUtils {
  public static func setImageSnap(text: Swift.String?, color: UIKit.UIColor, textAttributes: [Foundation.NSAttributedString.Key : Any], view: UIKit.UIImageView) -> UIKit.UIImage?
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class CometChatSchedulerBubble : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public init()
  @objc deinit
}
extension CometChatUIKitSwift.CometChatSchedulerBubble {
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(controller: UIKit.UIViewController) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(style: CometChatUIKitSwift.SchedulerBubbleStyle) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(message: CometChatUIKitSwift.SchedulerMessage) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(onScheduleClick: ((_ dateTime: Swift.String?, _ message: CometChatUIKitSwift.SchedulerMessage) -> Swift.Void)?) -> Self
}
@_hasMissingDesignatedInitializers public class AIConversationSummaryExtension : CometChatUIKitSwift.ExtensionDataSource {
  public init(configuration: CometChatUIKitSwift.AIConversationSummaryConfiguration? = nil)
  override public func enable()
  override public func addExtension()
  override public func getExtensionId() -> Swift.String
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class StateView : UIKit.UIStackView {
  @_Concurrency.MainActor @preconcurrency public var titleLabel: UIKit.UILabel {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var subtitleLabel: UIKit.UILabel {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var imageView: UIKit.UIImageView {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var retryButton: UIKit.UIButton {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var containerStackView: UIKit.UIView {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var onRetry: (() -> ())?
  @_Concurrency.MainActor @preconcurrency public init(title: Swift.String, subtitle: Swift.String, image: UIKit.UIImage? = nil, buttonText: Swift.String? = nil)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class UsersBuilder {
  public static func getDefaultRequestBuilder() -> CometChatSDK.UsersRequest.UsersRequestBuilder
  @objc deinit
}
public struct MediaRecorderStyle {
  public var backgroundColor: UIKit.UIColor
  public var borderWidth: CoreFoundation.CGFloat
  public var borderColor: UIKit.UIColor
  public var cornerRadius: CometChatUIKitSwift.CometChatCornerStyle?
  public var recordingButtonBackgroundColor: UIKit.UIColor
  public var recordingButtonCornerRadius: CometChatUIKitSwift.CometChatCornerStyle?
  public var recordingButtonBorderWidth: CoreFoundation.CGFloat
  public var recordingButtonBorderColor: UIKit.UIColor
  public var recordingButtonImageTintColor: UIKit.UIColor
  public var recordingButtonImage: UIKit.UIImage
  public var deleteButtonBackgroundColor: UIKit.UIColor
  public var deleteButtonImageTintColor: UIKit.UIColor
  public var deleteButtonImage: UIKit.UIImage
  public var deleteButtonCornerRadius: CometChatUIKitSwift.CometChatCornerStyle?
  public var deleteButtonBorderWidth: CoreFoundation.CGFloat
  public var deleteButtonBorderColor: UIKit.UIColor
  public var stopButtonBackgroundColor: UIKit.UIColor
  public var stopButtonImageTintColor: UIKit.UIColor
  public var stopButtonImage: UIKit.UIImage
  public var stopButtonCornerRadius: CometChatUIKitSwift.CometChatCornerStyle?
  public var stopButtonBorderWidth: CoreFoundation.CGFloat
  public var stopButtonBorderColor: UIKit.UIColor
  public var sendButtonBackgroundColor: UIKit.UIColor
  public var sendButtonImageTintColor: UIKit.UIColor
  public var sendButtonImage: UIKit.UIImage
  public var sendButtonBorderWidth: CoreFoundation.CGFloat
  public var sendButtonBorderColor: UIKit.UIColor
  public var sendButtonCornerRadius: CometChatUIKitSwift.CometChatCornerStyle?
  public var playButtonImageTintColor: UIKit.UIColor
  public var playButtonBackgroundColor: UIKit.UIColor
  public var pauseButtonBackgroundColor: UIKit.UIColor
  public var pauseButtonImageTintColor: UIKit.UIColor
  public var pausebuttonImage: UIKit.UIImage
  public var pauseButtonCornerRadius: CometChatUIKitSwift.CometChatCornerStyle?
  public var pauseButtonBorderWidth: CoreFoundation.CGFloat
  public var pauseButtonBorderColor: UIKit.UIColor
  public var startButtonImage: UIKit.UIImage
  public var startButtonImageTintColor: UIKit.UIColor
  public var startButtonBackgroundColor: UIKit.UIColor
  public var startButtonCornerRadius: CometChatUIKitSwift.CometChatCornerStyle?
  public var startButtonBorderWidth: CoreFoundation.CGFloat
  public var startButtonBorderColor: UIKit.UIColor
  public var reRecordImage: UIKit.UIImage
  public var reRecordButtonImageTintColor: UIKit.UIColor
  public var reRecordButtonBackgroundColor: UIKit.UIColor
  public var reRecordButtonCornerRadius: CometChatUIKitSwift.CometChatCornerStyle?
  public var reRecordButtonBorderWidth: CoreFoundation.CGFloat
  public var reRecordButtonBorderColor: UIKit.UIColor
  public var recorderIndicatorTintColor: UIKit.UIColor
  public var textFont: UIKit.UIFont
  public var textColor: UIKit.UIColor
  public var messageBubbleStyle: CometChatUIKitSwift.MessageBubbleStyle
  public init()
}
@_inheritsConvenienceInitializers @objc public class ElementEntity : ObjectiveC.NSObject {
  public var elementType: CometChatUIKitSwift.elementType?
  @objc public var elementId: Swift.String
  @objc public static func entityFromJSON(_ data: [Swift.String : Any]) -> CometChatUIKitSwift.ElementEntity?
  @objc override dynamic public init()
  @objc deinit
}
public enum elementType {
  case textInput
  case button
  case label
  case checkbox
  case dropdown
  case radio
  case singleSelect
  case dateTime
  public static func == (a: CometChatUIKitSwift.elementType, b: CometChatUIKitSwift.elementType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension Swift.String {
  public var stringValueToElementType: CometChatUIKitSwift.elementType? {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class DropdownElement : CometChatUIKitSwift.ElementEntity {
  @objc public var optional: Swift.Bool
  @objc public var label: Swift.String
  @objc public var defaultValue: Swift.String
  public var options: [CometChatUIKitSwift.OptionElement]
  @objc override dynamic public init()
  @objc public static func dropdownElementFromJSON(_ data: [Swift.String : Any]) -> CometChatUIKitSwift.DropdownElement?
  public func toJSON() -> [Swift.String : Any]
  @objc deinit
}
public struct CometChatMessageTemplate {
  public var category: Swift.String
  public var type: Swift.String
  public var contentView: ((_ message: CometChatSDK.BaseMessage?, _ alignment: CometChatUIKitSwift.MessageBubbleAlignment, _ controller: UIKit.UIViewController?) -> (UIKit.UIView)?)?
  public var bubbleView: ((_ message: CometChatSDK.BaseMessage?, _ alignment: CometChatUIKitSwift.MessageBubbleAlignment, _ controller: UIKit.UIViewController?) -> (UIKit.UIView)?)?
  public var headerView: ((_ message: CometChatSDK.BaseMessage?, _ alignment: CometChatUIKitSwift.MessageBubbleAlignment, _ controller: UIKit.UIViewController?) -> (UIKit.UIView)?)?
  public var footerView: ((_ message: CometChatSDK.BaseMessage?, _ alignment: CometChatUIKitSwift.MessageBubbleAlignment, _ controller: UIKit.UIViewController?) -> (UIKit.UIView)?)?
  public var bottomView: ((_ message: CometChatSDK.BaseMessage?, _ alignment: CometChatUIKitSwift.MessageBubbleAlignment, _ controller: UIKit.UIViewController?) -> (UIKit.UIView)?)?
  public var options: ((_ message: CometChatSDK.BaseMessage?, _ group: CometChatSDK.Group?, _ controller: UIKit.UIViewController?) -> ([CometChatUIKitSwift.CometChatMessageOption]?))?
  public var statusInfoView: ((_ message: CometChatSDK.BaseMessage?, _ alignment: CometChatUIKitSwift.MessageBubbleAlignment, _ controller: UIKit.UIViewController?) -> UIKit.UIView?)?
  public init(category: Swift.String, type: Swift.String, contentView: ((CometChatSDK.BaseMessage?, CometChatUIKitSwift.MessageBubbleAlignment, UIKit.UIViewController?) -> UIKit.UIView?)?, bubbleView: ((CometChatSDK.BaseMessage?, CometChatUIKitSwift.MessageBubbleAlignment, UIKit.UIViewController?) -> UIKit.UIView?)?, headerView: ((CometChatSDK.BaseMessage?, CometChatUIKitSwift.MessageBubbleAlignment, UIKit.UIViewController?) -> UIKit.UIView?)?, footerView: ((CometChatSDK.BaseMessage?, CometChatUIKitSwift.MessageBubbleAlignment, UIKit.UIViewController?) -> UIKit.UIView?)?, bottomView: ((CometChatSDK.BaseMessage?, CometChatUIKitSwift.MessageBubbleAlignment, UIKit.UIViewController?) -> UIKit.UIView?)?, options: ((CometChatSDK.BaseMessage?, CometChatSDK.Group?, UIKit.UIViewController?) -> [CometChatUIKitSwift.CometChatMessageOption]?)?, statusInfoView: ((CometChatSDK.BaseMessage?, CometChatUIKitSwift.MessageBubbleAlignment, UIKit.UIViewController?) -> UIKit.UIView?)? = nil)
}
@_hasMissingDesignatedInitializers public class CallingDefaultBuilder {
  public static func setIsAudioOnly(_ value: Swift.Bool)
  public static func callsInstalled() -> Swift.Bool
  @objc deinit
}
extension CometChatSDK.CometChat.MemberScope {
  public func toString(isLocalised: Swift.Bool = true) -> Swift.String
}
extension CometChatSDK.CometChat.GroupMemberScopeType {
  public func toString(isLocalised: Swift.Bool = true) -> Swift.String
  public static func from(string: Swift.String) -> CometChatSDK.CometChat.GroupMemberScopeType?
}
extension CometChatSDK.User {
  public func toGroupMember(scope: CometChatSDK.CometChat.GroupMemberScopeType = .participant, group: CometChatSDK.Group? = nil) -> CometChatSDK.GroupMember
}
@objc @_inheritsConvenienceInitializers open class MessageComposerViewModel : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
extension CometChatUIKitSwift.MessageComposerViewModel : CometChatUIKitSwift.CometChatMessageEventListener {
  public func ccMessageEdited(message: CometChatSDK.BaseMessage, status: CometChatUIKitSwift.MessageStatus)
}
extension CometChatUIKitSwift.MessageComposerViewModel {
  public func setupBaseMessage(message: Swift.String, textFormatter: [Swift.Character : [(item: CometChatUIKitSwift.SuggestionItem, range: Foundation.NSRange)]]) -> CometChatSDK.BaseMessage
  public func setupBaseMessage(url: Swift.String) -> CometChatSDK.BaseMessage
  public func sendTextMessageToUser(message: Swift.String, textFormatter: [Swift.Character : [(item: CometChatUIKitSwift.SuggestionItem, range: Foundation.NSRange)]])
  public func update(message: CometChatSDK.TextMessage, withSelected textFormatter: [Swift.Character : [(item: CometChatUIKitSwift.SuggestionItem, range: Foundation.NSRange)]])
  public func sendTextMessageToGroup(message: Swift.String, textFormatter: [Swift.Character : [(item: CometChatUIKitSwift.SuggestionItem, range: Foundation.NSRange)]])
  public func sendMediaMessageToUser(url: Swift.String, type: CometChatSDK.CometChat.MessageType)
  public func sendMediaMessageToGroup(url: Swift.String, type: CometChatSDK.CometChat.MessageType)
  public func editTextMessage(textMessage: CometChatSDK.TextMessage, message: Swift.String?, textFormatter: [Swift.Character : [(item: CometChatUIKitSwift.SuggestionItem, range: Foundation.NSRange)]])
  public func onLiveReactionClick()
  public func startTyping()
  public func endTyping()
  public func checkBlockedStatus() -> Swift.Bool
}
public struct MessageInformationStyle : CometChatUIKitSwift.ListItemStyle {
  public var titleColor: UIKit.UIColor?
  public var titleFont: UIKit.UIFont?
  public var largeTitleColor: UIKit.UIColor?
  public var largeTitleFont: UIKit.UIFont?
  public var navigationBarTintColor: UIKit.UIColor?
  public var navigationBarItemsTintColor: UIKit.UIColor?
  public var tableViewSeparator: UIKit.UIColor
  public var listItemTitleTextColor: UIKit.UIColor
  public var listItemTitleFont: UIKit.UIFont
  public var listItemSubTitleTextColor: UIKit.UIColor
  public var listItemSubTitleFont: UIKit.UIFont
  public var listItemBackground: UIKit.UIColor
  public var listItemBorderWidth: CoreFoundation.CGFloat
  public var listItemBorderColor: UIKit.UIColor
  public var listItemCornerRadius: CometChatUIKitSwift.CometChatCornerStyle
  public var listItemSelectionImageTint: UIKit.UIColor
  public var listItemSelectedBackground: UIKit.UIColor
  public var listItemDeSelectedImageTint: UIKit.UIColor
  public var listItemSelectedImage: UIKit.UIImage
  public var listItemDeSelectedImage: UIKit.UIImage
  public var cornerRadius: CometChatUIKitSwift.CometChatCornerStyle?
  public var borderWidth: CoreFoundation.CGFloat
  public var borderColor: UIKit.UIColor
  public var backgroundColor: UIKit.UIColor
  public var bubbleContainerBackgroundColor: UIKit.UIColor
  public var bubbleContainerBorderWidth: CoreFoundation.CGFloat
  public var bubbleContainerBorderColor: UIKit.UIColor
  public var bubbleContainerCornerRadius: CometChatUIKitSwift.CometChatCornerStyle?
  public var errorStateTextColor: UIKit.UIColor
  public var errorStateTextFont: UIKit.UIFont
  public var emptyStateTextColor: UIKit.UIColor
  public var emptyStateTextFont: UIKit.UIFont
}
@_inheritsConvenienceInitializers public class TimeSlotSelectorStyle : CometChatUIKitSwift.BaseStyle {
  override public init()
  @discardableResult
  public func set(titleFont: UIKit.UIFont) -> Self
  @discardableResult
  public func set(titleColor: UIKit.UIColor) -> Self
  @discardableResult
  public func set(slotTextFont: UIKit.UIFont) -> Self
  @discardableResult
  public func set(slotTextColor: UIKit.UIColor) -> Self
  @discardableResult
  public func set(selectedSlotBackgroundColor: UIKit.UIColor) -> Self
  @discardableResult
  public func set(selectedSlotTextColor: UIKit.UIColor) -> Self
  @objc deinit
}
@objc @_Concurrency.MainActor @preconcurrency open class CometChatShimmerView : UIKit.UIView, UIKit.UITableViewDelegate, UIKit.UITableViewDataSource {
  @_Concurrency.MainActor @preconcurrency public var colorGradient1: UIKit.UIColor
  @_Concurrency.MainActor @preconcurrency public var colorGradient2: UIKit.UIColor
  @_Concurrency.MainActor @preconcurrency public var tableView: UIKit.UITableView {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var animation: QuartzCore.CABasicAnimation
  @_Concurrency.MainActor @preconcurrency @objc dynamic public init()
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency open func startShimmer()
  @_Concurrency.MainActor @preconcurrency open func stopShimmer()
  @_Concurrency.MainActor @preconcurrency open func addShimmer(view: UIKit.UIView, size: CoreFoundation.CGSize)
  @_Concurrency.MainActor @preconcurrency open func registerCellWith(title: Swift.String)
  @_Concurrency.MainActor @preconcurrency open func buildUI()
  @_Concurrency.MainActor @preconcurrency @objc open func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc open func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor @preconcurrency @objc open func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
  @objc deinit
}
extension CometChatUIKitSwift.CometChatCallLogs {
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(callRequestBuilder: Any?) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(outgoingCallConfiguration: CometChatUIKitSwift.OutgoingCallConfiguration) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(onError: ((_ error: Any) -> ())?) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(onLoad: @escaping (([Any]) -> Swift.Void)) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(onEmpty: @escaping (() -> Swift.Void)) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(onItemClick: ((_ callLog: Any) -> ())?) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(onItemLongClick: ((_ callLog: Any, _ indexPath: Foundation.IndexPath) -> ())?) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(datePattern: @escaping ((_ callLog: Any) -> Swift.String)) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(options: ((_ callLog: Any) -> [CometChatUIKitSwift.CometChatCallOption])?) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func add(options: ((_ callLog: Any) -> [CometChatUIKitSwift.CometChatCallOption])?) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(subtitleView: ((_ callLog: Any) -> UIKit.UIView)?) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(trailView: ((_ callLog: Any) -> UIKit.UIView)?) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(titleView: ((_ callLog: Any) -> UIKit.UIView)?) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(listItemView: ((_ callLog: Any) -> UIKit.UIView)?) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(onCallButtonClicked: ((Any) -> Swift.Void)?) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(leadingView: ((_ callLog: Any) -> UIKit.UIView)?) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(goToCallLogDetail: ((_ callLog: Any, _ user: CometChatSDK.User?, _ group: CometChatSDK.Group?) -> Swift.Void)?) -> Self
}
extension CometChatUIKitSwift.CometChatThreadedMessageHeader {
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(parentMessage: CometChatSDK.BaseMessage) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(templates: [CometChatUIKitSwift.CometChatMessageTemplate]) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func add(template: CometChatUIKitSwift.CometChatMessageTemplate) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(maxHeight: CoreFoundation.CGFloat) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(messageAlignment: CometChatUIKitSwift.MessageListAlignment) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(datePattern: @escaping ((_ conversation: CometChatSDK.Conversation) -> Swift.String)) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(textFormatters: [CometChatUIKitSwift.CometChatTextFormatter]) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(count: Swift.Int) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func incrementCount() -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func reset() -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(controller: UIKit.UIViewController?) -> Self
}
extension CometChatUIKitSwift.GroupsViewModel : CometChatSDK.CometChatGroupDelegate {
  @objc dynamic public func onGroupMemberJoined(action: CometChatSDK.ActionMessage, joinedUser: CometChatSDK.User, joinedGroup: CometChatSDK.Group)
  @objc dynamic public func onGroupMemberLeft(action: CometChatSDK.ActionMessage, leftUser: CometChatSDK.User, leftGroup: CometChatSDK.Group)
  @objc dynamic public func onGroupMemberKicked(action: CometChatSDK.ActionMessage, kickedUser: CometChatSDK.User, kickedBy: CometChatSDK.User, kickedFrom: CometChatSDK.Group)
  @objc dynamic public func onGroupMemberBanned(action: CometChatSDK.ActionMessage, bannedUser: CometChatSDK.User, bannedBy: CometChatSDK.User, bannedFrom: CometChatSDK.Group)
  @objc dynamic public func onGroupMemberUnbanned(action: CometChatSDK.ActionMessage, unbannedUser: CometChatSDK.User, unbannedBy: CometChatSDK.User, unbannedFrom: CometChatSDK.Group)
  @objc dynamic public func onGroupMemberScopeChanged(action: CometChatSDK.ActionMessage, scopeChangeduser: CometChatSDK.User, scopeChangedBy: CometChatSDK.User, scopeChangedTo: Swift.String, scopeChangedFrom: Swift.String, group: CometChatSDK.Group)
  @objc dynamic public func onMemberAddedToGroup(action: CometChatSDK.ActionMessage, addedBy: CometChatSDK.User, addedUser: CometChatSDK.User, addedTo: CometChatSDK.Group)
}
extension CometChatUIKitSwift.GroupsViewModel : CometChatUIKitSwift.CometChatGroupEventListener {
  @objc dynamic public func ccGroupCreated(group: CometChatSDK.Group)
  @objc dynamic public func ccGroupDeleted(group: CometChatSDK.Group)
  @objc dynamic public func ccGroupMemberJoined(joinedUser: CometChatSDK.User, joinedGroup: CometChatSDK.Group)
  @objc dynamic public func onGroupMemberLeave(leftUser: CometChatSDK.User, leftGroup: CometChatSDK.Group)
  @objc dynamic public func ccOwnershipChanged(group: CometChatSDK.Group, newOwner: CometChatSDK.GroupMember)
  @objc dynamic public func ccGroupLeft(action: CometChatSDK.ActionMessage, leftUser: CometChatSDK.User, leftGroup: CometChatSDK.Group)
  @objc dynamic public func ccGroupMemberBanned(action: CometChatSDK.ActionMessage, bannedUser: CometChatSDK.User, bannedBy: CometChatSDK.User, bannedFrom: CometChatSDK.Group)
  @objc dynamic public func ccGroupMemberKicked(action: CometChatSDK.ActionMessage, kickedUser: CometChatSDK.User, kickedBy: CometChatSDK.User, kickedFrom: CometChatSDK.Group)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class ConversationSimmerView : CometChatUIKitSwift.CometChatShimmerView {
  @_Concurrency.MainActor @preconcurrency public var cellCount: Swift.Int
  @_Concurrency.MainActor @preconcurrency override open func buildUI()
  @_Concurrency.MainActor @preconcurrency override open func startShimmer()
  @_Concurrency.MainActor @preconcurrency override open func stopShimmer()
  @_Concurrency.MainActor @preconcurrency @objc override open func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc override open func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init()
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public protocol MessageHeaderViewModelProtocol {
  var user: CometChatSDK.User? { get set }
  var group: CometChatSDK.Group? { get set }
  var name: Swift.String? { get set }
  var updateGroupCount: ((CometChatSDK.Group) -> Swift.Void)? { get set }
  var updateTypingStatus: ((_ user: CometChatSDK.User?, _ isTyping: Swift.Bool) -> Swift.Void)? { get set }
  var updateUserStatus: ((Swift.Bool) -> Swift.Void)? { get set }
  var onUpdate: (() -> Swift.Void)? { get set }
  var hideUserStatus: (() -> Swift.Void)? { get set }
  var unHideUserStatus: (() -> Swift.Void)? { get set }
  var listenerRandomId: Foundation.TimeInterval { get set }
  func set(user: CometChatSDK.User)
  func set(group: CometChatSDK.Group)
  func connect()
  func disconnect()
  func checkBlockedStatus() -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers public class MessageHeaderViewModel : ObjectiveC.NSObject, CometChatUIKitSwift.MessageHeaderViewModelProtocol {
  public var user: CometChatSDK.User?
  public var group: CometChatSDK.Group?
  public var name: Swift.String?
  public var updateTypingStatus: ((_ user: CometChatSDK.User?, _ isTyping: Swift.Bool) -> Swift.Void)?
  public var updateUserStatus: ((Swift.Bool) -> Swift.Void)?
  public var updateGroupCount: ((CometChatSDK.Group) -> Swift.Void)?
  public var listenerRandomId: Foundation.TimeInterval
  public var hideUserStatus: (() -> Swift.Void)?
  public var unHideUserStatus: (() -> Swift.Void)?
  public var onUpdate: (() -> Swift.Void)?
  @objc override dynamic public init()
  public func set(user: CometChatSDK.User)
  public func set(group: CometChatSDK.Group)
  public func connect()
  public func disconnect()
  public func checkBlockedStatus() -> Swift.Bool
  @objc deinit
}
public class CometChatDialog {
  public init()
  @discardableResult
  public func set(messageText: Swift.String) -> Self
  @discardableResult
  public func set(messageColor: UIKit.UIColor) -> Self
  @discardableResult
  public func set(messageTextFont: UIKit.UIFont) -> Self
  @discardableResult
  public func set(title: Swift.String) -> Self
  @discardableResult
  public func set(titleColor: UIKit.UIColor) -> Self
  @discardableResult
  public func set(titleFont: UIKit.UIFont) -> Self
  @discardableResult
  public func set(confirmButtonText: Swift.String) -> Self
  @discardableResult
  public func set(confirmButtonTextColor: UIKit.UIColor) -> Self
  @discardableResult
  public func set(confirmButtonTextFont: UIKit.UIFont) -> Self
  @discardableResult
  public func set(cancelButtonText: Swift.String) -> Self
  @discardableResult
  public func set(cancelButtonTextColor: UIKit.UIColor) -> Self
  @discardableResult
  public func set(cancelButtonTextFont: UIKit.UIFont) -> Self
  @discardableResult
  public func set(error: Swift.String) -> Self
  @discardableResult
  public func open(onConfirm: @escaping () -> (), onCancel: @escaping () -> ()) -> Self
  @discardableResult
  public func open(onConfirm: @escaping () -> ()) -> Self
  @discardableResult
  public func open() -> Self
  @objc deinit
}
public class CometChatUserOption : CometChatUIKitSwift.CometChatOption {
  public init(titleColor: UIKit.UIColor?, titleFont: UIKit.UIFont?, iconTint: UIKit.UIColor?, backgroundColor: UIKit.UIColor?, onClick: ((CometChatSDK.User?, Swift.Int, CometChatUIKitSwift.CometChatUserOption, UIKit.UIViewController?) -> Swift.Void)?)
  @objc deinit
}
public class CometChatConversationOption : CometChatUIKitSwift.CometChatOption {
  public init(title: Swift.String, titleColor: UIKit.UIColor?, icon: UIKit.UIImage?, titleFont: UIKit.UIFont?, iconTint: UIKit.UIColor?, backgroundColor: UIKit.UIColor?, onClick: ((CometChatSDK.User?, Swift.Int, CometChatUIKitSwift.CometChatConversationOption, UIKit.UIViewController?) -> Swift.Void)?)
  @objc deinit
}
public class CometChatGroupOption : CometChatUIKitSwift.CometChatOption {
  public init(titleColor: UIKit.UIColor?, titleFont: UIKit.UIFont?, iconTint: UIKit.UIColor?, backgroundColor: UIKit.UIColor?, onClick: ((CometChatSDK.Group?, Swift.Int, CometChatUIKitSwift.CometChatGroupOption, UIKit.UIViewController?) -> Swift.Void)?)
  @objc deinit
}
public class CometChatCallOption : CometChatUIKitSwift.CometChatOption {
  public init(titleColor: UIKit.UIColor?, titleFont: UIKit.UIFont?, iconTint: UIKit.UIColor?, backgroundColor: UIKit.UIColor?, onClick: ((CometChatSDK.BaseMessage?, Swift.Int, CometChatUIKitSwift.CometChatCallOption, UIKit.UIViewController?) -> Swift.Void)?)
  @objc deinit
}
public class CometChatGroupMemberOption : CometChatUIKitSwift.CometChatOption {
  public var titleColor: UIKit.UIColor?
  public var titleFont: UIKit.UIFont?
  public var backgroundColor: UIKit.UIColor?
  public var onClick: ((_ groupMember: CometChatSDK.GroupMember?, _ group: CometChatSDK.Group?, _ section: Swift.Int, _ option: CometChatUIKitSwift.CometChatGroupMemberOption, _ controller: UIKit.UIViewController?) -> ())?
  public init(id: Swift.String?, title: Swift.String?, icon: UIKit.UIImage?, backgroundColor: UIKit.UIColor?, onClick: ((_ groupMember: CometChatSDK.GroupMember?, _ group: CometChatSDK.Group?, _ section: Swift.Int, _ option: CometChatUIKitSwift.CometChatGroupMemberOption, _ controller: UIKit.UIViewController?) -> ())?)
  @objc deinit
}
@_inheritsConvenienceInitializers public class CometChatSmartReplyExtension : CometChatUIKitSwift.ExtensionDataSource {
  public init()
  override public func addExtension()
  override public func getExtensionId() -> Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers public class CometChatSticker {
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class CometChatReactionList : UIKit.UIViewController {
  @_Concurrency.MainActor @preconcurrency public static var style: CometChatUIKitSwift.ReactionListStyle
  @_Concurrency.MainActor @preconcurrency public static var avatarStyle: CometChatUIKitSwift.AvatarStyle
  @_Concurrency.MainActor @preconcurrency public var style: CometChatUIKitSwift.ReactionListStyle {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var avatarStyle: CometChatUIKitSwift.AvatarStyle {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var disableLoadingState: Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension CometChatUIKitSwift.CometChatReactionList : UIKit.UICollectionViewDataSource, UIKit.UICollectionViewDelegate, UIKit.UICollectionViewDelegateFlowLayout {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, sizeForItemAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGSize
}
extension CometChatUIKitSwift.CometChatReactionList : UIKit.UITableViewDataSource, UIKit.UITableViewDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func tableView(_ tableView: UIKit.UITableView, willSelectRowAt indexPath: Foundation.IndexPath) -> Foundation.IndexPath?
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func tableView(_ tableView: UIKit.UITableView, willDisplay cell: UIKit.UITableViewCell, forRowAt indexPath: Foundation.IndexPath)
}
extension CometChatUIKitSwift.CometChatReactionList {
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(defaultReaction: Swift.String) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(message: CometChatSDK.BaseMessage) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(reactionRequestBuilder: CometChatSDK.ReactionsRequestBuilder) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(listItemStyle: any CometChatUIKitSwift.ListItemStyle) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(onClick: ((_ messageReaction: CometChatSDK.Reaction, _ messageObject: CometChatSDK.BaseMessage) -> ())?) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(errorStateView: UIKit.UIView) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(loadingStateView: UIKit.UIView) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(configuration: CometChatUIKitSwift.ReactionListConfiguration?) -> Self
}
@_hasMissingDesignatedInitializers @IBDesignable @objc @_Concurrency.MainActor @preconcurrency final public class CometChatReceipt : UIKit.UIImageView {
  @_Concurrency.MainActor @preconcurrency public static var style: CometChatUIKitSwift.ReceiptStyle
  @_Concurrency.MainActor @preconcurrency final public var style: CometChatUIKitSwift.ReceiptStyle {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(image: UIKit.UIImage?)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public init()
  @_Concurrency.MainActor @preconcurrency @objc override final public func layoutSubviews()
  @discardableResult
  @_Concurrency.MainActor @preconcurrency final public func disable(receipt: Swift.Bool) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency final public func set(receipt status: CometChatUIKitSwift.ReceiptStatus, tintColor: UIKit.UIColor? = nil) -> Self
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class AIAssistViewController : CometChatUIKitSwift.CometChatListBase {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency override open func buildUI()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension CometChatUIKitSwift.AIAssistViewController {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func tableView(_ tableView: UIKit.UITableView, heightForRowAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
}
extension CometChatUIKitSwift.AIAssistViewController {
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func add(message: CometChatSDK.TextMessage) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(onMessageSent: ((CometChatSDK.BaseMessage) -> ())?) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(configuration: CometChatUIKitSwift.AIAssistBotConfiguration?) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(title: Swift.String) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(closeIcon: UIKit.UIImage) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(closeIconTint: UIKit.UIColor) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(bot: CometChatSDK.User?) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(sendIcon: UIKit.UIImage) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(sendIconTint: UIKit.UIColor) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(messageInputStyle: CometChatUIKitSwift.MessageInputStyle) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func update(message: CometChatSDK.TextMessage) -> Self
}
@_inheritsConvenienceInitializers public class MessageInputStyle : CometChatUIKitSwift.BaseStyle {
  override public init()
  @discardableResult
  public func set(textColor: UIKit.UIColor) -> Self
  @discardableResult
  public func set(textFont: UIKit.UIFont) -> Self
  @discardableResult
  public func set(placeHolderTextFont: UIKit.UIFont) -> Self
  @discardableResult
  public func set(placeHolderTextColor: UIKit.UIColor) -> Self
  @discardableResult
  public func set(dividerColor: UIKit.UIColor) -> Self
  @discardableResult
  public func set(inputBackgroundColor: UIKit.UIColor) -> Self
  @objc deinit
}
public struct IncomingCallStyle {
  public var overlayBackgroundColor: UIKit.UIColor
  public var acceptButtonBackgroundColor: UIKit.UIColor
  public var rejectButtonBackgroundColor: UIKit.UIColor
  public var acceptButtonCornerRadius: CometChatUIKitSwift.CometChatCornerStyle?
  public var rejectButtonCornerRadius: CometChatUIKitSwift.CometChatCornerStyle?
  public var acceptButtonBorderColor: UIKit.UIColor
  public var rejectButtonBorderColor: UIKit.UIColor
  public var acceptButtonBorderWidth: CoreFoundation.CGFloat
  public var rejectButtonBorderWidth: CoreFoundation.CGFloat
  public var acceptButtonTintColor: UIKit.UIColor
  public var rejectButtonTintColor: UIKit.UIColor
  public var acceptButtonImage: UIKit.UIImage
  public var rejectButtonImage: UIKit.UIImage
  public var backgroundColor: UIKit.UIColor
  public var cornerRadius: CometChatUIKitSwift.CometChatCornerStyle?
  public var borderColor: UIKit.UIColor
  public var borderWidth: CoreFoundation.CGFloat
  public var callLabelColor: UIKit.UIColor
  public var callLabelFont: UIKit.UIFont
  public var nameLabelColor: UIKit.UIColor
  public var nameLabelFont: UIKit.UIFont
  public init()
}
public struct UsersStyle : CometChatUIKitSwift.ListBaseStyle, CometChatUIKitSwift.ListItemStyle, CometChatUIKitSwift.SearchBarStyle {
  public var listItemSelectedImage: UIKit.UIImage
  public var listItemDeSelectedImage: UIKit.UIImage
  public var searchIconTintColor: UIKit.UIColor?
  public var searchBarStyle: UIKit.UISearchBar.Style
  public var searchTintColor: UIKit.UIColor?
  public var searchBarTintColor: UIKit.UIColor?
  public var searchBarPlaceholderTextColor: UIKit.UIColor?
  public var searchBarPlaceholderTextFont: UIKit.UIFont?
  public var searchBarTextColor: UIKit.UIColor?
  public var searchBarTextFont: UIKit.UIFont?
  public var searchBarBackgroundColor: UIKit.UIColor?
  public var searchBarCancelIconTintColor: UIKit.UIColor?
  public var searchBarCrossIconTintColor: UIKit.UIColor?
  public var backgroundColor: UIKit.UIColor
  public var borderWidth: CoreFoundation.CGFloat
  public var borderColor: UIKit.UIColor
  public var cornerRadius: CometChatUIKitSwift.CometChatCornerStyle
  public var titleColor: UIKit.UIColor?
  public var titleFont: UIKit.UIFont?
  public var largeTitleColor: UIKit.UIColor?
  public var largeTitleFont: UIKit.UIFont?
  public var navigationBarTintColor: UIKit.UIColor?
  public var navigationBarItemsTintColor: UIKit.UIColor?
  public var errorTitleTextFont: UIKit.UIFont
  public var errorTitleTextColor: UIKit.UIColor
  public var errorSubTitleFont: UIKit.UIFont
  public var errorSubTitleTextColor: UIKit.UIColor
  public var retryButtonTextColor: UIKit.UIColor
  public var retryButtonTextFont: UIKit.UIFont
  public var retryButtonBackgroundColor: UIKit.UIColor
  public var retryButtonBorderColor: UIKit.UIColor
  public var retryButtonBorderWidth: CoreFoundation.CGFloat
  public var retryButtonCornerRadius: CometChatUIKitSwift.CometChatCornerStyle
  public var emptyTitleTextFont: UIKit.UIFont
  public var emptyTitleTextColor: UIKit.UIColor
  public var emptySubTitleFont: UIKit.UIFont
  public var emptySubTitleTextColor: UIKit.UIColor
  public var tableViewSeparator: UIKit.UIColor
  public var listItemTitleTextColor: UIKit.UIColor
  public var listItemTitleFont: UIKit.UIFont
  public var listItemSubTitleTextColor: UIKit.UIColor
  public var listItemSubTitleFont: UIKit.UIFont
  public var listItemBackground: UIKit.UIColor
  public var listItemBorderWidth: CoreFoundation.CGFloat
  public var listItemBorderColor: UIKit.UIColor
  public var listItemCornerRadius: CometChatUIKitSwift.CometChatCornerStyle
  public var listItemSelectionImageTint: UIKit.UIColor
  public var listItemSelectedBackground: UIKit.UIColor
  public var listItemDeSelectedImageTint: UIKit.UIColor
  public var headerTitleColor: UIKit.UIColor?
  public var headerTitleFont: UIKit.UIFont?
  public init()
}
open class SuggestionItem {
  public var id: Swift.String?
  public var name: Swift.String?
  public var visibleText: Swift.String?
  public var underlyingText: Swift.String?
  public var status: CometChatSDK.UserStatus
  public var visibleTextAttributes: [Foundation.NSAttributedString.Key : Any]?
  public var data: [Swift.String : Any]?
  public var listItemStyle: (any CometChatUIKitSwift.ListItemStyle)?
  public var leftIconStyle: CometChatUIKitSwift.AvatarStyle?
  public var hideLeftIcon: Swift.Bool
  public var leftIconUrl: Swift.String?
  public var leftIconImage: UIKit.UIImage?
  public var statusIndicatorStyle: CometChatUIKitSwift.StatusIndicatorStyle
  public init(id: Swift.String? = nil, name: Swift.String? = nil, leftIconUrl: Swift.String? = nil, visibleText: Swift.String? = nil, underlyingText: Swift.String? = nil, data: [Swift.String : Any]? = nil, listItemStyle: (any CometChatUIKitSwift.ListItemStyle)? = nil, visibleTextAttributes: [Foundation.NSAttributedString.Key : Any]? = nil, status: CometChatSDK.UserStatus = .offline, hideLeftIcon: Swift.Bool = false, leftIconImage: UIKit.UIImage? = nil)
  @objc deinit
}
public struct StickerBubbleStyle : CometChatUIKitSwift.BaseMessageBubbleStyle {
  public var backgroundColor: UIKit.UIColor?
  public var backgroundDrawable: UIKit.UIImage?
  public var borderWidth: CoreFoundation.CGFloat?
  public var borderColor: UIKit.UIColor?
  public var cornerRadius: CometChatUIKitSwift.CometChatCornerStyle?
  public var avatarStyle: CometChatUIKitSwift.AvatarStyle?
  public var dateStyle: CometChatUIKitSwift.DateStyle?
  public var receiptStyle: CometChatUIKitSwift.ReceiptStyle?
  public var headerTextColor: UIKit.UIColor?
  public var headerTextFont: UIKit.UIFont?
  public var threadedIndicatorTextFont: UIKit.UIFont?
  public var threadedIndicatorTextColor: UIKit.UIColor?
  public var threadedIndicatorImageTint: UIKit.UIColor?
  public var reactionsStyle: CometChatUIKitSwift.ReactionsStyle?
  public init()
}
@_inheritsConvenienceInitializers public class LinkPreviewViewModel : CometChatUIKitSwift.DataSourceDecorator {
  override public init(dataSource: any CometChatUIKitSwift.DataSource)
  override public func getId() -> Swift.String
  override public func getTextMessageContentView(message: CometChatSDK.TextMessage, controller: UIKit.UIViewController?, alignment: CometChatUIKitSwift.MessageBubbleAlignment, style: CometChatUIKitSwift.TextBubbleStyle?, additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration?) -> UIKit.UIView?
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class CometChatAISmartReply : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency final public let titleLabel: UIKit.UILabel
  @_Concurrency.MainActor @preconcurrency final public let cancelButton: UIKit.UIButton
  @_Concurrency.MainActor @preconcurrency final public let errorView: UIKit.UIView
  @_Concurrency.MainActor @preconcurrency final public let errorLabel: UIKit.UILabel
  @_Concurrency.MainActor @preconcurrency public var tableView: CometChatUIKitSwift.SelfSizingTableView
  @_Concurrency.MainActor @preconcurrency public var aiMessagesList: [Swift.String]
  @_Concurrency.MainActor @preconcurrency public var onAiMessageClicked: ((_ selectedReply: Swift.String) -> ())?
  @_Concurrency.MainActor @preconcurrency public var onAiCloseButtonClicked: (() -> ())?
  @_Concurrency.MainActor @preconcurrency public var id: [Swift.String : Any]?
  @_Concurrency.MainActor @preconcurrency public var loadingView: UIKit.UIView!
  @_Concurrency.MainActor @preconcurrency public var disableLoadingState: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public var isLoadingViewVisible: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public static var style: CometChatUIKitSwift.AISmartRepliesStyle
  @_Concurrency.MainActor @preconcurrency public var style: CometChatUIKitSwift.AISmartRepliesStyle {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func willMove(toWindow newWindow: UIKit.UIWindow?)
  @_Concurrency.MainActor @preconcurrency public func setupDelegate()
  @_Concurrency.MainActor @preconcurrency open func buildUI()
  @_Concurrency.MainActor @preconcurrency open func setupStyle()
  @_Concurrency.MainActor @preconcurrency public func showLoadingView()
  @_Concurrency.MainActor @preconcurrency public func hideLoadingView()
  @discardableResult
  @objc @_Concurrency.MainActor @preconcurrency public func set(aiMessageOptions: [Swift.String]) -> Self
  @discardableResult
  @objc @_Concurrency.MainActor @preconcurrency public func onMessageClicked(onAiMessageClicked: @escaping ((_ selectedReply: Swift.String) -> ())) -> Self
  @discardableResult
  @objc @_Concurrency.MainActor @preconcurrency public func set(tableViewStyle: UIKit.UITableViewCell.SeparatorStyle) -> Self
  @discardableResult
  @objc @_Concurrency.MainActor @preconcurrency public func show(error: Swift.Bool) -> Self
  @objc deinit
}
extension CometChatUIKitSwift.CometChatAISmartReply : UIKit.UITableViewDelegate, UIKit.UITableViewDataSource {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func tableView(_ tableView: UIKit.UITableView, heightForRowAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGFloat
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class SelfSizingTableView : UIKit.UITableView {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var contentSize: CoreFoundation.CGSize {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect, style: UIKit.UITableView.Style)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension CometChatUIKitSwift.MessageHeaderViewModel : CometChatSDK.CometChatUserDelegate {
  @objc dynamic public func onUserOnline(user: CometChatSDK.User)
  @objc dynamic public func onUserOffline(user: CometChatSDK.User)
}
extension CometChatUIKitSwift.MessageHeaderViewModel : CometChatUIKitSwift.CometChatUserEventListener {
  @objc dynamic public func ccUserBlocked(user: CometChatSDK.User)
  @objc dynamic public func ccUserUnblocked(user: CometChatSDK.User)
}
@_hasMissingDesignatedInitializers public class CallingExtension : CometChatUIKitSwift.ExtensionDataSource {
  public init(configuration: CometChatUIKitSwift.CallingConfiguration? = nil)
  override public func enable()
  override public func getExtensionId() -> Swift.String
  @objc deinit
}
final public class CometChatUIKit {
  public enum ApiStatus {
    case success(CometChatSDK.User)
    case onError(CometChatSDK.CometChatException)
  }
  public static var dateTimeFormatter: CometChatUIKitSwift.CometChatDateTimeFormatter
  public static var bundle: Foundation.Bundle
  public static let soundManager: CometChatUIKitSwift.CometChatSoundManager
  @discardableResult
  public init(uiKitSettings: CometChatUIKitSwift.UIKitSettings, result: @escaping (Swift.Result<Swift.Bool, any Swift.Error>) -> Swift.Void)
  public static func login(authToken: Swift.String, result: @escaping (CometChatUIKitSwift.CometChatUIKit.ApiStatus) -> Swift.Void)
  public static func login(uid: Swift.String, result: @escaping (CometChatUIKitSwift.CometChatUIKit.ApiStatus) -> Swift.Void)
  public static func create(user: CometChatSDK.User, result: @escaping (CometChatUIKitSwift.CometChatUIKit.ApiStatus) -> Swift.Void)
  public static func update(user: CometChatSDK.User, result: @escaping (CometChatUIKitSwift.CometChatUIKit.ApiStatus) -> Swift.Void)
  public static func logout(user: CometChatSDK.User, result: @escaping (CometChatUIKitSwift.CometChatUIKit.ApiStatus) -> Swift.Void)
  public static func getLoggedInUser() -> CometChatSDK.User?
  @objc deinit
}
extension CometChatUIKitSwift.CometChatUIKit {
  public static func sendTextMessage(message: CometChatSDK.TextMessage)
  public static func sendCustomMessage(message: CometChatSDK.CustomMessage)
  public static func sendMediaMessage(message: CometChatSDK.MediaMessage)
}
extension CometChatUIKitSwift.CometChatUIKit {
  public static func getDataSource() -> any CometChatUIKitSwift.DataSource
}
extension CometChatUIKitSwift.CometChatUIKit {
  public static func sendFormMessage(_ formMessage: CometChatUIKitSwift.FormMessage, onSuccess: @escaping (CometChatUIKitSwift.FormMessage) -> (), onError: @escaping (CometChatSDK.CometChatException?) -> ())
  public static func sendCardMessage(_ cardMessage: CometChatUIKitSwift.CardMessage, onSuccess: @escaping (CometChatUIKitSwift.CardMessage) -> (), onError: @escaping (CometChatSDK.CometChatException?) -> ())
  public static func sendSchedulerMessage(schedulerMessage: CometChatUIKitSwift.SchedulerMessage, onSuccess: @escaping (CometChatUIKitSwift.SchedulerMessage) -> (), onError: @escaping (CometChatSDK.CometChatException?) -> ())
}
public class MessageInformationConfiguration {
  public init()
  @discardableResult
  public func set(backIcon: UIKit.UIImage) -> Self
  @discardableResult
  public func set(readIcon: UIKit.UIImage) -> Self
  @discardableResult
  public func set(deliveredIcon: UIKit.UIImage) -> Self
  @discardableResult
  public func set(emptyStateText: Swift.String) -> Self
  @discardableResult
  public func set(emptyStateView: UIKit.UIView) -> Self
  @discardableResult
  public func set(loadingStateView: UIKit.UIView) -> Self
  @discardableResult
  public func set(loadingIcon: UIKit.UIImage) -> Self
  @discardableResult
  public func set(errorStateText: Swift.String) -> Self
  @discardableResult
  public func set(errorStateView: UIKit.UIView) -> Self
  @discardableResult
  public func setListItemView(listItemView: ((_ message: CometChatSDK.BaseMessage, _ receipt: CometChatSDK.MessageReceipt) -> UIKit.UIView)?) -> Self
  @discardableResult
  public func setOnBack(onBack: () -> ()) -> Self
  @discardableResult
  public func setOnError(onError: @escaping ((_ error: CometChatSDK.CometChatException) -> Swift.Void)) -> Self
  @discardableResult
  public func setStyle(messageInformationStyle: CometChatUIKitSwift.MessageInformationStyle) -> Self
  @discardableResult
  public func set(titleText: Swift.String) -> Self
  @objc deinit
}
@_hasMissingDesignatedInitializers public class MessagesDataSource : CometChatUIKitSwift.DataSource {
  public func getEditOption(controller: UIKit.UIViewController?) -> CometChatUIKitSwift.CometChatMessageOption
  public func getDeleteOption(controller: UIKit.UIViewController?) -> CometChatUIKitSwift.CometChatMessageOption
  public func getReplyOption(controller: UIKit.UIViewController?) -> CometChatUIKitSwift.CometChatMessageOption
  public func getShareOption(controller: UIKit.UIViewController?) -> CometChatUIKitSwift.CometChatMessageOption
  public func getMessagePrivatelyOption(controller: UIKit.UIViewController?) -> CometChatUIKitSwift.CometChatMessageOption
  public func getReplyInThreadOption(controller: UIKit.UIViewController?) -> CometChatUIKitSwift.CometChatMessageOption
  public func getCopyOption(controller: UIKit.UIViewController?) -> CometChatUIKitSwift.CometChatMessageOption
  public func getForwardOption(controller: UIKit.UIViewController?) -> CometChatUIKitSwift.CometChatMessageOption
  public func getInformationOption(controller: UIKit.UIViewController?) -> CometChatUIKitSwift.CometChatMessageOption
  public func isSentByMe(loggedInUser: CometChatSDK.User, message: CometChatSDK.BaseMessage) -> Swift.Bool
  public func getTextMessageOptions(loggedInUser: CometChatSDK.User, messageObject: CometChatSDK.BaseMessage, controller: UIKit.UIViewController?, group: CometChatSDK.Group?, additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration) -> [CometChatUIKitSwift.CometChatMessageOption]?
  public func getImageMessageOptions(loggedInUser: CometChatSDK.User, messageObject: CometChatSDK.BaseMessage, controller: UIKit.UIViewController?, group: CometChatSDK.Group?, additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration) -> [CometChatUIKitSwift.CometChatMessageOption]?
  public func getVideoMessageOptions(loggedInUser: CometChatSDK.User, messageObject: CometChatSDK.BaseMessage, controller: UIKit.UIViewController?, group: CometChatSDK.Group?, additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration) -> [CometChatUIKitSwift.CometChatMessageOption]?
  public func getAudioMessageOptions(loggedInUser: CometChatSDK.User, messageObject: CometChatSDK.BaseMessage, controller: UIKit.UIViewController?, group: CometChatSDK.Group?, additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration) -> [CometChatUIKitSwift.CometChatMessageOption]?
  public func getFileMessageOptions(loggedInUser: CometChatSDK.User, messageObject: CometChatSDK.BaseMessage, controller: UIKit.UIViewController?, group: CometChatSDK.Group?, additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration) -> [CometChatUIKitSwift.CometChatMessageOption]?
  public func getDeleteMessageBubble(messageObject: CometChatSDK.BaseMessage, additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration?) -> UIKit.UIView?
  public func getGroupActionBubble(messageObject: CometChatSDK.BaseMessage, additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration?) -> UIKit.UIView?
  public func getBottomView(message: CometChatSDK.BaseMessage, controller: UIKit.UIViewController?, alignment: CometChatUIKitSwift.MessageBubbleAlignment, additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration?) -> UIKit.UIView?
  public func getTextMessageTemplate() -> CometChatUIKitSwift.CometChatMessageTemplate
  public func getTextMessageTemplate(additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration?) -> CometChatUIKitSwift.CometChatMessageTemplate
  public func getTextMessageContentView(message: CometChatSDK.TextMessage, controller: UIKit.UIViewController?, alignment: CometChatUIKitSwift.MessageBubbleAlignment, style: CometChatUIKitSwift.TextBubbleStyle?, additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration?) -> UIKit.UIView?
  public func getAudioMessageTemplate(additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration?) -> CometChatUIKitSwift.CometChatMessageTemplate
  public func getAudioMessageContentView(message: CometChatSDK.MediaMessage, controller: UIKit.UIViewController?, alignment: CometChatUIKitSwift.MessageBubbleAlignment, style: CometChatUIKitSwift.AudioBubbleStyle?, additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration?) -> UIKit.UIView?
  public func getFormMessageTemplate(additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration?) -> CometChatUIKitSwift.CometChatMessageTemplate
  public func getSchedulerMessageTemplate(additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration?) -> CometChatUIKitSwift.CometChatMessageTemplate
  public func getCardMessageTemplate(additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration?) -> CometChatUIKitSwift.CometChatMessageTemplate
  public func getFormMessageContentView(message: CometChatUIKitSwift.FormMessage, controller: UIKit.UIViewController?, alignment: CometChatUIKitSwift.MessageBubbleAlignment, style: CometChatUIKitSwift.FormBubbleStyle?, additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration?) -> UIKit.UIView?
  public func getSchedulerContentView(message: CometChatUIKitSwift.SchedulerMessage, controller: UIKit.UIViewController?, alignment: CometChatUIKitSwift.MessageBubbleAlignment, style: CometChatUIKitSwift.SchedulerBubbleStyle?, additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration?) -> UIKit.UIView?
  public func getCardMessageContentView(message: CometChatUIKitSwift.CardMessage, controller: UIKit.UIViewController?, alignment: CometChatUIKitSwift.MessageBubbleAlignment, style: CometChatUIKitSwift.CardBubbleStyle?, additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration?) -> UIKit.UIView?
  public func getVideoMessageTemplate(additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration?) -> CometChatUIKitSwift.CometChatMessageTemplate
  public func getVideoMessageContentView(message: CometChatSDK.MediaMessage, controller: UIKit.UIViewController?, alignment: CometChatUIKitSwift.MessageBubbleAlignment, style: CometChatUIKitSwift.VideoBubbleStyle?, additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration?) -> UIKit.UIView?
  public func getImageMessageTemplate(additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration?) -> CometChatUIKitSwift.CometChatMessageTemplate
  public func getImageMessageContentView(message: CometChatSDK.MediaMessage, controller: UIKit.UIViewController?, alignment: CometChatUIKitSwift.MessageBubbleAlignment, style: CometChatUIKitSwift.ImageBubbleStyle?, additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration?) -> UIKit.UIView?
  public func getGroupActionTemplate(additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration?) -> CometChatUIKitSwift.CometChatMessageTemplate
  public func getDefaultMessageActionsTemplate(additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration?) -> CometChatUIKitSwift.CometChatMessageTemplate
  public func getFileMessageTemplate(additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration?) -> CometChatUIKitSwift.CometChatMessageTemplate
  public func getFileMessageContentView(message: CometChatSDK.MediaMessage, controller: UIKit.UIViewController?, alignment: CometChatUIKitSwift.MessageBubbleAlignment, style: CometChatUIKitSwift.FileBubbleStyle?, additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration?) -> UIKit.UIView?
  public func getAllMessageTemplates(additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration?) -> [CometChatUIKitSwift.CometChatMessageTemplate]
  public func getMessageTemplate(messageType: Swift.String, messageCategory: Swift.String, additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration?) -> CometChatUIKitSwift.CometChatMessageTemplate?
  public func getMessageOptions(loggedInUser: CometChatSDK.User, messageObject: CometChatSDK.BaseMessage, controller: UIKit.UIViewController?, group: CometChatSDK.Group?, additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration) -> [CometChatUIKitSwift.CometChatMessageOption]?
  public func getCommonOptions(loggedInUser: CometChatSDK.User, messageObject: CometChatSDK.BaseMessage, controller: UIKit.UIViewController?, group: CometChatSDK.Group?, additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration) -> [CometChatUIKitSwift.CometChatMessageOption]
  public func getMessageTypeToSubtitle(messageType: Swift.String, controller: UIKit.UIViewController) -> Swift.String?
  public func takePhotoOption(controller: UIKit.UIViewController?) -> CometChatUIKitSwift.CometChatMessageComposerAction
  public func photoAndVideoLibraryOption(controller: UIKit.UIViewController?) -> CometChatUIKitSwift.CometChatMessageComposerAction
  public func fileAttachmentOption(controller: UIKit.UIViewController?) -> CometChatUIKitSwift.CometChatMessageComposerAction
  public func getAttachmentOptions(controller: UIKit.UIViewController, user: CometChatSDK.User?, group: CometChatSDK.Group?, id: [Swift.String : Any]?, additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration) -> [CometChatUIKitSwift.CometChatMessageComposerAction]?
  public func getAIOptions(controller: UIKit.UIViewController, user: CometChatSDK.User?, group: CometChatSDK.Group?, id: [Swift.String : Any]?, aiOptionsStyle: CometChatUIKitSwift.AIOptionsStyle?) -> [CometChatUIKitSwift.CometChatMessageComposerAction]?
  public func getAllMessageTypes() -> [Swift.String]?
  public func getAllMessageCategories() -> [Swift.String]?
  public func getAuxiliaryOptions(user: CometChatSDK.User?, group: CometChatSDK.Group?, controller: UIKit.UIViewController?, id: [Swift.String : Any]?) -> UIKit.UIView?
  public func getId() -> Swift.String
  public func getVideoMessageBubble(videoUrl: Swift.String?, thumbnailUrl: Swift.String?, message: CometChatSDK.MediaMessage?, controller: UIKit.UIViewController?, style: CometChatUIKitSwift.VideoBubbleStyle?, additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration?) -> UIKit.UIView?
  public func getTextMessageBubble(messageText: Swift.String?, message: CometChatSDK.TextMessage?, controller: UIKit.UIViewController?, alignment: CometChatUIKitSwift.MessageBubbleAlignment, style: CometChatUIKitSwift.TextBubbleStyle?, additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration?) -> UIKit.UIView?
  public func getImageMessageBubble(imageUrl: Swift.String?, caption: Swift.String?, message: CometChatSDK.MediaMessage?, controller: UIKit.UIViewController?, style: CometChatUIKitSwift.ImageBubbleStyle?, additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration?) -> UIKit.UIView?
  public func getAudioMessageBubble(audioUrl: Swift.String?, title: Swift.String?, message: CometChatSDK.MediaMessage?, controller: UIKit.UIViewController?, style: CometChatUIKitSwift.AudioBubbleStyle?, additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration?) -> UIKit.UIView?
  public func getFileMessageBubble(fileUrl: Swift.String?, fileMimeType: Swift.String?, title: Swift.String?, id: Swift.Int?, message: CometChatSDK.MediaMessage?, controller: UIKit.UIViewController?, style: CometChatUIKitSwift.FileBubbleStyle?, additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration?) -> UIKit.UIView?
  public func getFormBubble(message: CometChatUIKitSwift.FormMessage?, controller: UIKit.UIViewController?, alignment: CometChatUIKitSwift.MessageBubbleAlignment, style: CometChatUIKitSwift.FormBubbleStyle?, additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration?) -> UIKit.UIView?
  public func getSchedulerBubble(message: CometChatUIKitSwift.SchedulerMessage?, controller: UIKit.UIViewController?, alignment: CometChatUIKitSwift.MessageBubbleAlignment, style: CometChatUIKitSwift.SchedulerBubbleStyle?, additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration?) -> UIKit.UIView?
  public func getCardBubble(message: CometChatUIKitSwift.CardMessage?, controller: UIKit.UIViewController?, alignment: CometChatUIKitSwift.MessageBubbleAlignment, style: CometChatUIKitSwift.CardBubbleStyle?, additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration?) -> UIKit.UIView?
  public func getLastConversationMessage(conversation: CometChatSDK.Conversation) -> Swift.String?
  public func getLastConversationMessage(conversation: CometChatSDK.Conversation, additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration?) -> Foundation.NSAttributedString?
  public func getAuxiliaryHeaderMenu(user: CometChatSDK.User?, group: CometChatSDK.Group?, controller: UIKit.UIViewController?, id: [Swift.String : Any]?, additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration) -> UIKit.UIStackView?
  public func getTextFormatters() -> [CometChatUIKitSwift.CometChatTextFormatter]
  @objc deinit
}
extension CometChatUIKitSwift.MessageHeaderViewModel : CometChatUIKitSwift.CometChatGroupEventListener {
  @objc dynamic public func ccGroupMemberJoined(joinedUser: CometChatSDK.User, joinedGroup: CometChatSDK.Group)
  @objc dynamic public func ccGroupMemberBanned(action: CometChatSDK.ActionMessage, bannedUser: CometChatSDK.User, bannedBy: CometChatSDK.User, bannedFrom: CometChatSDK.Group)
  @objc dynamic public func ccGroupMemberAdded(messages: [CometChatSDK.ActionMessage], usersAdded: [CometChatSDK.User], groupAddedIn: CometChatSDK.Group, addedBy: CometChatSDK.User)
  @objc dynamic public func ccGroupMemberKicked(action: CometChatSDK.ActionMessage, kickedUser: CometChatSDK.User, kickedBy: CometChatSDK.User, kickedFrom: CometChatSDK.Group)
  @objc dynamic public func ccOwnershipChanged(group: CometChatSDK.Group, newOwner: CometChatSDK.GroupMember)
}
extension CometChatUIKitSwift.MessageHeaderViewModel : CometChatSDK.CometChatGroupDelegate {
  @objc dynamic public func onGroupMemberJoined(action: CometChatSDK.ActionMessage, joinedUser: CometChatSDK.User, joinedGroup: CometChatSDK.Group)
  @objc dynamic public func onGroupMemberLeft(action: CometChatSDK.ActionMessage, leftUser: CometChatSDK.User, leftGroup: CometChatSDK.Group)
  @objc dynamic public func onGroupMemberKicked(action: CometChatSDK.ActionMessage, kickedUser: CometChatSDK.User, kickedBy: CometChatSDK.User, kickedFrom: CometChatSDK.Group)
  @objc dynamic public func onGroupMemberBanned(action: CometChatSDK.ActionMessage, bannedUser: CometChatSDK.User, bannedBy: CometChatSDK.User, bannedFrom: CometChatSDK.Group)
  @objc dynamic public func onGroupMemberUnbanned(action: CometChatSDK.ActionMessage, unbannedUser: CometChatSDK.User, unbannedBy: CometChatSDK.User, unbannedFrom: CometChatSDK.Group)
  @objc dynamic public func onGroupMemberScopeChanged(action: CometChatSDK.ActionMessage, scopeChangeduser: CometChatSDK.User, scopeChangedBy: CometChatSDK.User, scopeChangedTo: Swift.String, scopeChangedFrom: Swift.String, group: CometChatSDK.Group)
  @objc dynamic public func onMemberAddedToGroup(action: CometChatSDK.ActionMessage, addedBy: CometChatSDK.User, addedUser: CometChatSDK.User, addedTo: CometChatSDK.Group)
}
public struct StatusIndicatorStyle {
  public var borderWidth: CoreFoundation.CGFloat
  public var borderColor: UIKit.UIColor
  public var cornerRadius: CometChatUIKitSwift.CometChatCornerStyle?
  public var backgroundColor: UIKit.UIColor
  public var backgroundImage: UIKit.UIImage?
  public init()
}
public enum MessageHeaderConstants {
}
public struct Typography {
  public var largeHeading: UIKit.UIFont {
    get
  }
  public var largeHeading2: UIKit.UIFont {
    get
  }
  public var heading: UIKit.UIFont {
    get
  }
  public var name: UIKit.UIFont {
    get
  }
  public var title1: UIKit.UIFont {
    get
  }
  public var title2: UIKit.UIFont {
    get
  }
  public var subtitle1: UIKit.UIFont {
    get
  }
  public var subtitle2: UIKit.UIFont {
    get
  }
  public var text1: UIKit.UIFont {
    get
  }
  public var text2: UIKit.UIFont {
    get
  }
  public var text3: UIKit.UIFont {
    get
  }
  public var caption1: UIKit.UIFont {
    get
  }
  public var caption2: UIKit.UIFont {
    get
  }
  public init()
  @discardableResult
  public mutating func setFont(largeHeading: UIKit.UIFont) -> CometChatUIKitSwift.Typography
  @discardableResult
  public mutating func setFont(largeHeading2: UIKit.UIFont) -> CometChatUIKitSwift.Typography
  @discardableResult
  public mutating func setFont(heading: UIKit.UIFont) -> CometChatUIKitSwift.Typography
  @discardableResult
  public mutating func setFont(name: UIKit.UIFont) -> CometChatUIKitSwift.Typography
  @discardableResult
  public mutating func setFont(title1: UIKit.UIFont) -> CometChatUIKitSwift.Typography
  @discardableResult
  public mutating func setFont(title2: UIKit.UIFont) -> CometChatUIKitSwift.Typography
  @discardableResult
  public mutating func setFont(subtitle1: UIKit.UIFont) -> CometChatUIKitSwift.Typography
  @discardableResult
  public mutating func setFont(subtitle2: UIKit.UIFont) -> CometChatUIKitSwift.Typography
  @discardableResult
  public mutating func setFont(caption1: UIKit.UIFont) -> CometChatUIKitSwift.Typography
  @discardableResult
  public mutating func setFont(caption2: UIKit.UIFont) -> CometChatUIKitSwift.Typography
  @discardableResult
  public mutating func setFont(text1: UIKit.UIFont) -> CometChatUIKitSwift.Typography
  @discardableResult
  public mutating func setFont(text2: UIKit.UIFont) -> CometChatUIKitSwift.Typography
  @discardableResult
  public mutating func setFont(text3: UIKit.UIFont) -> CometChatUIKitSwift.Typography
  @discardableResult
  public mutating func overrideFont(family: CometChatUIKitSwift.CometChatFontFamily) -> CometChatUIKitSwift.Typography
}
public class CometChatFontFamily {
  public init()
  public init(regular: Swift.String, medium: Swift.String, semibold: Swift.String, bold: Swift.String)
  public init(regular: Swift.String, medium: Swift.String, bold: Swift.String)
  public init(regular: Swift.String)
  @objc deinit
}
public enum CallWorkFlow {
  case defaultCalling
  case directCalling
  public static func == (a: CometChatUIKitSwift.CallWorkFlow, b: CometChatUIKitSwift.CallWorkFlow) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class CometChatOngoingCall : UIKit.UIViewController {
  @_Concurrency.MainActor @preconcurrency public var containerView: UIKit.UIView {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency open func buildUI()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension CometChatUIKitSwift.CometChatOngoingCall {
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(sessionId: Swift.String) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(callSettingsBuilder: Any?) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(callWorkFlow: CometChatUIKitSwift.CallWorkFlow) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func setOnCallEnded(onCallEnded: @escaping ((_ call: CometChatSDK.Call) -> Swift.Void)) -> Self
}
@_hasMissingDesignatedInitializers public class CometChatTypography {
  @_hasMissingDesignatedInitializers public class Title {
    public static var bold: UIKit.UIFont
    public static var medium: UIKit.UIFont
    public static var regular: UIKit.UIFont
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class Heading1 {
    public static var bold: UIKit.UIFont
    public static var medium: UIKit.UIFont
    public static var regular: UIKit.UIFont
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class Heading2 {
    public static var bold: UIKit.UIFont
    public static var medium: UIKit.UIFont
    public static var regular: UIKit.UIFont
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class Heading3 {
    public static var bold: UIKit.UIFont
    public static var medium: UIKit.UIFont
    public static var regular: UIKit.UIFont
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class Heading4 {
    public static var bold: UIKit.UIFont
    public static var medium: UIKit.UIFont
    public static var regular: UIKit.UIFont
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class Body {
    public static var bold: UIKit.UIFont
    public static var medium: UIKit.UIFont
    public static var regular: UIKit.UIFont
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class Caption1 {
    public static var bold: UIKit.UIFont
    public static var medium: UIKit.UIFont
    public static var regular: UIKit.UIFont
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class Caption2 {
    public static var bold: UIKit.UIFont
    public static var medium: UIKit.UIFont
    public static var regular: UIKit.UIFont
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class Button {
    public static var bold: UIKit.UIFont
    public static var medium: UIKit.UIFont
    public static var regular: UIKit.UIFont
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class Link {
    public static var regular: UIKit.UIFont
    @objc deinit
  }
  @objc deinit
}
@objc @_Concurrency.MainActor @preconcurrency open class CometChatConversations : CometChatUIKitSwift.CometChatListBase {
  @_Concurrency.MainActor @preconcurrency public static var style: CometChatUIKitSwift.ConversationsStyle
  @_Concurrency.MainActor @preconcurrency public static var avatarStyle: CometChatUIKitSwift.AvatarStyle
  @_Concurrency.MainActor @preconcurrency public static var statusIndicatorStyle: CometChatUIKitSwift.StatusIndicatorStyle
  @_Concurrency.MainActor @preconcurrency public static var receiptStyle: CometChatUIKitSwift.ReceiptStyle
  @_Concurrency.MainActor @preconcurrency public static var badgeStyle: CometChatUIKitSwift.BadgeStyle
  @_Concurrency.MainActor @preconcurrency public static var dateStyle: CometChatUIKitSwift.DateStyle
  @_Concurrency.MainActor @preconcurrency public static var typingIndicatorStyle: CometChatUIKitSwift.TypingIndicatorStyle
  @_Concurrency.MainActor @preconcurrency public var style: CometChatUIKitSwift.ConversationsStyle {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var avatarStyle: CometChatUIKitSwift.AvatarStyle {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var statusIndicatorStyle: CometChatUIKitSwift.StatusIndicatorStyle {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var receiptStyle: CometChatUIKitSwift.ReceiptStyle {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var badgeStyle: CometChatUIKitSwift.BadgeStyle {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var dateStyle: CometChatUIKitSwift.DateStyle {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var typingIndicatorStyle: CometChatUIKitSwift.TypingIndicatorStyle {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var privateGroupIcon: UIKit.UIImage?
  @_Concurrency.MainActor @preconcurrency public var protectedGroupIcon: UIKit.UIImage?
  @_Concurrency.MainActor @preconcurrency public var disableTyping: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public var disableSoundForMessages: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public var customSoundForMessages: Foundation.URL?
  @_Concurrency.MainActor @preconcurrency public static var dateTimeFormatter: CometChatUIKitSwift.CometChatDateTimeFormatter
  @_Concurrency.MainActor @preconcurrency public var dateTimeFormatter: CometChatUIKitSwift.CometChatDateTimeFormatter {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var hideReceipts: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public var hideDeleteConversationOption: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public var hideUserStatus: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public var hideGroupType: Swift.Bool
  @objc deinit
  @_Concurrency.MainActor @preconcurrency @objc dynamic public init()
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency override open func setupStyle()
  @_Concurrency.MainActor @preconcurrency open func defaultSetup()
  @_Concurrency.MainActor @preconcurrency public func connect()
  @_Concurrency.MainActor @preconcurrency public func disconnect()
}
extension CometChatUIKitSwift.CometChatConversations {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func tableView(_ tableView: UIKit.UITableView, heightForRowAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency @objc dynamic open func tableView(_ tableView: UIKit.UITableView, willDisplay cell: UIKit.UITableViewCell, forRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor @preconcurrency public func manageSelectionState(for conversation: CometChatSDK.Conversation, in listItem: CometChatUIKitSwift.CometChatListItem, at indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func tableView(_ tableView: UIKit.UITableView, didDeselectRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func tableView(_ tableView: UIKit.UITableView, canEditRowAt indexPath: Foundation.IndexPath) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func tableView(_ tableView: UIKit.UITableView, trailingSwipeActionsConfigurationForRowAt indexPath: Foundation.IndexPath) -> UIKit.UISwipeActionsConfiguration?
}
extension CometChatUIKitSwift.CometChatConversations : CometChatSDK.CometChatConnectionDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func connected()
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func connecting()
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func disconnected()
}
public struct MessageBubbleStyle {
  public var backgroundColor: UIKit.UIColor
  public var backgroundDrawable: UIKit.UIImage?
  public var borderWidth: CoreFoundation.CGFloat
  public var borderColor: UIKit.UIColor
  public var cornerRadius: CometChatUIKitSwift.CometChatCornerStyle
  public var headerTextColor: UIKit.UIColor
  public var headerTextFont: UIKit.UIFont
  public var threadedIndicatorTextFont: UIKit.UIFont
  public var threadedIndicatorTextColor: UIKit.UIColor
  public var threadedIndicatorImageTint: UIKit.UIColor
  public var avatarStyle: CometChatUIKitSwift.AvatarStyle {
    mutating get
    set
  }
  public var dateStyle: CometChatUIKitSwift.DateStyle {
    mutating get
    set
  }
  public var receiptStyle: CometChatUIKitSwift.ReceiptStyle {
    mutating get
    set
  }
  public var textBubbleStyle: CometChatUIKitSwift.TextBubbleStyle
  public var imageBubbleStyle: CometChatUIKitSwift.ImageBubbleStyle
  public var videoBubbleStyle: CometChatUIKitSwift.VideoBubbleStyle
  public var stickersBubbleStyle: CometChatUIKitSwift.StickerBubbleStyle
  public var audioBubbleStyle: CometChatUIKitSwift.AudioBubbleStyle
  public var fileBubbleStyle: CometChatUIKitSwift.FileBubbleStyle
  public var collaborativeWhiteboardBubbleStyle: CometChatUIKitSwift.CollaborativeBubbleStyle
  public var collaborativeDocumentBubbleStyle: CometChatUIKitSwift.CollaborativeBubbleStyle
  public var messageTranslationBubbleStyle: CometChatUIKitSwift.MessageTranslationBubbleStyle
  public var deleteBubbleStyle: CometChatUIKitSwift.DeleteBubbleStyle
  public var pollBubbleStyle: CometChatUIKitSwift.PollBubbleStyle
  public var linkPreviewBubbleStyle: CometChatUIKitSwift.LinkPreviewBubbleStyle
  public var callBubbleStyle: CometChatUIKitSwift.CallBubbleStyle
  public var reactionsStyle: CometChatUIKitSwift.ReactionsStyle {
    mutating get
    set
  }
  public init()
}
public protocol BaseMessageBubbleStyle {
  var backgroundColor: UIKit.UIColor? { get set }
  var backgroundDrawable: UIKit.UIImage? { get set }
  var borderWidth: CoreFoundation.CGFloat? { get set }
  var borderColor: UIKit.UIColor? { get set }
  var cornerRadius: CometChatUIKitSwift.CometChatCornerStyle? { get set }
  var avatarStyle: CometChatUIKitSwift.AvatarStyle? { get set }
  var dateStyle: CometChatUIKitSwift.DateStyle? { get set }
  var receiptStyle: CometChatUIKitSwift.ReceiptStyle? { get set }
  var headerTextColor: UIKit.UIColor? { get set }
  var headerTextFont: UIKit.UIFont? { get set }
  var threadedIndicatorTextFont: UIKit.UIFont? { get set }
  var threadedIndicatorTextColor: UIKit.UIColor? { get set }
  var threadedIndicatorImageTint: UIKit.UIColor? { get set }
  var reactionsStyle: CometChatUIKitSwift.ReactionsStyle? { get set }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class CometChatActionSheet : UIKit.UIViewController {
  @_Concurrency.MainActor @preconcurrency public static var style: CometChatUIKitSwift.ActionSheetStyle
  @_Concurrency.MainActor @preconcurrency public var style: CometChatUIKitSwift.ActionSheetStyle {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(tableViewStyle: UIKit.UITableView.Style) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func hide(footerView: Swift.Bool) -> Self
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func set(actionItems: [CometChatUIKitSwift.ActionItem]) -> Self
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension CometChatUIKitSwift.CometChatActionSheet : UIKit.UITableViewDataSource, UIKit.UITableViewDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func tableView(_ tableView: UIKit.UITableView, heightForRowAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
}
@_inheritsConvenienceInitializers public class CollaborativeWhiteboardViewModel : CometChatUIKitSwift.DataSourceDecorator {
  override public init(dataSource: any CometChatUIKitSwift.DataSource)
  override public func getId() -> Swift.String
  override public func getAllMessageTypes() -> [Swift.String]?
  override public func getAllMessageCategories() -> [Swift.String]?
  override public func getAllMessageTemplates(additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration?) -> [CometChatUIKitSwift.CometChatMessageTemplate]
  override public func getAttachmentOptions(controller: UIKit.UIViewController, user: CometChatSDK.User?, group: CometChatSDK.Group?, id: [Swift.String : Any]?, additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration) -> [CometChatUIKitSwift.CometChatMessageComposerAction]?
  override public func getLastConversationMessage(conversation: CometChatSDK.Conversation, additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration?) -> Foundation.NSAttributedString?
  public func getTemplate(additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration?) -> CometChatUIKitSwift.CometChatMessageTemplate
  override public func getMessageTemplate(messageType: Swift.String, messageCategory: Swift.String, additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration?) -> CometChatUIKitSwift.CometChatMessageTemplate?
  public func getContentView(_customMessage: CometChatSDK.CustomMessage, controller: UIKit.UIViewController?, additionalConfiguration: CometChatUIKitSwift.AdditionalConfiguration?) -> UIKit.UIView?
  public func getAttachmentOption(controller: UIKit.UIViewController?, user: CometChatSDK.User?, group: CometChatSDK.Group?) -> CometChatUIKitSwift.CometChatMessageComposerAction?
  @objc deinit
}
@_hasMissingDesignatedInitializers public class UsersViewModel {
  @objc deinit
}
extension CometChatUIKitSwift.UsersViewModel {
  @discardableResult
  public func remove(user: CometChatSDK.User) -> Self
  @discardableResult
  public func clearList() -> Self
  public func size() -> Swift.Int
}
public struct BadgeStyle {
  public var textColor: UIKit.UIColor
  public var textFont: UIKit.UIFont
  public var cornerRadius: CometChatUIKitSwift.CometChatCornerStyle?
  public var backgroundColor: UIKit.UIColor
  public var borderWidth: CoreFoundation.CGFloat
  public var borderColor: CoreGraphics.CGColor
  public init()
}
extension CometChatUIKitSwift.Corner : Swift.Equatable {}
extension CometChatUIKitSwift.Corner : Swift.Hashable {}
extension CometChatUIKitSwift.Corner : Swift.RawRepresentable {}
extension CometChatUIKitSwift.ActivityIndicatorStyle : Swift.Equatable {}
extension CometChatUIKitSwift.ActivityIndicatorStyle : Swift.Hashable {}
extension CometChatUIKitSwift.CometChatPollsSection : Swift.Equatable {}
extension CometChatUIKitSwift.CometChatPollsSection : Swift.Hashable {}
extension CometChatUIKitSwift.UIAlignment : Swift.Equatable {}
extension CometChatUIKitSwift.UIAlignment : Swift.Hashable {}
extension CometChatUIKitSwift.MessageBubbleAlignment : Swift.Equatable {}
extension CometChatUIKitSwift.MessageBubbleAlignment : Swift.Hashable {}
extension CometChatUIKitSwift.MessageBubbleAlignment : Swift.RawRepresentable {}
extension CometChatUIKitSwift.MessageBubbleTimeAlignment : Swift.Equatable {}
extension CometChatUIKitSwift.MessageBubbleTimeAlignment : Swift.Hashable {}
extension CometChatUIKitSwift.MessageStatus : Swift.Equatable {}
extension CometChatUIKitSwift.MessageStatus : Swift.Hashable {}
extension CometChatUIKitSwift.MessageStatus : Swift.RawRepresentable {}
extension CometChatUIKitSwift.MessageListAlignment : Swift.Equatable {}
extension CometChatUIKitSwift.MessageListAlignment : Swift.Hashable {}
extension CometChatUIKitSwift.SelectionMode : Swift.Equatable {}
extension CometChatUIKitSwift.SelectionMode : Swift.Hashable {}
extension CometChatUIKitSwift.FormattingType : Swift.Equatable {}
extension CometChatUIKitSwift.FormattingType : Swift.Hashable {}
extension CometChatUIKitSwift.SearchState : Swift.Equatable {}
extension CometChatUIKitSwift.SearchState : Swift.Hashable {}
extension CometChatUIKitSwift.titleAlignment : Swift.Equatable {}
extension CometChatUIKitSwift.titleAlignment : Swift.Hashable {}
extension CometChatUIKitSwift.DateTimePickerMode : Swift.Equatable {}
extension CometChatUIKitSwift.DateTimePickerMode : Swift.Hashable {}
extension CometChatUIKitSwift.MessageComposerMode : Swift.Equatable {}
extension CometChatUIKitSwift.MessageComposerMode : Swift.Hashable {}
extension CometChatUIKitSwift.AuxilaryButtonAlignment : Swift.Equatable {}
extension CometChatUIKitSwift.AuxilaryButtonAlignment : Swift.Hashable {}
extension CometChatUIKitSwift.Language : Swift.Equatable {}
extension CometChatUIKitSwift.Language : Swift.Hashable {}
extension CometChatUIKitSwift.Language : Swift.RawRepresentable {}
extension CometChatUIKitSwift.HttpMethodType : Swift.Equatable {}
extension CometChatUIKitSwift.HttpMethodType : Swift.Hashable {}
extension CometChatUIKitSwift.CometChatQuickReactions.Direction : Swift.Equatable {}
extension CometChatUIKitSwift.CometChatQuickReactions.Direction : Swift.Hashable {}
extension CometChatUIKitSwift.Sound : Swift.Equatable {}
extension CometChatUIKitSwift.Sound : Swift.Hashable {}
extension CometChatUIKitSwift.iCalError : Swift.Equatable {}
extension CometChatUIKitSwift.iCalError : Swift.Hashable {}
extension CometChatUIKitSwift.ReceiptStatus : Swift.Equatable {}
extension CometChatUIKitSwift.ReceiptStatus : Swift.Hashable {}
extension CometChatUIKitSwift.CometChatMentionsFormatter.MentionsType : Swift.Equatable {}
extension CometChatUIKitSwift.CometChatMentionsFormatter.MentionsType : Swift.Hashable {}
extension CometChatUIKitSwift.CometChatMentionsFormatter.MentionsVisibility : Swift.Equatable {}
extension CometChatUIKitSwift.CometChatMentionsFormatter.MentionsVisibility : Swift.Hashable {}
extension CometChatUIKitSwift.elementType : Swift.Equatable {}
extension CometChatUIKitSwift.elementType : Swift.Hashable {}
extension CometChatUIKitSwift.CallWorkFlow : Swift.Equatable {}
extension CometChatUIKitSwift.CallWorkFlow : Swift.Hashable {}
